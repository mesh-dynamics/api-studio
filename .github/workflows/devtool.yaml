name: Build Devtool

on:
  push:
    branches:
      - develop
      - master
      - staging

  release:
    types: [published]

  workflow_dispatch:
    inputs:
      version:
        description: 'version number of the build'
        required: true
        default: '1.0.0'

jobs:
  buildmacOS:
    name: Build devTool for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Build for macOS
        if: ${{ github.event_name == 'push'}}
        env:
          APPLE_ID: ${{ secrets.AC_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          version=$(git describe --tags `git rev-list --tags --max-count=1`)
          version=$(echo ${version} | awk -F. -v OFS=. '{$NF++;print}')
          TIMESTAMP=$(date "+%Y%m%d%H%M%S")
          BRANCH=${GITHUB_REF##*/}
          export RELEASE_TYPE=$BRANCH
          COMMIT=$(git rev-parse --short HEAD)
          NEXTVERSION="${version}-${BRANCH}.${TIMESTAMP}.${COMMIT}"
          echo $NEXTVERSION
          npm install
          brew install yq@3
          jq --arg version "${NEXTVERSION}" '.version = $version' package.json > "tmp" && mv "tmp" package.json
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -m --config electron-builder.$BRANCH.yml --publish always
      - name: Build for macOS(release)
        if: ${{ github.event_name == 'release'}}
        env:
          APPLE_ID: ${{ secrets.AC_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          version=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo $version
          npm install
          export RELEASE_TYPE=customer
          brew install yq@3
          jq --arg version "${version}" '.version = $version' package.json > "tmp" && mv "tmp" package.json
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -m --config electron-builder.yml --publish always
      - name: Build for macOS(manual)
        if: ${{ github.event_name == 'workflow_dispatch'}}
        env:
          APPLE_ID: ${{ secrets.AC_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          version=${{ github.event.inputs.version }}
          echo $version
          npm install
          export RELEASE_TYPE=customer
          brew install yq@3
          jq --arg version "${version}" '.version = $version' package.json > "tmp" && mv "tmp" package.json
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -m --config electron-builder.customer-fitch.yml --publish always

  buildlinux:
    name: Build devTool for linux
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
      - name: yq - portable yaml processor
        uses: mikefarah/yq@3.4.1
      - name: Build for linux
        if: ${{ github.event_name == 'push'}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          version=$(git describe --tags `git rev-list --tags --max-count=1`)
          version=$(echo ${version} | awk -F. -v OFS=. '{$NF++;print}')
          TIMESTAMP=$(date "+%Y%m%d%H%M%S")
          BRANCH=${GITHUB_REF##*/}
          export RELEASE_TYPE=$BRANCH
          COMMIT=$(git rev-parse --short HEAD)
          NEXTVERSION="${version}-${BRANCH}.${TIMESTAMP}.${COMMIT}"
          sudo apt-get update -y
          sudo apt-get install wine64 -y
          npm install
          jq --arg version "${NEXTVERSION}" '.version = $version' package.json > "tmp" && mv "tmp" package.json
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -l --config electron-builder.$BRANCH.yml --publish always

      - name: Build for linux(release)
        if: ${{ github.event_name == 'release'}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          version=$(git describe --tags `git rev-list --tags --max-count=1`)
          npm install
          export RELEASE_TYPE=customer
          jq --arg version "${version}" '.version = $version' package.json > "tmp" && mv "tmp" package.json
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -l --config electron-builder.yml --publish always

  buildwindows:
    name: Build devTool for windows
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
      - name: Build for windows
        shell: pwsh
        if: ${{ github.event_name == 'push'}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

        run: |
          choco install yq --version 3.4.1 -y
          echo 'Decoding certificate string'
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.WIN_CSC_LINK }}")
          [IO.File]::WriteAllBytes("md-cert.pfx", $pfx_cert_byte)
          npm install
          $revision = $(git rev-list --tags --max-count=1)
          $version = $(git describe --tags $revision)
          $versionParts = $version.split('.')
          ([int]$versionParts[2])++
          $NEW_VERSION_NUMBER = $versionParts -join('.')
          $TIMESTAMP = [long] (Get-Date -Date ((Get-Date).ToUniversalTime()) -UFormat %s)
          $COMMIT = $(git rev-parse --short HEAD)
          $BRANCH = $(git branch --show-current).split("/")[-1]
          $Env:RELEASE_TYPE = $BRANCH
          $NEXT_VERSION = "$NEW_VERSION_NUMBER-$BRANCH.$TIMESTAMP.$COMMIT"
          echo $NEXT_VERSION
          jq --arg version $NEXT_VERSION '.version = $version' package.json > .\tmp.txt
          $CONTENT = Get-Content -Path .\tmp.txt
          Remove-Item -path .\package.json
          Add-Content -Path .\package.json -Value $CONTENT
          yq w .\electron-builder.$BRANCH.yml win.certificateFile md-cert.pfx |  yq w - win.certificatePassword "${{ secrets.WIN_CSC_KEY_PASSWORD }}" > ebtmp.txt
          $BUILDER_CONTENT = Get-Content -Path .\ebtmp.txt
          echo $BUILDER_CONTENT
          Remove-Item -path .\electron-builder.$BRANCH.yml
          Add-Content -Path .\electron-builder.$BRANCH.yml -Value $BUILDER_CONTENT
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -w --config electron-builder.$BRANCH.yml --publish always

      - name: Build for windows(release)
        if: ${{ github.event_name == 'release'}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          choco install yq --version 3.4.1 -y
          echo 'Decoding certificate string'
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.WIN_CSC_LINK }}")
          [IO.File]::WriteAllBytes("md-cert.pfx", $pfx_cert_byte)
          npm install
          $revision = $(git rev-list --tags --max-count=1)
          $version = $(git describe --tags $revision)
          jq --arg version $version '.version = $version' package.json > .\tmp.txt
          $CONTENT = Get-Content -Path .\tmp.txt
          Remove-Item -path .\package.json
          Add-Content -Path .\package.json -Value $CONTENT
          $Env:RELEASE_TYPE = "customer"
          yq w .\electron-builder.yml win.certificateFile md-cert.pfx |  yq w - win.certificatePassword "${{ secrets.WIN_CSC_KEY_PASSWORD }}" > ebtmp.txt
          $BUILDER_CONTENT = Get-Content -Path .\ebtmp.txt
          echo $BUILDER_CONTENT
          Remove-Item -path .\electron-builder.yml
          Add-Content -Path .\electron-builder.yml -Value $BUILDER_CONTENT
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -w --config electron-builder.yml --publish always
