---
# Source: cube/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: cube
  labels:
    istio-injection: enabled
---
# Source: cube/templates/secret.yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJmaXRjaG1kIiwicGFzc3dvcmQiOiJmaXRjaEBtZCIsImVtYWlsIjoiZml0Y2hAbWVzaGR5bmFtaWNzLmlvIiwiYXV0aCI6IlptbDBZMmh0WkRwbWFYUmphRUJ0WkE9PSJ9fX0=
kind: Secret
metadata:
  creationTimestamp: null
  name: regcred
  namespace: cube
type: kubernetes.io/dockerconfigjson

---
# Source: cube/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cubews
  namespace: cube
  labels:
    app: cube
data:
  REDIS_HOST: "redis"
  SOLR_CORE: "cube"
  SOLR_BASE_URL: "http://solr-svc.solr.svc.cluster.local:8983/solr/"
---
# Source: cube/templates/service.yaml
##################################################################################################
# Cube Web Services - Record
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubews-record
  namespace: cube
  labels:
    app: cube
    component: cubews-record
spec:
  ports:
  - port: 8080
    name: http
  selector:
    component: cubews-record
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cubews-record-v1
  namespace: cube
spec:
  replicas: 1
  selector:
    matchLabels:
      component: cubews-record
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: cubews-record
        app: cube
        version: v1
        namespace: cube
    spec:
      containers:
      - name: cubews
        image: cubeiocorp/cubews:1b5624dcf47f49c5e327ee31d3764c88c325472f-master
        imagePullPolicy: Always
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "5Gi"
            cpu: "1000m"
        ports:
        - containerPort: 8080
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /cs/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /cs/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        env:
          - name: solr_base_url
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SOLR_BASE_URL
          - name: solr_core
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SOLR_CORE
          - name: redis_host
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: REDIS_HOST
      imagePullSecrets:
      - name: regcred

##################################################################################################
# Cube Web Services - Mock
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubews-mock
  namespace: cube
  labels:
    app: cube
    component: cubews-mock
spec:
  ports:
  - port: 8080
    name: http
  selector:
    component: cubews-mock
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cubews-mock-v1
  namespace: cube
spec:
  selector:
    matchLabels:
      component: cubews-mock
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cube
        component: cubews-mock
        version: v1
        namespace: cube
    spec:
      containers:
      - name: cubews
        image: cubeiocorp/cubews:1b5624dcf47f49c5e327ee31d3764c88c325472f-master
        imagePullPolicy: Always
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "5Gi"
            cpu: "1000m"
        ports:
        - containerPort: 8080
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ms/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ms/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        env:
          - name: solr_base_url
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SOLR_BASE_URL
          - name: solr_core
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SOLR_CORE
          - name: redis_host
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: REDIS_HOST
      imagePullSecrets:
      - name: regcred

##################################################################################################
# Cube Web Services - Replay
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubews-replay
  namespace: cube
  labels:
    app: cube
    component: cubews-replay
spec:
  ports:
  - port: 8080
    name: http
  selector:
    component: cubews-replay
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cubews-replay-v1
  namespace: cube
spec:
  selector:
    matchLabels:
      component: cubews-replay
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cube
        component: cubews-replay
        version: v1
        namespace: cube
    spec:
      containers:
      - name: cubews
        image: cubeiocorp/cubews:1b5624dcf47f49c5e327ee31d3764c88c325472f-master
        imagePullPolicy: Always
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "5Gi"
            cpu: "1000m"
        ports:
        - containerPort: 8080
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /rs/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /rs/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        env:
          - name: solr_base_url
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SOLR_BASE_URL
          - name: solr_core
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SOLR_CORE
          - name: redis_host
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: REDIS_HOST
      imagePullSecrets:
      - name: regcred
##################################################################################################
# Cube UI
##################################################################################################
---
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: nginx-cubeui
    namespace: cube
    labels:
      app: cube
      component: cubeui
  data:
    default.conf: |-
      server {
      listen       80;
      server_name  localhost;

      location /api {
      proxy_http_version 1.1;
      proxy_pass http://cubeui-backend:8080;
      proxy_set_header Host $http_host;
      }

      location / {
          root   /usr/share/nginx/html;
          index  index.html index.htm;
          try_files $uri /index.html;
        }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   /usr/share/nginx/html;
        }

      }
---
apiVersion: v1
kind: Service
metadata:
  name: cubeui
  namespace: cube
  labels:
    app: cube
    component: cubeui
spec:
  type: NodePort
  ports:
  - port: 80
    name: http
    nodePort: 30080
  selector:
    component: cubeui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cubeui-v1
  namespace: cube
spec:
  selector:
    matchLabels:
      component: cubeui
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cube
        component: cubeui
        version: v1
        namespace: cube
    spec:
      containers:
      - name: cubeui
        image: cubeiocorp/cubeui:e8d2ff58d33987dbd4dadfb243149fbf4727d7d8-master
        imagePullPolicy: Always
        volumeMounts:
          - name: config
            mountPath: /etc/nginx/conf.d
        resources:
          requests:
            memory: "128Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        ports:
        - containerPort: 80
      volumes:
        - name: config
          configMap:
            name: nginx-cubeui
      imagePullSecrets:
      - name: regcred
#################################################################################################
# CubeUI backend
#################################################################################################
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: cube
    component: cubeui-backend
  name: cubeui-backend-config
  namespace: cube
data:
  webCorsAllowedOrigins.txt: |-
    http://10.132.56.8:30081

---
apiVersion: v1
kind: Service
metadata:
  name: cubeui-backend
  namespace: cube
  labels:
    app: cube
    component: cubeui-backend
spec:
  ports:
  - port: 8080
    name: http
  selector:
    component: cubeui-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cubeui-backend-v1
  namespace: cube
spec:
  selector:
    matchLabels:
      component: cubeui-backend
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cube
        component: cubeui-backend
        version: v1
        namespace: cube
    spec:
      containers:
      - name: cubeui-backend
        image: cubeiocorp/cubeuibackend:8cb96173ec82f81732bc582206cd1fe416c9b35f-master
        imagePullPolicy: Always
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: spring.datasource.url
          value: "jdbc:postgresql://postgresql.postgres.svc.cluster.local:5432/cubedb?schema=qui"
        - name: spring.datasource.username
          value: "springboot"
        - name: spring.datasource.password
          value: "spring1256cube"
        - name: allowed.origins.path
          value: "/usr/local/tomcat/webCorsAllowedOrigins.txt"
        lifecycle:
          postStart:
            exec:
              command:
              - '/bin/sh'
              - '-c'
              - 'curl -X POST http://localhost:15000/runtime_modify?envoy.reloadable_features.reject_unsupported_transfer_encodings=false'
        resources:
          requests:
            memory: "640Mi"
            cpu: "250m"
          limits:
            memory: "5Gi"
            cpu: "1000m"
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: "/usr/local/tomcat/webCorsAllowedOrigins.txt"
          name: cubeui-backend-config
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 40
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 40
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      volumes:
      - name: cubeui-backend-config
        configMap:
         name: cubeui-backend-config
      imagePullSecrets:
      - name: regcred

#########
#REDIS
#########
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: cube
spec:
  ports:
  - port: 6379
    name: peer
  clusterIP: None
  selector:
    component: redis

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: cube
  labels:
    app: cube
    component: redis
data:
  init.sh: |
    #!/bin/bash
    if [[ ${HOSTNAME} == 'redis-0' ]]; then
      redis-server /redis-config/master.conf
    else
      redis-server /redis-config/slave.conf
    fi
  master.conf: |
    bind 0.0.0.0
    port 6379

    maxmemory 16777216
    dir /redis-data
  sentinel.conf: |
    bind 0.0.0.0
    port 26379

    sentinel monitor redis redis-0.redis 6379 2
    sentinel parallel-syncs redis 1
    sentinel down-after-milliseconds redis 10000
    sentinel failover-timeout redis 20000
  sentinel.sh: |
    #!/bin/bash
    while ! ping -c 1 redis-0.redis; do
        echo 'Waiting for server'
        sleep 1
    done

    redis-sentinel /redis-sentinel-conf/sentinel.conf
  slave.conf: |
    bind 0.0.0.0
    port 6379

    dir .

    slaveof redis-0.redis 6379

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: cube
  labels:
    app: cube
    component: redis
spec:
  selector:
    matchLabels:
      component: redis
  replicas: 1
  serviceName: redis
  template:
    metadata:
      labels:
        app: cube
        component: redis
    spec:
      containers:
      - command: [sh, -c, source /redis-config/init.sh ]
        image: redis:5.0.5-alpine
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - mountPath: /redis-config
          name: config
        - mountPath: /redis-data
          name: data
        resources:
          requests:
            memory: "64Mi"
          limits:
            cpu: "0.1"
            memory: "128Mi"
      - command: [sh, -c, cp /redis-config/sentinel.conf /redis-sentinel-conf/sentinel.conf  && source /redis-config/sentinel.sh]
        image: redis:5.0.5-alpine
        name: sentinel
        volumeMounts:
        - mountPath: /redis-config
          name: config
        - mountPath: /redis-sentinel-conf
          name: redis-sentinel
      volumes:
      - configMap:
          defaultMode: 0666
          name: redis-config
        name: config
      - emptyDir:
        name: data
      - emptyDir:
        name: redis-sentinel

---
# Source: cube/templates/gateway.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: cube-gateway
  namespace: cube
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
    # tls:
    #   httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTP
    hosts:
    - "*"

---
# Source: cube/templates/virtualservice.yaml
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: cube
  namespace: cube
  labels:
    app: cube
spec:
  gateways:
  - cube-gateway
  hosts:
  - "*"
  http:
  - match:
    - uri:
        prefix: /api/
    route:
    - destination:
        host: cubeui-backend
        port:
          number: 8080
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: cubeui
        port:
          number: 80
