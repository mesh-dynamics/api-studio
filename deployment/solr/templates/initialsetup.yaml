apiVersion: batch/v1
kind: Job
metadata:
  name: solrsetup
spec:
  template:
    spec:
      initContainers:
        - name: check-zk
          image: busybox:latest
          command:
            - 'sh'
            - '-c'
            - |
              COUNTER=0;
              while [  $COUNTER -lt 120 ]; do
                for i in "solr-zookeeper-0.solr-zookeeper-headless" "solr-zookeeper-1.solr-zookeeper-headless" "solr-zookeeper-2.solr-zookeeper-headless" ;
                  do mode=$(echo srvr | nc $i 2181 | grep "Mode");
                    if [ "$mode" == "Mode: leader" ] || [ "$mode" == "Mode: standalone" ]; then
                      sleep 60
                      exit 0;
                    fi;
                  done;
                let COUNTER=COUNTER+1;
                sleep 2;
              done;
              echo "Did NOT see a ZK leader after 240 secs!";
              exit 1;
      containers:
      - name: setup
        image: "solr:8.4.1"
        command:
          - /bin/bash
          - -xec
          - |
            /opt/solr-8.4.1/server/scripts/cloud-scripts/zkcli.sh -zkhost solr-zookeeper:2181 -cmd upconfig -confdir /etc/conf/solrconf -confname cube
            curl "http://solr-svc:8983/solr/admin/collections?action=CREATE&name=cube&numShards=1&replicationFactor=2&collection.configName=cube"
        volumeMounts:
          - name: data
            mountPath: /etc/conf/solrconf
          - name: lang
            mountPath: /etc/conf/solrconf/lang
      volumes:
        - name: lang
          configMap:
            name: solr-lang
        - name: data
          configMap:
            name: solr-conf
      restartPolicy: Never
  backoffLimit: 4

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: solr-conf
data:
  managed-schema: "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!--\n Licensed to
    the Apache Software Foundation (ASF) under one or more\n contributor license agreements.
    \ See the NOTICE file distributed with\n this work for additional information
    regarding copyright ownership.\n The ASF licenses this file to You under the Apache
    License, Version 2.0\n (the \"License\"); you may not use this file except in
    compliance with\n the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n
    Unless required by applicable law or agreed to in writing, software\n distributed
    under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific
    language governing permissions and\n limitations under the License.\n-->\n\n<!--\n\n
    This example schema is the recommended starting point for users.\n It should be
    kept correct and concise, usable out-of-the-box.\n\n\n For more information, on
    how to customize this file, please see\n http://lucene.apache.org/solr/guide/documents-fields-and-schema-design.html\n\n
    PERFORMANCE NOTE: this schema includes many optional features and should not\n
    be used for benchmarking.  To improve performance one could\n  - set stored=\"false\"
    for all fields possible (esp large fields) when you\n    only need to search on
    the field but don't need to return the original\n    value.\n  - set indexed=\"false\"
    if you don't need to search on the field, but only\n    return the field as a
    result of searching on other indexed fields.\n  - remove all unneeded copyField
    statements\n  - for best index size and searching performance, set \"index\" to
    false\n    for all general text fields, use copyField to copy them to the\n    catchall
    \"text\" field, and use that for searching.\n-->\n\n<schema name=\"default-config\"
    version=\"1.6\">\n    <!-- attribute \"name\" is the name of this schema and is
    only used for display purposes.\n       version=\"x.y\" is Solr's version number
    for the schema syntax and \n       semantics.  It should not normally be changed
    by applications.\n\n       1.0: multiValued attribute did not exist, all fields
    are multiValued \n            by nature\n       1.1: multiValued attribute introduced,
    false by default \n       1.2: omitTermFreqAndPositions attribute introduced,
    true by default \n            except for text fields.\n       1.3: removed optional
    field compress feature\n       1.4: autoGeneratePhraseQueries attribute introduced
    to drive QueryParser\n            behavior when a single string produces multiple
    tokens.  Defaults \n            to off for version >= 1.4\n       1.5: omitNorms
    defaults to true for primitive field types \n            (int, float, boolean,
    string...)\n       1.6: useDocValuesAsStored defaults to true.\n    -->\n\n    <!--
    Valid attributes for fields:\n     name: mandatory - the name for the field\n
    \    type: mandatory - the name of a field type from the \n       fieldTypes section\n
    \    indexed: true if this field should be indexed (searchable or sortable)\n
    \    stored: true if this field should be retrievable\n     docValues: true if
    this field should have doc values. Doc Values is\n       recommended (required,
    if you are using *Point fields) for faceting,\n       grouping, sorting and function
    queries. Doc Values will make the index\n       faster to load, more NRT-friendly
    and more memory-efficient. \n       They are currently only supported by StrField,
    UUIDField, all \n       *PointFields, and depending on the field type, they might
    require\n       the field to be single-valued, be required or have a default value\n
    \      (check the documentation of the field type you're interested in for\n       more
    information)\n     multiValued: true if this field may contain multiple values
    per document\n     omitNorms: (expert) set to true to omit the norms associated
    with\n       this field (this disables length normalization and index-time\n       boosting
    for the field, and saves some memory).  Only full-text\n       fields or fields
    that need an index-time boost need norms.\n       Norms are omitted for primitive
    (non-analyzed) types by default.\n     termVectors: [false] set to true to store
    the term vector for a\n       given field.\n       When using MoreLikeThis, fields
    used for similarity should be\n       stored for best performance.\n     termPositions:
    Store position information with the term vector.  \n       This will increase
    storage costs.\n     termOffsets: Store offset information with the term vector.
    This \n       will increase storage costs.\n     required: The field is required.
    \ It will throw an error if the\n       value does not exist\n     default: a
    value that should be used if no value is specified\n       when adding a document.\n
    \   -->\n\n    <!-- field names should consist of alphanumeric or underscore characters
    only and\n      not start with a digit.  This is not currently strictly enforced,\n
    \     but other field names will not have first class support from all components\n
    \     and back compatibility is not guaranteed.  Names with both leading and\n
    \     trailing underscores (e.g. _version_) are reserved.\n    -->\n\n    <!--
    In this _default configset, only four fields are pre-declared:\n         id, _version_,
    and _text_ and _root_. All other fields will be type guessed and added via the\n
    \        \"add-unknown-fields-to-the-schema\" update request processor chain declared
    in solrconfig.xml.\n         \n         Note that many dynamic fields are also
    defined - you can use them to specify a \n         field's type via field naming
    conventions - see below.\n  \n         WARNING: The _text_ catch-all field will
    significantly increase your index size.\n         If you don't need it, consider
    removing it and the corresponding copyField directive.\n    -->\n\n    <field
    name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\"
    multiValued=\"false\" />\n    <!-- docValues are enabled by default for long type
    so we don't need to index the version field  -->\n    <field name=\"_version_\"
    type=\"plong\" indexed=\"false\" stored=\"false\"/>\n    <field name=\"_root_\"
    type=\"string\" indexed=\"true\" stored=\"false\" docValues=\"false\" />\n    <field
    name=\"_text_\" type=\"text_general\" indexed=\"true\" stored=\"false\" multiValued=\"true\"/>\n\n
    \   <!-- This can be enabled, in case the client does not know what fields may
    be searched. It isn't enabled by default\n         because it's very expensive
    to index everything twice. -->\n    <!-- <copyField source=\"*\" dest=\"_text_\"/>
    -->\n\n    <!-- Dynamic field definitions allow using convention over configuration\n
    \      for fields via the specification of patterns to match field names.\n       EXAMPLE:
    \ name=\"*_i\" will match any field ending in _i (like myid_i, z_i)\n       RESTRICTION:
    the glob-like pattern in the name attribute must have a \"*\" only at the start
    or the end.  -->\n   \n    <dynamicField name=\"*_i\"  type=\"pint\"    indexed=\"true\"
    \ stored=\"true\"/>\n    <dynamicField name=\"*_is\" type=\"pints\"    indexed=\"true\"
    \ stored=\"true\"/>\n    <dynamicField name=\"*_s\"  type=\"string\"  indexed=\"true\"
    \ stored=\"true\" />\n    <dynamicField name=\"*_ss\" type=\"strings\"  indexed=\"true\"
    \ stored=\"true\"/>\n    <dynamicField name=\"*_l\"  type=\"plong\"   indexed=\"true\"
    \ stored=\"true\"/>\n    <dynamicField name=\"*_ls\" type=\"plongs\"   indexed=\"true\"
    \ stored=\"true\"/>\n    <dynamicField name=\"*_t\" type=\"text_general\" indexed=\"true\"
    stored=\"true\" multiValued=\"false\"/>\n    <dynamicField name=\"*_txt\" type=\"text_general\"
    indexed=\"true\" stored=\"true\"/>\n    <dynamicField name=\"*_b\"  type=\"boolean\"
    indexed=\"true\" stored=\"true\"/>\n    <dynamicField name=\"*_bs\" type=\"booleans\"
    indexed=\"true\" stored=\"true\"/>\n    <dynamicField name=\"*_f\"  type=\"pfloat\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <dynamicField name=\"*_fs\" type=\"pfloats\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <dynamicField name=\"*_d\"  type=\"pdouble\"
    indexed=\"true\"  stored=\"true\"/>\n    <dynamicField name=\"*_ds\" type=\"pdoubles\"
    indexed=\"true\"  stored=\"true\"/>\n    <dynamicField name=\"random_*\" type=\"random\"/>\n\n
    \   <!-- Type used for data-driven schema, to add a string copy for each text
    field -->\n    <dynamicField name=\"*_str\" type=\"strings\" stored=\"false\"
    docValues=\"true\" indexed=\"false\" useDocValuesAsStored=\"false\"/>\n\n    <dynamicField
    name=\"*_dt\"  type=\"pdate\"    indexed=\"true\"  stored=\"true\"/>\n    <dynamicField
    name=\"*_dts\" type=\"pdate\"    indexed=\"true\"  stored=\"true\" multiValued=\"true\"/>\n
    \   <dynamicField name=\"*_p\"  type=\"location\" indexed=\"true\" stored=\"true\"/>\n
    \   <dynamicField name=\"*_srpt\"  type=\"location_rpt\" indexed=\"true\" stored=\"true\"/>\n
    \   \n    <!-- payloaded dynamic fields -->\n    <dynamicField name=\"*_dpf\"
    type=\"delimited_payloads_float\" indexed=\"true\"  stored=\"true\"/>\n    <dynamicField
    name=\"*_dpi\" type=\"delimited_payloads_int\" indexed=\"true\"  stored=\"true\"/>\n
    \   <dynamicField name=\"*_dps\" type=\"delimited_payloads_string\" indexed=\"true\"
    \ stored=\"true\"/>\n\n    <dynamicField name=\"attr_*\" type=\"text_general\"
    indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n\n    <!-- added for
    cube -->\n    <!-- not indexed field -->\n    <dynamicField name=\"*_ni\" type=\"text_general\"
    indexed=\"false\"  stored=\"true\"/>\n\n    <!-- Field to use to determine and
    enforce document uniqueness.\n      Unless this field is marked with required=\"false\",
    it will be a required field\n    -->\n    <uniqueKey>id</uniqueKey>\n\n    <!--
    copyField commands copy one field to another at the time a document\n       is
    added to the index.  It's used either to index the same field differently,\n       or
    to add multiple fields to the same field for easier/faster searching.\n\n    <copyField
    source=\"sourceFieldName\" dest=\"destinationFieldName\"/>\n    -->\n\n    <!--
    field type definitions. The \"name\" attribute is\n       just a label to be used
    by field definitions.  The \"class\"\n       attribute and any other attributes
    determine the real\n       behavior of the fieldType.\n         Class names starting
    with \"solr\" refer to java classes in a\n       standard package such as org.apache.solr.analysis\n
    \   -->\n\n    <!-- sortMissingLast and sortMissingFirst attributes are optional
    attributes are\n         currently supported on types that are sorted internally
    as strings\n         and on numeric types.\n       This includes \"string\", \"boolean\",
    \"pint\", \"pfloat\", \"plong\", \"pdate\", \"pdouble\".\n       - If sortMissingLast=\"true\",
    then a sort on this field will cause documents\n         without the field to
    come after documents with the field,\n         regardless of the requested sort
    order (asc or desc).\n       - If sortMissingFirst=\"true\", then a sort on this
    field will cause documents\n         without the field to come before documents
    with the field,\n         regardless of the requested sort order.\n       - If
    sortMissingLast=\"false\" and sortMissingFirst=\"false\" (the default),\n         then
    default lucene sorting will be used which places docs without the\n         field
    first in an ascending sort and last in a descending sort.\n    -->\n\n    <!--
    The StrField type is not analyzed, but indexed/stored verbatim. -->\n    <fieldType
    name=\"string\" class=\"solr.StrField\" sortMissingLast=\"true\" docValues=\"true\"
    />\n    <fieldType name=\"strings\" class=\"solr.StrField\" sortMissingLast=\"true\"
    multiValued=\"true\" docValues=\"true\" />\n\n    <!-- boolean type: \"true\"
    or \"false\" -->\n    <fieldType name=\"boolean\" class=\"solr.BoolField\" sortMissingLast=\"true\"/>\n
    \   <fieldType name=\"booleans\" class=\"solr.BoolField\" sortMissingLast=\"true\"
    multiValued=\"true\"/>\n\n    <!--\n      Numeric field types that index values
    using KD-trees.\n      Point fields don't support FieldCache, so they must have
    docValues=\"true\" if needed for sorting, faceting, functions, etc.\n    -->\n
    \   <fieldType name=\"pint\" class=\"solr.IntPointField\" docValues=\"true\"/>\n
    \   <fieldType name=\"pfloat\" class=\"solr.FloatPointField\" docValues=\"true\"/>\n
    \   <fieldType name=\"plong\" class=\"solr.LongPointField\" docValues=\"true\"/>\n
    \   <fieldType name=\"pdouble\" class=\"solr.DoublePointField\" docValues=\"true\"/>\n
    \   \n    <fieldType name=\"pints\" class=\"solr.IntPointField\" docValues=\"true\"
    multiValued=\"true\"/>\n    <fieldType name=\"pfloats\" class=\"solr.FloatPointField\"
    docValues=\"true\" multiValued=\"true\"/>\n    <fieldType name=\"plongs\" class=\"solr.LongPointField\"
    docValues=\"true\" multiValued=\"true\"/>\n    <fieldType name=\"pdoubles\" class=\"solr.DoublePointField\"
    docValues=\"true\" multiValued=\"true\"/>\n    <fieldType name=\"random\" class=\"solr.RandomSortField\"
    indexed=\"true\"/>\n\n\n    <!-- The format for this date field is of the form
    1995-12-31T23:59:59Z, and\n         is a more restricted form of the canonical
    representation of dateTime\n         http://www.w3.org/TR/xmlschema-2/#dateTime
    \   \n         The trailing \"Z\" designates UTC time and is mandatory.\n         Optional
    fractional seconds are allowed: 1995-12-31T23:59:59.999Z\n         All other components
    are mandatory.\n\n         Expressions can also be used to denote calculations
    that should be\n         performed relative to \"NOW\" to determine the value,
    ie...\n\n               NOW/HOUR\n                  ... Round to the start of
    the current hour\n               NOW-1DAY\n                  ... Exactly 1 day
    prior to now\n               NOW/DAY+6MONTHS+3DAYS\n                  ... 6 months
    and 3 days in the future from the start of\n                      the current
    day\n                      \n      -->\n    <!-- KD-tree versions of date fields
    -->\n    <fieldType name=\"pdate\" class=\"solr.DatePointField\" docValues=\"true\"/>\n
    \   <fieldType name=\"pdates\" class=\"solr.DatePointField\" docValues=\"true\"
    multiValued=\"true\"/>\n    \n    <!--Binary data type. The data should be sent/retrieved
    in as Base64 encoded Strings -->\n    <fieldType name=\"binary\" class=\"solr.BinaryField\"/>\n\n
    \   <!-- solr.TextField allows the specification of custom text analyzers\n         specified
    as a tokenizer and a list of token filters. Different\n         analyzers may
    be specified for indexing and querying.\n\n         The optional positionIncrementGap
    puts space between multiple fields of\n         this type on the same document,
    with the purpose of preventing false phrase\n         matching across fields.\n\n
    \        For more info on customizing your analyzer chain, please see\n         http://lucene.apache.org/solr/guide/understanding-analyzers-tokenizers-and-filters.html#understanding-analyzers-tokenizers-and-filters\n
    \    -->\n\n    <!-- One can also specify an existing Analyzer class that has
    a\n         default constructor via the class attribute on the analyzer element.\n
    \        Example:\n    <fieldType name=\"text_greek\" class=\"solr.TextField\">\n
    \     <analyzer class=\"org.apache.lucene.analysis.el.GreekAnalyzer\"/>\n    </fieldType>\n
    \   -->\n\n    <!-- A text field that only splits on whitespace for exact matching
    of words -->\n    <dynamicField name=\"*_ws\" type=\"text_ws\"  indexed=\"true\"
    \ stored=\"true\"/>\n    <fieldType name=\"text_ws\" class=\"solr.TextField\"
    positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n
    \     </analyzer>\n    </fieldType>\n\n    <!-- A general text field that has
    reasonable, generic\n         cross-language defaults: it tokenizes with StandardTokenizer,\n\t
    \      removes stop words from case-insensitive \"stopwords.txt\"\n\t       (empty
    by default), and down cases.  At query time only, it\n\t       also applies synonyms.\n\t
    \ -->\n    <fieldType name=\"text_general\" class=\"solr.TextField\" positionIncrementGap=\"100\"
    multiValued=\"true\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\"
    />\n        <!-- in this example, we will only use synonyms at query time\n        <filter
    class=\"solr.SynonymGraphFilterFactory\" synonyms=\"index_synonyms.txt\" ignoreCase=\"true\"
    expand=\"false\"/>\n        <filter class=\"solr.FlattenGraphFilterFactory\"/>\n
    \       -->\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n
    \     <analyzer type=\"query\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\"
    />\n        <filter class=\"solr.SynonymGraphFilterFactory\" synonyms=\"synonyms.txt\"
    ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \     </analyzer>\n    </fieldType>\n\n    \n    <!-- SortableTextField generaly
    functions exactly like TextField,\n         except that it supports, and by default
    uses, docValues for sorting (or faceting)\n         on the first 1024 characters
    of the original field values (which is configurable).\n         \n         This
    makes it a bit more useful then TextField in many situations, but the trade-off\n
    \        is that it takes up more space on disk; which is why it's not used in
    place of TextField\n         for every fieldType in this _default schema.\n\t
    \ -->\n    <dynamicField name=\"*_t_sort\" type=\"text_gen_sort\" indexed=\"true\"
    stored=\"true\" multiValued=\"false\"/>\n    <dynamicField name=\"*_txt_sort\"
    type=\"text_gen_sort\" indexed=\"true\" stored=\"true\"/>\n    <fieldType name=\"text_gen_sort\"
    class=\"solr.SortableTextField\" positionIncrementGap=\"100\" multiValued=\"true\">\n
    \     <analyzer type=\"index\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\"
    />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n
    \     <analyzer type=\"query\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\"
    />\n        <filter class=\"solr.SynonymGraphFilterFactory\" synonyms=\"synonyms.txt\"
    ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \     </analyzer>\n    </fieldType>\n\n    <!-- A text field with defaults appropriate
    for English: it tokenizes with StandardTokenizer,\n         removes English stop
    words (lang/stopwords_en.txt), down cases, protects words from protwords.txt,
    and\n         finally applies Porter's stemming.  The query time analyzer also
    applies synonyms from synonyms.txt. -->\n    <dynamicField name=\"*_txt_en\" type=\"text_en\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_en\" class=\"solr.TextField\"
    positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <!-- in this example, we will
    only use synonyms at query time\n        <filter class=\"solr.SynonymGraphFilterFactory\"
    synonyms=\"index_synonyms.txt\" ignoreCase=\"true\" expand=\"false\"/>\n        <filter
    class=\"solr.FlattenGraphFilterFactory\"/>\n        -->\n        <!-- Case insensitive
    stop word removal.\n        -->\n        <filter class=\"solr.StopFilterFactory\"\n
    \               ignoreCase=\"true\"\n                words=\"lang/stopwords_en.txt\"\n
    \           />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter
    class=\"solr.EnglishPossessiveFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\"
    protected=\"protwords.txt\"/>\n        <!-- Optionally you may want to use this
    less aggressive stemmer instead of PorterStemFilterFactory:\n        <filter class=\"solr.EnglishMinimalStemFilterFactory\"/>\n\t
    \     -->\n        <filter class=\"solr.PorterStemFilterFactory\"/>\n      </analyzer>\n
    \     <analyzer type=\"query\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.SynonymGraphFilterFactory\" synonyms=\"synonyms.txt\"
    ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.StopFilterFactory\"\n
    \               ignoreCase=\"true\"\n                words=\"lang/stopwords_en.txt\"\n
    \       />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter
    class=\"solr.EnglishPossessiveFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\"
    protected=\"protwords.txt\"/>\n        <!-- Optionally you may want to use this
    less aggressive stemmer instead of PorterStemFilterFactory:\n        <filter class=\"solr.EnglishMinimalStemFilterFactory\"/>\n\t
    \     -->\n        <filter class=\"solr.PorterStemFilterFactory\"/>\n      </analyzer>\n
    \   </fieldType>\n\n    <!-- A text field with defaults appropriate for English,
    plus\n         aggressive word-splitting and autophrase features enabled.\n         This
    field is just like text_en, except it adds\n         WordDelimiterGraphFilter
    to enable splitting and matching of\n         words on case-change, alpha numeric
    boundaries, and\n         non-alphanumeric chars.  This means certain compound
    word\n         cases will work, for example query \"wi fi\" will match\n         document
    \"WiFi\" or \"wi-fi\".\n    -->\n    <dynamicField name=\"*_txt_en_split\" type=\"text_en_splitting\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_en_splitting\"
    class=\"solr.TextField\" positionIncrementGap=\"100\" autoGeneratePhraseQueries=\"true\">\n
    \     <analyzer type=\"index\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n
    \       <!-- in this example, we will only use synonyms at query time\n        <filter
    class=\"solr.SynonymGraphFilterFactory\" synonyms=\"index_synonyms.txt\" ignoreCase=\"true\"
    expand=\"false\"/>\n        -->\n        <!-- Case insensitive stop word removal.\n
    \       -->\n        <filter class=\"solr.StopFilterFactory\"\n                ignoreCase=\"true\"\n
    \               words=\"lang/stopwords_en.txt\"\n        />\n        <filter class=\"solr.WordDelimiterGraphFilterFactory\"
    generateWordParts=\"1\" generateNumberParts=\"1\" catenateWords=\"1\" catenateNumbers=\"1\"
    catenateAll=\"0\" splitOnCaseChange=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n
    \       <filter class=\"solr.PorterStemFilterFactory\"/>\n        <filter class=\"solr.FlattenGraphFilterFactory\"
    />\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n
    \       <filter class=\"solr.SynonymGraphFilterFactory\" synonyms=\"synonyms.txt\"
    ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.StopFilterFactory\"\n
    \               ignoreCase=\"true\"\n                words=\"lang/stopwords_en.txt\"\n
    \       />\n        <filter class=\"solr.WordDelimiterGraphFilterFactory\" generateWordParts=\"1\"
    generateNumberParts=\"1\" catenateWords=\"0\" catenateNumbers=\"0\" catenateAll=\"0\"
    splitOnCaseChange=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n
    \       <filter class=\"solr.PorterStemFilterFactory\"/>\n      </analyzer>\n
    \   </fieldType>\n\n    <!-- Less flexible matching, but less false matches.  Probably
    not ideal for product names,\n         but may be good for SKUs.  Can insert dashes
    in the wrong place and still match. -->\n    <dynamicField name=\"*_txt_en_split_tight\"
    type=\"text_en_splitting_tight\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_en_splitting_tight\" class=\"solr.TextField\" positionIncrementGap=\"100\"
    autoGeneratePhraseQueries=\"true\">\n      <analyzer type=\"index\">\n        <tokenizer
    class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.SynonymGraphFilterFactory\"
    synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"false\"/>\n        <filter
    class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_en.txt\"/>\n
    \       <filter class=\"solr.WordDelimiterGraphFilterFactory\" generateWordParts=\"0\"
    generateNumberParts=\"0\" catenateWords=\"1\" catenateNumbers=\"1\" catenateAll=\"0\"/>\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\"
    protected=\"protwords.txt\"/>\n        <filter class=\"solr.EnglishMinimalStemFilterFactory\"/>\n
    \       <!-- this filter can remove any duplicate tokens that appear at the same
    position - sometimes\n             possible with WordDelimiterGraphFilter in conjuncton
    with stemming. -->\n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n
    \       <filter class=\"solr.FlattenGraphFilterFactory\" />\n      </analyzer>\n
    \     <analyzer type=\"query\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n
    \       <filter class=\"solr.SynonymGraphFilterFactory\" synonyms=\"synonyms.txt\"
    ignoreCase=\"true\" expand=\"false\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_en.txt\"/>\n        <filter class=\"solr.WordDelimiterGraphFilterFactory\"
    generateWordParts=\"0\" generateNumberParts=\"0\" catenateWords=\"1\" catenateNumbers=\"1\"
    catenateAll=\"0\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n
    \       <filter class=\"solr.EnglishMinimalStemFilterFactory\"/>\n        <!--
    this filter can remove any duplicate tokens that appear at the same position -
    sometimes\n             possible with WordDelimiterGraphFilter in conjuncton with
    stemming. -->\n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n
    \     </analyzer>\n    </fieldType>\n\n    <!-- Just like text_general except
    it reverses the characters of\n\t       each token, to enable more efficient leading
    wildcard queries.\n    -->\n    <dynamicField name=\"*_txt_rev\" type=\"text_general_rev\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_general_rev\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n
    \       <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" />\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.ReversedWildcardFilterFactory\"
    withOriginal=\"true\"\n                maxPosAsterisk=\"3\" maxPosQuestion=\"2\"
    maxFractionAsterisk=\"0.33\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n
    \       <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.SynonymGraphFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\"
    expand=\"true\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\"
    words=\"stopwords.txt\" />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \     </analyzer>\n    </fieldType>\n\n    <dynamicField name=\"*_phon_en\" type=\"phonetic_en\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"phonetic_en\" stored=\"false\"
    indexed=\"true\" class=\"solr.TextField\" >\n      <analyzer>\n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.DoubleMetaphoneFilterFactory\"
    inject=\"false\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- lowercases
    the entire field value, keeping it as a single token.  -->\n    <dynamicField
    name=\"*_s_lower\" type=\"lowercase\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"lowercase\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n
    \       <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"
    />\n      </analyzer>\n    </fieldType>\n\n    <!-- \n      Example of using PathHierarchyTokenizerFactory
    at index time, so\n      queries for paths match documents at that path, or in
    descendent paths\n    -->\n    <dynamicField name=\"*_descendent_path\" type=\"descendent_path\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"descendent_path\"
    class=\"solr.TextField\">\n      <analyzer type=\"index\">\n        <tokenizer
    class=\"solr.PathHierarchyTokenizerFactory\" delimiter=\"/\" />\n      </analyzer>\n
    \     <analyzer type=\"query\">\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"
    />\n      </analyzer>\n    </fieldType>\n\n    <!--\n      Example of using PathHierarchyTokenizerFactory
    at query time, so\n      queries for paths match documents at that path, or in
    ancestor paths\n    -->\n    <dynamicField name=\"*_ancestor_path\" type=\"ancestor_path\"
    \ indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"ancestor_path\" class=\"solr.TextField\">\n
    \     <analyzer type=\"index\">\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"
    />\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.PathHierarchyTokenizerFactory\"
    delimiter=\"/\" />\n      </analyzer>\n    </fieldType>\n\n    <!-- This point
    type indexes the coordinates as separate fields (subFields)\n      If subFieldType
    is defined, it references a type, and a dynamic field\n      definition is created
    matching *___<typename>.  Alternately, if \n      subFieldSuffix is defined, that
    is used to create the subFields.\n      Example: if subFieldType=\"double\", then
    the coordinates would be\n        indexed in fields myloc_0___double,myloc_1___double.\n
    \     Example: if subFieldSuffix=\"_d\" then the coordinates would be indexed\n
    \       in fields myloc_0_d,myloc_1_d\n      The subFields are an implementation
    detail of the fieldType, and end\n      users normally should not need to know
    about them.\n     -->\n    <dynamicField name=\"*_point\" type=\"point\"  indexed=\"true\"
    \ stored=\"true\"/>\n    <fieldType name=\"point\" class=\"solr.PointType\" dimension=\"2\"
    subFieldSuffix=\"_d\"/>\n\n    <!-- A specialized field for geospatial search
    filters and distance sorting. -->\n    <fieldType name=\"location\" class=\"solr.LatLonPointSpatialField\"
    docValues=\"true\"/>\n\n    <!-- A geospatial field type that supports multiValued
    and polygon shapes.\n      For more information about this and other spatial fields
    see:\n      http://lucene.apache.org/solr/guide/spatial-search.html\n    -->\n
    \   <fieldType name=\"location_rpt\" class=\"solr.SpatialRecursivePrefixTreeFieldType\"\n
    \              geo=\"true\" distErrPct=\"0.025\" maxDistErr=\"0.001\" distanceUnits=\"kilometers\"
    />\n\n    <!-- Payloaded field types -->\n    <fieldType name=\"delimited_payloads_float\"
    stored=\"false\" indexed=\"true\" class=\"solr.TextField\">\n      <analyzer>\n
    \       <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter
    class=\"solr.DelimitedPayloadTokenFilterFactory\" encoder=\"float\"/>\n      </analyzer>\n
    \   </fieldType>\n    <fieldType name=\"delimited_payloads_int\" stored=\"false\"
    indexed=\"true\" class=\"solr.TextField\">\n      <analyzer>\n        <tokenizer
    class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.DelimitedPayloadTokenFilterFactory\"
    encoder=\"integer\"/>\n      </analyzer>\n    </fieldType>\n    <fieldType name=\"delimited_payloads_string\"
    stored=\"false\" indexed=\"true\" class=\"solr.TextField\">\n      <analyzer>\n
    \       <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter
    class=\"solr.DelimitedPayloadTokenFilterFactory\" encoder=\"identity\"/>\n      </analyzer>\n
    \   </fieldType>\n\n    <!-- some examples for different languages (generally
    ordered by ISO code) -->\n\n    <!-- Arabic -->\n    <dynamicField name=\"*_txt_ar\"
    type=\"text_ar\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_ar\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <!-- for any non-arabic -->\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_ar.txt\" />\n        <!-- normalizes
    ﻯ to ﻱ, etc -->\n        <filter class=\"solr.ArabicNormalizationFilterFactory\"/>\n
    \       <filter class=\"solr.ArabicStemFilterFactory\"/>\n      </analyzer>\n
    \   </fieldType>\n\n    <!-- Bulgarian -->\n    <dynamicField name=\"*_txt_bg\"
    type=\"text_bg\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_bg\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/> \n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_bg.txt\"
    /> \n        <filter class=\"solr.BulgarianStemFilterFactory\"/>       \n      </analyzer>\n
    \   </fieldType>\n    \n    <!-- Catalan -->\n    <dynamicField name=\"*_txt_ca\"
    type=\"text_ca\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_ca\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <!-- removes l', etc -->\n
    \       <filter class=\"solr.ElisionFilterFactory\" ignoreCase=\"true\" articles=\"lang/contractions_ca.txt\"/>\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_ca.txt\" />\n        <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Catalan\"/>       \n      </analyzer>\n    </fieldType>\n    \n    <!--
    CJK bigram (see text_ja for a Japanese configuration using morphological analysis)
    -->\n    <dynamicField name=\"*_txt_cjk\" type=\"text_cjk\"  indexed=\"true\"
    \ stored=\"true\"/>\n    <fieldType name=\"text_cjk\" class=\"solr.TextField\"
    positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <!-- normalize width before bigram, as e.g. half-width dakuten combine
    \ -->\n        <filter class=\"solr.CJKWidthFilterFactory\"/>\n        <!-- for
    any non-CJK -->\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter
    class=\"solr.CJKBigramFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n
    \   <!-- Czech -->\n    <dynamicField name=\"*_txt_cz\" type=\"text_cz\"  indexed=\"true\"
    \ stored=\"true\"/>\n    <fieldType name=\"text_cz\" class=\"solr.TextField\"
    positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_cz.txt\" />\n        <filter class=\"solr.CzechStemFilterFactory\"/>
    \      \n      </analyzer>\n    </fieldType>\n    \n    <!-- Danish -->\n    <dynamicField
    name=\"*_txt_da\" type=\"text_da\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_da\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_da.txt\" format=\"snowball\" />\n        <filter
    class=\"solr.SnowballPorterFilterFactory\" language=\"Danish\"/>       \n      </analyzer>\n
    \   </fieldType>\n    \n    <!-- German -->\n    <dynamicField name=\"*_txt_de\"
    type=\"text_de\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_de\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_de.txt\"
    format=\"snowball\" />\n        <filter class=\"solr.GermanNormalizationFilterFactory\"/>\n
    \       <filter class=\"solr.GermanLightStemFilterFactory\"/>\n        <!-- less
    aggressive: <filter class=\"solr.GermanMinimalStemFilterFactory\"/> -->\n        <!--
    more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\" language=\"German2\"/>
    -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Greek -->\n    <dynamicField
    name=\"*_txt_el\" type=\"text_el\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_el\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- greek
    specific lowercase for sigma -->\n        <filter class=\"solr.GreekLowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"false\" words=\"lang/stopwords_el.txt\"
    />\n        <filter class=\"solr.GreekStemFilterFactory\"/>\n      </analyzer>\n
    \   </fieldType>\n    \n    <!-- Spanish -->\n    <dynamicField name=\"*_txt_es\"
    type=\"text_es\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_es\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_es.txt\"
    format=\"snowball\" />\n        <filter class=\"solr.SpanishLightStemFilterFactory\"/>\n
    \       <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Spanish\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!--
    Basque -->\n    <dynamicField name=\"*_txt_eu\" type=\"text_eu\"  indexed=\"true\"
    \ stored=\"true\"/>\n    <fieldType name=\"text_eu\" class=\"solr.TextField\"
    positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_eu.txt\" />\n        <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Basque\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Persian
    -->\n    <dynamicField name=\"*_txt_fa\" type=\"text_fa\"  indexed=\"true\"  stored=\"true\"/>\n
    \   <fieldType name=\"text_fa\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n
    \     <analyzer>\n        <!-- for ZWNJ -->\n        <charFilter class=\"solr.PersianCharFilterFactory\"/>\n
    \       <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.ArabicNormalizationFilterFactory\"/>\n
    \       <filter class=\"solr.PersianNormalizationFilterFactory\"/>\n        <filter
    class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_fa.txt\"
    />\n      </analyzer>\n    </fieldType>\n    \n    <!-- Finnish -->\n    <dynamicField
    name=\"*_txt_fi\" type=\"text_fi\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_fi\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_fi.txt\" format=\"snowball\" />\n        <filter
    class=\"solr.SnowballPorterFilterFactory\" language=\"Finnish\"/>\n        <!--
    less aggressive: <filter class=\"solr.FinnishLightStemFilterFactory\"/> -->\n
    \     </analyzer>\n    </fieldType>\n    \n    <!-- French -->\n    <dynamicField
    name=\"*_txt_fr\" type=\"text_fr\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_fr\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- removes
    l', etc -->\n        <filter class=\"solr.ElisionFilterFactory\" ignoreCase=\"true\"
    articles=\"lang/contractions_fr.txt\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_fr.txt\"
    format=\"snowball\" />\n        <filter class=\"solr.FrenchLightStemFilterFactory\"/>\n
    \       <!-- less aggressive: <filter class=\"solr.FrenchMinimalStemFilterFactory\"/>
    -->\n        <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"French\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!--
    Irish -->\n    <dynamicField name=\"*_txt_ga\" type=\"text_ga\"  indexed=\"true\"
    \ stored=\"true\"/>\n    <fieldType name=\"text_ga\" class=\"solr.TextField\"
    positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <!-- removes d', etc -->\n        <filter class=\"solr.ElisionFilterFactory\"
    ignoreCase=\"true\" articles=\"lang/contractions_ga.txt\"/>\n        <!-- removes
    n-, etc. position increments is intentionally false! -->\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/hyphenations_ga.txt\"/>\n        <filter class=\"solr.IrishLowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ga.txt\"/>\n
    \       <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Irish\"/>\n
    \     </analyzer>\n    </fieldType>\n    \n    <!-- Galician -->\n    <dynamicField
    name=\"*_txt_gl\" type=\"text_gl\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_gl\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_gl.txt\" />\n        <filter class=\"solr.GalicianStemFilterFactory\"/>\n
    \       <!-- less aggressive: <filter class=\"solr.GalicianMinimalStemFilterFactory\"/>
    -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Hindi -->\n    <dynamicField
    name=\"*_txt_hi\" type=\"text_hi\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_hi\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <!-- normalizes unicode representation
    -->\n        <filter class=\"solr.IndicNormalizationFilterFactory\"/>\n        <!--
    normalizes variation in spelling -->\n        <filter class=\"solr.HindiNormalizationFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_hi.txt\"
    />\n        <filter class=\"solr.HindiStemFilterFactory\"/>\n      </analyzer>\n
    \   </fieldType>\n    \n    <!-- Hungarian -->\n    <dynamicField name=\"*_txt_hu\"
    type=\"text_hu\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_hu\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_hu.txt\"
    format=\"snowball\" />\n        <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Hungarian\"/>\n        <!-- less aggressive: <filter class=\"solr.HungarianLightStemFilterFactory\"/>
    -->   \n      </analyzer>\n    </fieldType>\n    \n    <!-- Armenian -->\n    <dynamicField
    name=\"*_txt_hy\" type=\"text_hy\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_hy\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_hy.txt\" />\n        <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Armenian\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Indonesian
    -->\n    <dynamicField name=\"*_txt_id\" type=\"text_id\"  indexed=\"true\"  stored=\"true\"/>\n
    \   <fieldType name=\"text_id\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n
    \     <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_id.txt\" />\n        <!-- for a less
    aggressive approach (only inflectional suffixes), set stemDerivational to false
    -->\n        <filter class=\"solr.IndonesianStemFilterFactory\" stemDerivational=\"true\"/>\n
    \     </analyzer>\n    </fieldType>\n    \n    <!-- Italian -->\n  <dynamicField
    name=\"*_txt_it\" type=\"text_it\"  indexed=\"true\"  stored=\"true\"/>\n  <fieldType
    name=\"text_it\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <!-- removes
    l', etc -->\n        <filter class=\"solr.ElisionFilterFactory\" ignoreCase=\"true\"
    articles=\"lang/contractions_it.txt\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_it.txt\"
    format=\"snowball\" />\n        <filter class=\"solr.ItalianLightStemFilterFactory\"/>\n
    \       <!-- more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Italian\"/> -->\n      </analyzer>\n    </fieldType>\n    \n    <!--
    Japanese using morphological analysis (see text_cjk for a configuration using
    bigramming)\n\n         NOTE: If you want to optimize search for precision, use
    default operator AND in your request\n         handler config (q.op) Use OR if
    you would like to optimize for recall (default).\n    -->\n    <dynamicField name=\"*_txt_ja\"
    type=\"text_ja\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_ja\"
    class=\"solr.TextField\" positionIncrementGap=\"100\" autoGeneratePhraseQueries=\"false\">\n
    \     <analyzer>\n        <!-- Kuromoji Japanese morphological analyzer/tokenizer
    (JapaneseTokenizer)\n\n           Kuromoji has a search mode (default) that does
    segmentation useful for search.  A heuristic\n           is used to segment compounds
    into its parts and the compound itself is kept as synonym.\n\n           Valid
    values for attribute mode are:\n              normal: regular segmentation\n              search:
    segmentation useful for search with synonyms compounds (default)\n            extended:
    same as search mode, but unigrams unknown words (experimental)\n\n           For
    some applications it might be good to use search mode for indexing and normal
    mode for\n           queries to reduce recall and prevent parts of compounds from
    being matched and highlighted.\n           Use <analyzer type=\"index\"> and <analyzer
    type=\"query\"> for this and mode normal in query.\n\n           Kuromoji also
    has a convenient user dictionary feature that allows overriding the statistical\n
    \          model with your own entries for segmentation, part-of-speech tags and
    readings without a need\n           to specify weights.  Notice that user dictionaries
    have not been subject to extensive testing.\n\n           User dictionary attributes
    are:\n                     userDictionary: user dictionary filename\n             userDictionaryEncoding:
    user dictionary encoding (default is UTF-8)\n\n           See lang/userdict_ja.txt
    for a sample user dictionary file.\n\n           Punctuation characters are discarded
    by default.  Use discardPunctuation=\"false\" to keep them.\n        -->\n        <tokenizer
    class=\"solr.JapaneseTokenizerFactory\" mode=\"search\"/>\n        <!--<tokenizer
    class=\"solr.JapaneseTokenizerFactory\" mode=\"search\" userDictionary=\"lang/userdict_ja.txt\"/>-->\n
    \       <!-- Reduces inflected verbs and adjectives to their base/dictionary forms
    (辞書形) -->\n        <filter class=\"solr.JapaneseBaseFormFilterFactory\"/>\n        <!--
    Removes tokens with certain part-of-speech tags -->\n        <filter class=\"solr.JapanesePartOfSpeechStopFilterFactory\"
    tags=\"lang/stoptags_ja.txt\" />\n        <!-- Normalizes full-width romaji to
    half-width and half-width kana to full-width (Unicode NFKC subset) -->\n        <filter
    class=\"solr.CJKWidthFilterFactory\"/>\n        <!-- Removes common tokens typically
    not useful for search, but have a negative effect on ranking -->\n        <filter
    class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_ja.txt\"
    />\n        <!-- Normalizes common katakana spelling variations by removing any
    last long sound character (U+30FC) -->\n        <filter class=\"solr.JapaneseKatakanaStemFilterFactory\"
    minimumLength=\"4\"/>\n        <!-- Lower-cases romaji characters -->\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n
    \   \n    <!-- Korean morphological analysis -->\n    <dynamicField name=\"*_txt_ko\"
    type=\"text_ko\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_ko\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <!--
    Nori Korean morphological analyzer/tokenizer (KoreanTokenizer)\n          The
    Korean (nori) analyzer integrates Lucene nori analysis module into Solr.\n          It
    uses the mecab-ko-dic dictionary to perform morphological analysis of Korean texts.\n\n
    \         This dictionary was built with MeCab, it defines a format for the features
    adapted\n          for the Korean language.\n          \n          Nori also has
    a convenient user dictionary feature that allows overriding the statistical\n
    \         model with your own entries for segmentation, part-of-speech tags and
    readings without a need\n          to specify weights. Notice that user dictionaries
    have not been subject to extensive testing.\n\n          The tokenizer supports
    multiple schema attributes:\n            * userDictionary: User dictionary path.\n
    \           * userDictionaryEncoding: User dictionary encoding.\n            *
    decompoundMode: Decompound mode. Either 'none', 'discard', 'mixed'. Default is
    'discard'.\n            * outputUnknownUnigrams: If true outputs unigrams for
    unknown words.\n        -->\n        <tokenizer class=\"solr.KoreanTokenizerFactory\"
    decompoundMode=\"discard\" outputUnknownUnigrams=\"false\"/>\n        <!-- Removes
    some part of speech stuff like EOMI (Pos.E), you can add a parameter 'tags',\n
    \         listing the tags to remove. By default it removes: \n          E, IC,
    J, MAG, MAJ, MM, SP, SSC, SSO, SC, SE, XPN, XSA, XSN, XSV, UNA, NA, VSV\n          This
    is basically an equivalent to stemming.\n        -->\n        <filter class=\"solr.KoreanPartOfSpeechStopFilterFactory\"
    />\n        <!-- Replaces term text with the Hangul transcription of Hanja characters,
    if applicable: -->\n        <filter class=\"solr.KoreanReadingFormFilterFactory\"
    />\n        <filter class=\"solr.LowerCaseFilterFactory\" />\n      </analyzer>\n
    \   </fieldType>\n\n    <!-- Latvian -->\n    <dynamicField name=\"*_txt_lv\"
    type=\"text_lv\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_lv\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_lv.txt\"
    />\n        <filter class=\"solr.LatvianStemFilterFactory\"/>\n      </analyzer>\n
    \   </fieldType>\n    \n    <!-- Dutch -->\n    <dynamicField name=\"*_txt_nl\"
    type=\"text_nl\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType name=\"text_nl\"
    class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer> \n        <tokenizer
    class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_nl.txt\"
    format=\"snowball\" />\n        <filter class=\"solr.StemmerOverrideFilterFactory\"
    dictionary=\"lang/stemdict_nl.txt\" ignoreCase=\"false\"/>\n        <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Dutch\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Norwegian
    -->\n    <dynamicField name=\"*_txt_no\" type=\"text_no\"  indexed=\"true\"  stored=\"true\"/>\n
    \   <fieldType name=\"text_no\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n
    \     <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_no.txt\" format=\"snowball\" />\n        <filter
    class=\"solr.SnowballPorterFilterFactory\" language=\"Norwegian\"/>\n        <!--
    less aggressive: <filter class=\"solr.NorwegianLightStemFilterFactory\"/> -->\n
    \       <!-- singular/plural: <filter class=\"solr.NorwegianMinimalStemFilterFactory\"/>
    -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Portuguese -->\n  <dynamicField
    name=\"*_txt_pt\" type=\"text_pt\"  indexed=\"true\"  stored=\"true\"/>\n  <fieldType
    name=\"text_pt\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_pt.txt\" format=\"snowball\" />\n        <filter
    class=\"solr.PortugueseLightStemFilterFactory\"/>\n        <!-- less aggressive:
    <filter class=\"solr.PortugueseMinimalStemFilterFactory\"/> -->\n        <!--
    more aggressive: <filter class=\"solr.SnowballPorterFilterFactory\" language=\"Portuguese\"/>
    -->\n        <!-- most aggressive: <filter class=\"solr.PortugueseStemFilterFactory\"/>
    -->\n      </analyzer>\n    </fieldType>\n    \n    <!-- Romanian -->\n    <dynamicField
    name=\"*_txt_ro\" type=\"text_ro\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_ro\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_ro.txt\" />\n        <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Romanian\"/>\n      </analyzer>\n    </fieldType>\n    \n    <!-- Russian
    -->\n    <dynamicField name=\"*_txt_ru\" type=\"text_ru\"  indexed=\"true\"  stored=\"true\"/>\n
    \   <fieldType name=\"text_ru\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n
    \     <analyzer> \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n
    \       <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_ru.txt\" format=\"snowball\" />\n        <filter
    class=\"solr.SnowballPorterFilterFactory\" language=\"Russian\"/>\n        <!--
    less aggressive: <filter class=\"solr.RussianLightStemFilterFactory\"/> -->\n
    \     </analyzer>\n    </fieldType>\n    \n    <!-- Swedish -->\n    <dynamicField
    name=\"*_txt_sv\" type=\"text_sv\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_sv\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"true\" words=\"lang/stopwords_sv.txt\" format=\"snowball\" />\n        <filter
    class=\"solr.SnowballPorterFilterFactory\" language=\"Swedish\"/>\n        <!--
    less aggressive: <filter class=\"solr.SwedishLightStemFilterFactory\"/> -->\n
    \     </analyzer>\n    </fieldType>\n    \n    <!-- Thai -->\n    <dynamicField
    name=\"*_txt_th\" type=\"text_th\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_th\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n
    \       <tokenizer class=\"solr.ThaiTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n
    \       <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_th.txt\"
    />\n      </analyzer>\n    </fieldType>\n    \n    <!-- Turkish -->\n    <dynamicField
    name=\"*_txt_tr\" type=\"text_tr\"  indexed=\"true\"  stored=\"true\"/>\n    <fieldType
    name=\"text_tr\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>
    \n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter
    class=\"solr.TurkishLowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\"
    ignoreCase=\"false\" words=\"lang/stopwords_tr.txt\" />\n        <filter class=\"solr.SnowballPorterFilterFactory\"
    language=\"Turkish\"/>\n      </analyzer>\n    </fieldType>\n\n    <!-- Similarity
    is the scoring routine for each document vs. a query.\n       A custom Similarity
    or SimilarityFactory may be specified here, but \n       the default is fine for
    most applications.  \n       For more info: http://lucene.apache.org/solr/guide/other-schema-elements.html#OtherSchemaElements-Similarity\n
    \   -->\n    <!--\n     <similarity class=\"com.example.solr.CustomSimilarityFactory\">\n
    \      <str name=\"paramkey\">param value</str>\n     </similarity>\n    -->\n\n</schema>\n"
  params.json: |-
    {"params":{
      "query":{
        "defType":"edismax",
        "q.alt":"*:*",
        "rows":"10",
        "fl":"*,score",
        "":{"v":0}
      },
      "facets":{
        "facet":"on",
        "facet.mincount": "1",
        "":{"v":0}
      },
     "velocity":{
       "wt": "velocity",
       "v.template":"browse",
       "v.layout": "layout",
       "":{"v":0}
     }
    }}
  protwords.txt: |+
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    #-----------------------------------------------------------------------
    # Use a protected word file to protect against the stemmer reducing two
    # unrelated words to the same base word.

    # Some non-words that normally won't be encountered,
    # just to test that they won't be stemmed.
    dontstems
    zwhacky

  solrconfig.xml: "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!--\n Licensed to
    the Apache Software Foundation (ASF) under one or more\n contributor license agreements.
    \ See the NOTICE file distributed with\n this work for additional information
    regarding copyright ownership.\n The ASF licenses this file to You under the Apache
    License, Version 2.0\n (the \"License\"); you may not use this file except in
    compliance with\n the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n
    Unless required by applicable law or agreed to in writing, software\n distributed
    under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific
    language governing permissions and\n limitations under the License.\n-->\n\n<!--\n
    \    For more details about configurations options that may appear in\n     this
    file, see http://wiki.apache.org/solr/SolrConfigXml.\n-->\n<config>\n  <!-- In
    all configuration below, a prefix of \"solr.\" for class names\n       is an alias
    that causes solr to search appropriate packages,\n       including org.apache.solr.(search|update|request|core|analysis)\n\n
    \      You may also specify a fully qualified Java classname if you\n       have
    your own custom plugins.\n    -->\n\n  <!-- Controls what version of Lucene various
    components of Solr\n       adhere to.  Generally, you want to use the latest version
    to\n       get all bug fixes and improvements. It is highly recommended\n       that
    you fully re-index after changing this setting as it can\n       affect both how
    text is indexed and queried.\n  -->\n  <luceneMatchVersion>7.5.0</luceneMatchVersion>\n\n
    \ <!-- <lib/> directives can be used to instruct Solr to load any Jars\n       identified
    and use them to resolve any \"plugins\" specified in\n       your solrconfig.xml
    or schema.xml (ie: Analyzers, Request\n       Handlers, etc...).\n\n       All
    directories and paths are resolved relative to the\n       instanceDir.\n\n       Please
    note that <lib/> directives are processed in the order\n       that they appear
    in your solrconfig.xml file, and are \"stacked\"\n       on top of each other
    when building a ClassLoader - so if you have\n       plugin jars with dependencies
    on other jars, the \"lower level\"\n       dependency jars should be loaded first.\n\n
    \      If a \"./lib\" directory exists in your instanceDir, all files\n       found
    in it are included as if you had used the following\n       syntax...\n\n              <lib
    dir=\"./lib\" />\n    -->\n\n  <!-- A 'dir' option by itself adds any files found
    in the directory\n       to the classpath, this is useful for including all jars
    in a\n       directory.\n\n       When a 'regex' is specified in addition to a
    'dir', only the\n       files in that directory which completely match the regex\n
    \      (anchored on both ends) will be included.\n\n       If a 'dir' option (with
    or without a regex) is used and nothing\n       is found that matches, a warning
    will be logged.\n\n       The examples below can be used to load some solr-contribs
    along\n       with their external dependencies.\n    -->\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/extraction/lib\"
    regex=\".*\\.jar\" />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-cell-\\d.*\\.jar\"
    />\n\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/clustering/lib/\" regex=\".*\\.jar\"
    />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-clustering-\\d.*\\.jar\"
    />\n\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/langid/lib/\" regex=\".*\\.jar\"
    />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-langid-\\d.*\\.jar\"
    />\n\n  <lib dir=\"${solr.install.dir:../../../..}/contrib/velocity/lib\" regex=\".*\\.jar\"
    />\n  <lib dir=\"${solr.install.dir:../../../..}/dist/\" regex=\"solr-velocity-\\d.*\\.jar\"
    />\n  <!-- an exact 'path' can be used instead of a 'dir' to specify a\n       specific
    jar file.  This will cause a serious error to be logged\n       if it can't be
    loaded.\n    -->\n  <!--\n     <lib path=\"../a-jar-that-does-not-exist.jar\"
    />\n  -->\n\n  <!-- Data Directory\n\n       Used to specify an alternate directory
    to hold all index data\n       other than the default ./data under the Solr home.
    \ If\n       replication is in use, this should match the replication\n       configuration.\n
    \   -->\n  <dataDir>${solr.data.dir:}</dataDir>\n\n\n  <!-- The DirectoryFactory
    to use for indexes.\n\n       solr.StandardDirectoryFactory is filesystem\n       based
    and tries to pick the best implementation for the current\n       JVM and platform.
    \ solr.NRTCachingDirectoryFactory, the default,\n       wraps solr.StandardDirectoryFactory
    and caches small files in memory\n       for better NRT performance.\n\n       One
    can force a particular implementation via solr.MMapDirectoryFactory,\n       solr.NIOFSDirectoryFactory,
    or solr.SimpleFSDirectoryFactory.\n\n       solr.RAMDirectoryFactory is memory
    based and not persistent.\n    -->\n  <directoryFactory name=\"DirectoryFactory\"\n
    \                   class=\"${solr.directoryFactory:solr.NRTCachingDirectoryFactory}\"/>\n\n
    \ <!-- The CodecFactory for defining the format of the inverted index.\n       The
    default implementation is SchemaCodecFactory, which is the official Lucene\n       index
    format, but hooks into the schema to provide per-field customization of\n       the
    postings lists and per-document values in the fieldType element\n       (postingsFormat/docValuesFormat).
    Note that most of the alternative implementations\n       are experimental, so
    if you choose to customize the index format, it's a good\n       idea to convert
    back to the official format e.g. via IndexWriter.addIndexes(IndexReader)\n       before
    upgrading to a newer version to avoid unnecessary reindexing.\n       A \"compressionMode\"
    string element can be added to <codecFactory> to choose\n       between the existing
    compression modes in the default codec: \"BEST_SPEED\" (default)\n       or \"BEST_COMPRESSION\".\n
    \ -->\n  <codecFactory class=\"solr.SchemaCodecFactory\"/>\n\n  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n
    \      Index Config - These settings control low-level behavior of indexing\n
    \      Most example settings here show the default value, but are commented\n
    \      out, to more easily see where customizations have been made.\n\n       Note:
    This replaces <indexDefaults> and <mainIndex> from older versions\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    -->\n  <indexConfig>\n    <!-- maxFieldLength was removed in 4.0. To get similar
    behavior, include a\n         LimitTokenCountFilterFactory in your fieldType definition.
    E.g.\n     <filter class=\"solr.LimitTokenCountFilterFactory\" maxTokenCount=\"10000\"/>\n
    \   -->\n    <!-- Maximum time to wait for a write lock (ms) for an IndexWriter.
    Default: 1000 -->\n    <!-- <writeLockTimeout>1000</writeLockTimeout>  -->\n\n
    \   <!-- Expert: Enabling compound file will use less files for the index,\n         using
    fewer file descriptors on the expense of performance decrease.\n         Default
    in Lucene is \"true\". Default in Solr is \"false\" (since 3.6) -->\n    <!--
    <useCompoundFile>false</useCompoundFile> -->\n\n    <!-- ramBufferSizeMB sets
    the amount of RAM that may be used by Lucene\n         indexing for buffering
    added documents and deletions before they are\n         flushed to the Directory.\n
    \        maxBufferedDocs sets a limit on the number of documents buffered\n         before
    flushing.\n         If both ramBufferSizeMB and maxBufferedDocs is set, then\n
    \        Lucene will flush based on whichever limit is hit first.  -->\n    <!--
    <ramBufferSizeMB>100</ramBufferSizeMB> -->\n    <!-- <maxBufferedDocs>1000</maxBufferedDocs>
    -->\n\n    <!-- Expert: Merge Policy\n         The Merge Policy in Lucene controls
    how merging of segments is done.\n         The default since Solr/Lucene 3.3 is
    TieredMergePolicy.\n         The default since Lucene 2.3 was the LogByteSizeMergePolicy,\n
    \        Even older versions of Lucene used LogDocMergePolicy.\n      -->\n    <!--\n
    \       <mergePolicyFactory class=\"org.apache.solr.index.TieredMergePolicyFactory\">\n
    \         <int name=\"maxMergeAtOnce\">10</int>\n          <int name=\"segmentsPerTier\">10</int>\n
    \         <double name=\"noCFSRatio\">0.1</double>\n        </mergePolicyFactory>\n
    \     -->\n\n    <!-- Expert: Merge Scheduler\n         The Merge Scheduler in
    Lucene controls how merges are\n         performed.  The ConcurrentMergeScheduler
    (Lucene 2.3 default)\n         can perform merges in the background using separate
    threads.\n         The SerialMergeScheduler (Lucene 2.2 default) does not.\n     -->\n
    \   <!--\n       <mergeScheduler class=\"org.apache.lucene.index.ConcurrentMergeScheduler\"/>\n
    \      -->\n\n    <!-- LockFactory\n\n         This option specifies which Lucene
    LockFactory implementation\n         to use.\n\n         single = SingleInstanceLockFactory
    - suggested for a\n                  read-only index or when there is no possibility
    of\n                  another process trying to modify the index.\n         native
    = NativeFSLockFactory - uses OS native file locking.\n                  Do not
    use when multiple solr webapps in the same\n                  JVM are attempting
    to share a single index.\n         simple = SimpleFSLockFactory  - uses a plain
    file for locking\n\n         Defaults: 'native' is default for Solr3.6 and later,
    otherwise\n                   'simple' is the default\n\n         More details
    on the nuances of each LockFactory...\n         http://wiki.apache.org/lucene-java/AvailableLockFactories\n
    \   -->\n    <lockType>${solr.lock.type:native}</lockType>\n\n    <!-- Commit
    Deletion Policy\n         Custom deletion policies can be specified here. The
    class must\n         implement org.apache.lucene.index.IndexDeletionPolicy.\n\n
    \        The default Solr IndexDeletionPolicy implementation supports\n         deleting
    index commit points on number of commits, age of\n         commit point and optimized
    status.\n\n         The latest commit point should always be preserved regardless\n
    \        of the criteria.\n    -->\n    <!--\n    <deletionPolicy class=\"solr.SolrDeletionPolicy\">\n
    \   -->\n    <!-- The number of commit points to be kept -->\n    <!-- <str name=\"maxCommitsToKeep\">1</str>
    -->\n    <!-- The number of optimized commit points to be kept -->\n    <!-- <str
    name=\"maxOptimizedCommitsToKeep\">0</str> -->\n    <!--\n        Delete all commit
    points once they have reached the given age.\n        Supports DateMathParser
    syntax e.g.\n      -->\n    <!--\n       <str name=\"maxCommitAge\">30MINUTES</str>\n
    \      <str name=\"maxCommitAge\">1DAY</str>\n    -->\n    <!--\n    </deletionPolicy>\n
    \   -->\n\n    <!-- Lucene Infostream\n\n         To aid in advanced debugging,
    Lucene provides an \"InfoStream\"\n         of detailed information when indexing.\n\n
    \        Setting The value to true will instruct the underlying Lucene\n         IndexWriter
    to write its debugging info the specified file\n      -->\n    <!-- <infoStream
    file=\"INFOSTREAM.txt\">false</infoStream> -->\n  </indexConfig>\n\n\n  <!-- JMX\n\n
    \      This example enables JMX if and only if an existing MBeanServer\n       is
    found, use this if you want to configure JMX through JVM\n       parameters. Remove
    this to disable exposing Solr configuration\n       and statistics to JMX.\n\n
    \      For more details see http://wiki.apache.org/solr/SolrJmx\n    -->\n  <jmx
    />\n  <!-- If you want to connect to a particular server, specify the\n       agentId\n
    \   -->\n  <!-- <jmx agentId=\"myAgent\" /> -->\n  <!-- If you want to start a
    new MBeanServer, specify the serviceUrl -->\n  <!-- <jmx serviceUrl=\"service:jmx:rmi:///jndi/rmi://localhost:9999/solr\"/>\n
    \   -->\n\n  <!-- The default high-performance update handler -->\n  <updateHandler
    class=\"solr.DirectUpdateHandler2\">\n\n    <!-- Enables a transaction log, used
    for real-time get, durability, and\n         and solr cloud replica recovery.
    \ The log can grow as big as\n         uncommitted changes to the index, so use
    of a hard autoCommit\n         is recommended (see below).\n         \"dir\" -
    the target directory for transaction logs, defaults to the\n                solr
    data directory.\n         \"numVersionBuckets\" - sets the number of buckets used
    to keep\n                track of max version values when checking for re-ordered\n
    \               updates; increase this value to reduce the cost of\n                synchronizing
    access to version buckets during high-volume\n                indexing, this requires
    8 bytes (long) * numVersionBuckets\n                of heap space per Solr core.\n
    \   -->\n    <updateLog>\n      <str name=\"dir\">${solr.ulog.dir:}</str>\n      <int
    name=\"numVersionBuckets\">${solr.ulog.numVersionBuckets:65536}</int>\n    </updateLog>\n\n
    \   <!-- AutoCommit\n\n         Perform a hard commit automatically under certain
    conditions.\n         Instead of enabling autoCommit, consider using \"commitWithin\"\n
    \        when adding documents.\n\n         http://wiki.apache.org/solr/UpdateXmlMessages\n\n
    \        maxDocs - Maximum number of documents to add since the last\n                   commit
    before automatically triggering a new commit.\n\n         maxTime - Maximum amount
    of time in ms that is allowed to pass\n                   since a document was
    added before automatically\n                   triggering a new commit.\n         openSearcher
    - if false, the commit causes recent index changes\n           to be flushed to
    stable storage, but does not cause a new\n           searcher to be opened to
    make those changes visible.\n\n         If the updateLog is enabled, then it's
    highly recommended to\n         have some sort of hard autoCommit to limit the
    log size.\n      -->\n    <autoCommit>\n      <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>\n
    \     <openSearcher>false</openSearcher>\n    </autoCommit>\n\n    <!-- softAutoCommit
    is like autoCommit except it causes a\n         'soft' commit which only ensures
    that changes are visible\n         but does not ensure that data is synced to
    disk.  This is\n         faster and more near-realtime friendly than a hard commit.\n
    \     -->\n\n    <autoSoftCommit>\n      <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>\n
    \   </autoSoftCommit>\n\n    <!-- Update Related Event Listeners\n\n         Various
    IndexWriter related events can trigger Listeners to\n         take actions.\n\n
    \        postCommit - fired after every commit or optimize command\n         postOptimize
    - fired after every optimize command\n      -->\n\n  </updateHandler>\n\n  <!--
    IndexReaderFactory\n\n       Use the following format to specify a custom IndexReaderFactory,\n
    \      which allows for alternate IndexReader implementations.\n\n       ** Experimental
    Feature **\n\n       Please note - Using a custom IndexReaderFactory may prevent\n
    \      certain other features from working. The API to\n       IndexReaderFactory
    may change without warning or may even be\n       removed from future releases
    if the problems cannot be\n       resolved.\n\n\n       ** Features that may not
    work with custom IndexReaderFactory **\n\n       The ReplicationHandler assumes
    a disk-resident index. Using a\n       custom IndexReader implementation may cause
    incompatibility\n       with ReplicationHandler and may cause replication to not
    work\n       correctly. See SOLR-1366 for details.\n\n    -->\n  <!--\n  <indexReaderFactory
    name=\"IndexReaderFactory\" class=\"package.class\">\n    <str name=\"someArg\">Some
    Value</str>\n  </indexReaderFactory >\n  -->\n\n  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n
    \      Query section - these settings control query time things like caches\n
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n
    \ <query>\n\n    <!-- Maximum number of clauses in each BooleanQuery,  an exception\n
    \        is thrown if exceeded.  It is safe to increase or remove this setting,\n
    \        since it is purely an arbitrary limit to try and catch user errors where\n
    \        large boolean queries may not be the best implementation choice.\n      -->\n
    \   <maxBooleanClauses>1024</maxBooleanClauses>\n\n    <!-- Solr Internal Query
    Caches\n\n         There are two implementations of cache available for Solr,\n
    \        LRUCache, based on a synchronized LinkedHashMap, and\n         FastLRUCache,
    based on a ConcurrentHashMap.\n\n         FastLRUCache has faster gets and slower
    puts in single\n         threaded operation and thus is generally faster than
    LRUCache\n         when the hit ratio of the cache is high (> 75%), and may be\n
    \        faster under other scenarios on multi-cpu systems.\n    -->\n\n    <!--
    Filter Cache\n\n         Cache used by SolrIndexSearcher for filters (DocSets),\n
    \        unordered sets of *all* documents that match a query.  When a\n         new
    searcher is opened, its caches may be prepopulated or\n         \"autowarmed\"
    using data from caches in the old searcher.\n         autowarmCount is the number
    of items to prepopulate.  For\n         LRUCache, the autowarmed items will be
    the most recently\n         accessed items.\n\n         Parameters:\n           class
    - the SolrCache implementation LRUCache or\n               (LRUCache or FastLRUCache)\n
    \          size - the maximum number of entries in the cache\n           initialSize
    - the initial capacity (number of entries) of\n               the cache.  (see
    java.util.HashMap)\n           autowarmCount - the number of entries to prepopulate
    from\n               and old cache.\n           maxRamMB - the maximum amount
    of RAM (in MB) that this cache is allowed\n                      to occupy. Note
    that when this option is specified, the size\n                      and initialSize
    parameters are ignored.\n      -->\n    <filterCache class=\"solr.FastLRUCache\"\n
    \                size=\"512\"\n                 initialSize=\"512\"\n                 autowarmCount=\"0\"/>\n\n
    \   <!-- Query Result Cache\n\n         Caches results of searches - ordered lists
    of document ids\n         (DocList) based on a query, a sort, and the range of
    documents requested.\n         Additional supported parameter by LRUCache:\n            maxRamMB
    - the maximum amount of RAM (in MB) that this cache is allowed\n                       to
    occupy\n      -->\n    <queryResultCache class=\"solr.LRUCache\"\n                      size=\"512\"\n
    \                     initialSize=\"512\"\n                      autowarmCount=\"0\"/>\n\n
    \   <!-- Document Cache\n\n         Caches Lucene Document objects (the stored
    fields for each\n         document).  Since Lucene internal document ids are transient,\n
    \        this cache will not be autowarmed.\n      -->\n    <documentCache class=\"solr.LRUCache\"\n
    \                  size=\"512\"\n                   initialSize=\"512\"\n                   autowarmCount=\"0\"/>\n\n
    \   <!-- custom cache currently used by block join -->\n    <cache name=\"perSegFilter\"\n
    \          class=\"solr.search.LRUCache\"\n           size=\"10\"\n           initialSize=\"0\"\n
    \          autowarmCount=\"10\"\n           regenerator=\"solr.NoOpRegenerator\"
    />\n\n    <!-- Field Value Cache\n\n         Cache used to hold field values that
    are quickly accessible\n         by document id.  The fieldValueCache is created
    by default\n         even if not configured here.\n      -->\n    <!--\n       <fieldValueCache
    class=\"solr.FastLRUCache\"\n                        size=\"512\"\n                        autowarmCount=\"128\"\n
    \                       showItems=\"32\" />\n      -->\n\n    <!-- Custom Cache\n\n
    \        Example of a generic cache.  These caches may be accessed by\n         name
    through SolrIndexSearcher.getCache(),cacheLookup(), and\n         cacheInsert().
    \ The purpose is to enable easy caching of\n         user/application level data.
    \ The regenerator argument should\n         be specified as an implementation
    of solr.CacheRegenerator\n         if autowarming is desired.\n      -->\n    <!--\n
    \      <cache name=\"myUserCache\"\n              class=\"solr.LRUCache\"\n              size=\"4096\"\n
    \             initialSize=\"1024\"\n              autowarmCount=\"1024\"\n              regenerator=\"com.mycompany.MyRegenerator\"\n
    \             />\n      -->\n\n\n    <!-- Lazy Field Loading\n\n         If true,
    stored fields that are not requested will be loaded\n         lazily.  This can
    result in a significant speed improvement\n         if the usual case is to not
    load all stored fields,\n         especially if the skipped fields are large compressed
    text\n         fields.\n    -->\n    <enableLazyFieldLoading>true</enableLazyFieldLoading>\n\n
    \   <!-- Use Filter For Sorted Query\n\n         A possible optimization that
    attempts to use a filter to\n         satisfy a search.  If the requested sort
    does not include\n         score, then the filterCache will be checked for a filter\n
    \        matching the query. If found, the filter will be used as the\n         source
    of document ids, and then the sort will be applied to\n         that.\n\n         For
    most situations, this will not be useful unless you\n         frequently get the
    same search repeatedly with different sort\n         options, and none of them
    ever use \"score\"\n      -->\n    <!--\n       <useFilterForSortedQuery>true</useFilterForSortedQuery>\n
    \     -->\n\n    <!-- Result Window Size\n\n         An optimization for use with
    the queryResultCache.  When a search\n         is requested, a superset of the
    requested number of document ids\n         are collected.  For example, if a search
    for a particular query\n         requests matching documents 10 through 19, and
    queryWindowSize is 50,\n         then documents 0 through 49 will be collected
    and cached.  Any further\n         requests in that range can be satisfied via
    the cache.\n      -->\n    <queryResultWindowSize>20</queryResultWindowSize>\n\n
    \   <!-- Maximum number of documents to cache for any entry in the\n         queryResultCache.\n
    \     -->\n    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>\n\n    <!--
    Query Related Event Listeners\n\n         Various IndexSearcher related events
    can trigger Listeners to\n         take actions.\n\n         newSearcher - fired
    whenever a new searcher is being prepared\n         and there is a current searcher
    handling requests (aka\n         registered).  It can be used to prime certain
    caches to\n         prevent long request times for certain requests.\n\n         firstSearcher
    - fired whenever a new searcher is being\n         prepared but there is no current
    registered searcher to handle\n         requests or to gain autowarming data from.\n\n\n
    \     -->\n    <!-- QuerySenderListener takes an array of NamedList and executes
    a\n         local query request for each NamedList in sequence.\n      -->\n    <listener
    event=\"newSearcher\" class=\"solr.QuerySenderListener\">\n      <arr name=\"queries\">\n
    \       <!--\n           <lst><str name=\"q\">solr</str><str name=\"sort\">price
    asc</str></lst>\n           <lst><str name=\"q\">rocks</str><str name=\"sort\">weight
    asc</str></lst>\n          -->\n      </arr>\n    </listener>\n    <listener event=\"firstSearcher\"
    class=\"solr.QuerySenderListener\">\n      <arr name=\"queries\">\n        <!--\n
    \       <lst>\n          <str name=\"q\">static firstSearcher warming in solrconfig.xml</str>\n
    \       </lst>\n        -->\n      </arr>\n    </listener>\n\n    <!-- Use Cold
    Searcher\n\n         If a search request comes in and there is no current\n         registered
    searcher, then immediately register the still\n         warming searcher and use
    it.  If \"false\" then all requests\n         will block until the first searcher
    is done warming.\n      -->\n    <useColdSearcher>false</useColdSearcher>\n\n
    \ </query>\n\n\n  <!-- Request Dispatcher\n\n       This section contains instructions
    for how the SolrDispatchFilter\n       should behave when processing requests
    for this SolrCore.\n\n    -->\n  <requestDispatcher>\n    <!-- Request Parsing\n\n
    \        These settings indicate how Solr Requests may be parsed, and\n         what
    restrictions may be placed on the ContentStreams from\n         those requests\n\n
    \        enableRemoteStreaming - enables use of the stream.file\n         and
    stream.url parameters for specifying remote streams.\n\n         multipartUploadLimitInKB
    - specifies the max size (in KiB) of\n         Multipart File Uploads that Solr
    will allow in a Request.\n\n         formdataUploadLimitInKB - specifies the max
    size (in KiB) of\n         form data (application/x-www-form-urlencoded) sent
    via\n         POST. You can use POST to pass request parameters not\n         fitting
    into the URL.\n\n         addHttpRequestToContext - if set to true, it will instruct\n
    \        the requestParsers to include the original HttpServletRequest\n         object
    in the context map of the SolrQueryRequest under the\n         key \"httpRequest\".
    It will not be used by any of the existing\n         Solr components, but may
    be useful when developing custom\n         plugins.\n\n         *** WARNING ***\n
    \        Before enabling remote streaming, you should make sure your\n         system
    has authentication enabled.\n\n    <requestParsers enableRemoteStreaming=\"false\"\n
    \                   multipartUploadLimitInKB=\"-1\"\n                    formdataUploadLimitInKB=\"-1\"\n
    \                   addHttpRequestToContext=\"false\"/>\n      -->\n\n    <!--
    HTTP Caching\n\n         Set HTTP caching related parameters (for proxy caches
    and clients).\n\n         The options below instruct Solr not to output any HTTP
    Caching\n         related headers\n      -->\n    <httpCaching never304=\"true\"
    />\n    <!-- If you include a <cacheControl> directive, it will be used to\n         generate
    a Cache-Control header (as well as an Expires header\n         if the value contains
    \"max-age=\")\n\n         By default, no Cache-Control header is generated.\n\n
    \        You can use the <cacheControl> option even if you have set\n         never304=\"true\"\n
    \     -->\n    <!--\n       <httpCaching never304=\"true\" >\n         <cacheControl>max-age=30,
    public</cacheControl>\n       </httpCaching>\n      -->\n    <!-- To enable Solr
    to respond with automatically generated HTTP\n         Caching headers, and to
    response to Cache Validation requests\n         correctly, set the value of never304=\"false\"\n\n
    \        This will cause Solr to generate Last-Modified and ETag\n         headers
    based on the properties of the Index.\n\n         The following options can also
    be specified to affect the\n         values of these headers...\n\n         lastModFrom
    - the default value is \"openTime\" which means the\n         Last-Modified value
    (and validation against If-Modified-Since\n         requests) will all be relative
    to when the current Searcher\n         was opened.  You can change it to lastModFrom=\"dirLastMod\"
    if\n         you want the value to exactly correspond to when the physical\n         index
    was last modified.\n\n         etagSeed=\"...\" is an option you can change to
    force the ETag\n         header (and validation against If-None-Match requests)
    to be\n         different even if the index has not changed (ie: when making\n
    \        significant changes to your config file)\n\n         (lastModifiedFrom
    and etagSeed are both ignored if you use\n         the never304=\"true\" option)\n
    \     -->\n    <!--\n       <httpCaching lastModifiedFrom=\"openTime\"\n                    etagSeed=\"Solr\">\n
    \        <cacheControl>max-age=30, public</cacheControl>\n       </httpCaching>\n
    \     -->\n  </requestDispatcher>\n\n  <!-- Request Handlers\n\n       http://wiki.apache.org/solr/SolrRequestHandler\n\n
    \      Incoming queries will be dispatched to a specific handler by name\n       based
    on the path specified in the request.\n\n       If a Request Handler is declared
    with startup=\"lazy\", then it will\n       not be initialized until the first
    request that uses it.\n\n    -->\n  <!-- SearchHandler\n\n       http://wiki.apache.org/solr/SearchHandler\n\n
    \      For processing Search Queries, the primary Request Handler\n       provided
    with Solr is \"SearchHandler\" It delegates to a sequent\n       of SearchComponents
    (see below) and supports distributed\n       queries across multiple shards\n
    \   -->\n  <requestHandler name=\"/select\" class=\"solr.SearchHandler\">\n    <!--
    default values for query parameters can be specified, these\n         will be
    overridden by parameters in the request\n      -->\n    <lst name=\"defaults\">\n
    \     <str name=\"echoParams\">explicit</str>\n      <int name=\"rows\">10</int>\n
    \     <!-- Default search field\n         <str name=\"df\">text</str> \n        -->\n
    \     <!-- Change from JSON to XML format (the default prior to Solr 7.0)\n         <str
    name=\"wt\">xml</str> \n        -->\n    </lst>\n    <!-- In addition to defaults,
    \"appends\" params can be specified\n         to identify values which should
    be appended to the list of\n         multi-val params from the query (or the existing
    \"defaults\").\n      -->\n    <!-- In this example, the param \"fq=instock:true\"
    would be appended to\n         any query time fq params the user may specify,
    as a mechanism for\n         partitioning the index, independent of any user selected
    filtering\n         that may also be desired (perhaps as a result of faceted searching).\n\n
    \        NOTE: there is *absolutely* nothing a client can do to prevent these\n
    \        \"appends\" values from being used, so don't use this mechanism\n         unless
    you are sure you always want it.\n      -->\n    <!--\n       <lst name=\"appends\">\n
    \        <str name=\"fq\">inStock:true</str>\n       </lst>\n      -->\n    <!--
    \"invariants\" are a way of letting the Solr maintainer lock down\n         the
    options available to Solr clients.  Any params values\n         specified here
    are used regardless of what values may be specified\n         in either the query,
    the \"defaults\", or the \"appends\" params.\n\n         In this example, the
    facet.field and facet.query params would\n         be fixed, limiting the facets
    clients can use.  Faceting is\n         not turned on by default - but if the
    client does specify\n         facet=true in the request, these are the only facets
    they\n         will be able to see counts for; regardless of what other\n         facet.field
    or facet.query params they may specify.\n\n         NOTE: there is *absolutely*
    nothing a client can do to prevent these\n         \"invariants\" values from
    being used, so don't use this mechanism\n         unless you are sure you always
    want it.\n      -->\n    <!--\n       <lst name=\"invariants\">\n         <str
    name=\"facet.field\">cat</str>\n         <str name=\"facet.field\">manu_exact</str>\n
    \        <str name=\"facet.query\">price:[* TO 500]</str>\n         <str name=\"facet.query\">price:[500
    TO *]</str>\n       </lst>\n      -->\n    <!-- If the default list of SearchComponents
    is not desired, that\n         list can either be overridden completely, or components
    can be\n         prepended or appended to the default list.  (see below)\n      -->\n
    \   <!--\n       <arr name=\"components\">\n         <str>nameOfCustomComponent1</str>\n
    \        <str>nameOfCustomComponent2</str>\n       </arr>\n      -->\n  </requestHandler>\n\n
    \ <!-- A request handler that returns indented JSON by default -->\n  <requestHandler
    name=\"/query\" class=\"solr.SearchHandler\">\n    <lst name=\"defaults\">\n      <str
    name=\"echoParams\">explicit</str>\n      <str name=\"wt\">json</str>\n      <str
    name=\"indent\">true</str>\n    </lst>\n  </requestHandler>\n\n\n  <!-- A Robust
    Example\n\n       This example SearchHandler declaration shows off usage of the\n
    \      SearchHandler with many defaults declared\n\n       Note that multiple
    instances of the same Request Handler\n       (SearchHandler) can be registered
    multiple times with different\n       names (and different init parameters)\n
    \   -->\n  <requestHandler name=\"/browse\" class=\"solr.SearchHandler\" useParams=\"query,facets,velocity,browse\">\n
    \   <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n    </lst>\n
    \ </requestHandler>\n\n  <initParams path=\"/update/**,/query,/select,/tvrh,/elevate,/spell,/browse\">\n
    \   <lst name=\"defaults\">\n      <str name=\"df\">_text_</str>\n    </lst>\n
    \ </initParams>\n\n  <!-- Solr Cell Update Request Handler\n\n       http://wiki.apache.org/solr/ExtractingRequestHandler\n\n
    \   -->\n  <requestHandler name=\"/update/extract\"\n                  startup=\"lazy\"\n
    \                 class=\"solr.extraction.ExtractingRequestHandler\" >\n    <lst
    name=\"defaults\">\n      <str name=\"lowernames\">true</str>\n      <str name=\"fmap.meta\">ignored_</str>\n
    \     <str name=\"fmap.content\">_text_</str>\n    </lst>\n  </requestHandler>\n\n
    \ <!-- Search Components\n\n       Search components are registered to SolrCore
    and used by\n       instances of SearchHandler (which can access them by name)\n\n
    \      By default, the following components are available:\n\n       <searchComponent
    name=\"query\"     class=\"solr.QueryComponent\" />\n       <searchComponent name=\"facet\"
    \    class=\"solr.FacetComponent\" />\n       <searchComponent name=\"mlt\"       class=\"solr.MoreLikeThisComponent\"
    />\n       <searchComponent name=\"highlight\" class=\"solr.HighlightComponent\"
    />\n       <searchComponent name=\"stats\"     class=\"solr.StatsComponent\" />\n
    \      <searchComponent name=\"debug\"     class=\"solr.DebugComponent\" />\n\n
    \      Default configuration in a requestHandler would look like:\n\n       <arr
    name=\"components\">\n         <str>query</str>\n         <str>facet</str>\n         <str>mlt</str>\n
    \        <str>highlight</str>\n         <str>stats</str>\n         <str>debug</str>\n
    \      </arr>\n\n       If you register a searchComponent to one of the standard
    names,\n       that will be used instead of the default.\n\n       To insert components
    before or after the 'standard' components, use:\n\n       <arr name=\"first-components\">\n
    \        <str>myFirstComponentName</str>\n       </arr>\n\n       <arr name=\"last-components\">\n
    \        <str>myLastComponentName</str>\n       </arr>\n\n       NOTE: The component
    registered with the name \"debug\" will\n       always be executed after the \"last-components\"\n\n
    \    -->\n\n  <!-- Spell Check\n\n       The spell check component can return
    a list of alternative spelling\n       suggestions.\n\n       http://wiki.apache.org/solr/SpellCheckComponent\n
    \   -->\n  <searchComponent name=\"spellcheck\" class=\"solr.SpellCheckComponent\">\n\n
    \   <str name=\"queryAnalyzerFieldType\">text_general</str>\n\n    <!-- Multiple
    \"Spell Checkers\" can be declared and used by this\n         component\n      -->\n\n
    \   <!-- a spellchecker built from a field of the main index -->\n    <lst name=\"spellchecker\">\n
    \     <str name=\"name\">default</str>\n      <str name=\"field\">_text_</str>\n
    \     <str name=\"classname\">solr.DirectSolrSpellChecker</str>\n      <!-- the
    spellcheck distance measure used, the default is the internal levenshtein -->\n
    \     <str name=\"distanceMeasure\">internal</str>\n      <!-- minimum accuracy
    needed to be considered a valid spellcheck suggestion -->\n      <float name=\"accuracy\">0.5</float>\n
    \     <!-- the maximum #edits we consider when enumerating terms: can be 1 or
    2 -->\n      <int name=\"maxEdits\">2</int>\n      <!-- the minimum shared prefix
    when enumerating terms -->\n      <int name=\"minPrefix\">1</int>\n      <!--
    maximum number of inspections per result. -->\n      <int name=\"maxInspections\">5</int>\n
    \     <!-- minimum length of a query term to be considered for correction -->\n
    \     <int name=\"minQueryLength\">4</int>\n      <!-- maximum threshold of documents
    a query term can appear to be considered for correction -->\n      <float name=\"maxQueryFrequency\">0.01</float>\n
    \     <!-- uncomment this to require suggestions to occur in 1% of the documents\n
    \       <float name=\"thresholdTokenFrequency\">.01</float>\n      -->\n    </lst>\n\n
    \   <!-- a spellchecker that can break or combine words.  See \"/spell\" handler
    below for usage -->\n    <!--\n    <lst name=\"spellchecker\">\n      <str name=\"name\">wordbreak</str>\n
    \     <str name=\"classname\">solr.WordBreakSolrSpellChecker</str>\n      <str
    name=\"field\">name</str>\n      <str name=\"combineWords\">true</str>\n      <str
    name=\"breakWords\">true</str>\n      <int name=\"maxChanges\">10</int>\n    </lst>\n
    \   -->\n  </searchComponent>\n\n  <!-- A request handler for demonstrating the
    spellcheck component.\n\n       NOTE: This is purely as an example.  The whole
    purpose of the\n       SpellCheckComponent is to hook it into the request handler
    that\n       handles your normal user queries so that a separate request is\n
    \      not needed to get suggestions.\n\n       IN OTHER WORDS, THERE IS REALLY
    GOOD CHANCE THE SETUP BELOW IS\n       NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!\n\n
    \      See http://wiki.apache.org/solr/SpellCheckComponent for details\n       on
    the request parameters.\n    -->\n  <requestHandler name=\"/spell\" class=\"solr.SearchHandler\"
    startup=\"lazy\">\n    <lst name=\"defaults\">\n      <!-- Solr will use suggestions
    from both the 'default' spellchecker\n           and from the 'wordbreak' spellchecker
    and combine them.\n           collations (re-written queries) can include a combination
    of\n           corrections from both spellcheckers -->\n      <str name=\"spellcheck.dictionary\">default</str>\n
    \     <str name=\"spellcheck\">on</str>\n      <str name=\"spellcheck.extendedResults\">true</str>\n
    \     <str name=\"spellcheck.count\">10</str>\n      <str name=\"spellcheck.alternativeTermCount\">5</str>\n
    \     <str name=\"spellcheck.maxResultsForSuggest\">5</str>\n      <str name=\"spellcheck.collate\">true</str>\n
    \     <str name=\"spellcheck.collateExtendedResults\">true</str>\n      <str name=\"spellcheck.maxCollationTries\">10</str>\n
    \     <str name=\"spellcheck.maxCollations\">5</str>\n    </lst>\n    <arr name=\"last-components\">\n
    \     <str>spellcheck</str>\n    </arr>\n  </requestHandler>\n\n  <!-- Term Vector
    Component\n\n       http://wiki.apache.org/solr/TermVectorComponent\n    -->\n
    \ <searchComponent name=\"tvComponent\" class=\"solr.TermVectorComponent\"/>\n\n
    \ <!-- A request handler for demonstrating the term vector component\n\n       This
    is purely as an example.\n\n       In reality you will likely want to add the
    component to your\n       already specified request handlers.\n    -->\n  <requestHandler
    name=\"/tvrh\" class=\"solr.SearchHandler\" startup=\"lazy\">\n    <lst name=\"defaults\">\n
    \     <bool name=\"tv\">true</bool>\n    </lst>\n    <arr name=\"last-components\">\n
    \     <str>tvComponent</str>\n    </arr>\n  </requestHandler>\n\n  <!-- Clustering
    Component. (Omitted here. See the default Solr example for a typical configuration.)
    -->\n\n  <!-- Terms Component\n\n       http://wiki.apache.org/solr/TermsComponent\n\n
    \      A component to return terms and document frequency of those\n       terms\n
    \   -->\n  <searchComponent name=\"terms\" class=\"solr.TermsComponent\"/>\n\n
    \ <!-- A request handler for demonstrating the terms component -->\n  <requestHandler
    name=\"/terms\" class=\"solr.SearchHandler\" startup=\"lazy\">\n    <lst name=\"defaults\">\n
    \     <bool name=\"terms\">true</bool>\n      <bool name=\"distrib\">false</bool>\n
    \   </lst>\n    <arr name=\"components\">\n      <str>terms</str>\n    </arr>\n
    \ </requestHandler>\n\n\n  <!-- Query Elevation Component\n\n       http://wiki.apache.org/solr/QueryElevationComponent\n\n
    \      a search component that enables you to configure the top\n       results
    for a given query regardless of the normal lucene\n       scoring.\n    -->\n
    \ <searchComponent name=\"elevator\" class=\"solr.QueryElevationComponent\" >\n
    \   <!-- pick a fieldType to analyze queries -->\n    <str name=\"queryFieldType\">string</str>\n
    \ </searchComponent>\n\n  <!-- A request handler for demonstrating the elevator
    component -->\n  <requestHandler name=\"/elevate\" class=\"solr.SearchHandler\"
    startup=\"lazy\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n
    \   </lst>\n    <arr name=\"last-components\">\n      <str>elevator</str>\n    </arr>\n
    \ </requestHandler>\n\n  <!-- Highlighting Component\n\n       http://wiki.apache.org/solr/HighlightingParameters\n
    \   -->\n  <searchComponent class=\"solr.HighlightComponent\" name=\"highlight\">\n
    \   <highlighting>\n      <!-- Configure the standard fragmenter -->\n      <!--
    This could most likely be commented out in the \"default\" case -->\n      <fragmenter
    name=\"gap\"\n                  default=\"true\"\n                  class=\"solr.highlight.GapFragmenter\">\n
    \       <lst name=\"defaults\">\n          <int name=\"hl.fragsize\">100</int>\n
    \       </lst>\n      </fragmenter>\n\n      <!-- A regular-expression-based fragmenter\n
    \          (for sentence extraction)\n        -->\n      <fragmenter name=\"regex\"\n
    \                 class=\"solr.highlight.RegexFragmenter\">\n        <lst name=\"defaults\">\n
    \         <!-- slightly smaller fragsizes work better because of slop -->\n          <int
    name=\"hl.fragsize\">70</int>\n          <!-- allow 50% slop on fragment sizes
    -->\n          <float name=\"hl.regex.slop\">0.5</float>\n          <!-- a basic
    sentence pattern -->\n          <str name=\"hl.regex.pattern\">[-\\w ,/\\n\\&quot;&apos;]{20,200}</str>\n
    \       </lst>\n      </fragmenter>\n\n      <!-- Configure the standard formatter
    -->\n      <formatter name=\"html\"\n                 default=\"true\"\n                 class=\"solr.highlight.HtmlFormatter\">\n
    \       <lst name=\"defaults\">\n          <str name=\"hl.simple.pre\"><![CDATA[<em>]]></str>\n
    \         <str name=\"hl.simple.post\"><![CDATA[</em>]]></str>\n        </lst>\n
    \     </formatter>\n\n      <!-- Configure the standard encoder -->\n      <encoder
    name=\"html\"\n               class=\"solr.highlight.HtmlEncoder\" />\n\n      <!--
    Configure the standard fragListBuilder -->\n      <fragListBuilder name=\"simple\"\n
    \                      class=\"solr.highlight.SimpleFragListBuilder\"/>\n\n      <!--
    Configure the single fragListBuilder -->\n      <fragListBuilder name=\"single\"\n
    \                      class=\"solr.highlight.SingleFragListBuilder\"/>\n\n      <!--
    Configure the weighted fragListBuilder -->\n      <fragListBuilder name=\"weighted\"\n
    \                      default=\"true\"\n                       class=\"solr.highlight.WeightedFragListBuilder\"/>\n\n
    \     <!-- default tag FragmentsBuilder -->\n      <fragmentsBuilder name=\"default\"\n
    \                       default=\"true\"\n                        class=\"solr.highlight.ScoreOrderFragmentsBuilder\">\n
    \       <!--\n        <lst name=\"defaults\">\n          <str name=\"hl.multiValuedSeparatorChar\">/</str>\n
    \       </lst>\n        -->\n      </fragmentsBuilder>\n\n      <!-- multi-colored
    tag FragmentsBuilder -->\n      <fragmentsBuilder name=\"colored\"\n                        class=\"solr.highlight.ScoreOrderFragmentsBuilder\">\n
    \       <lst name=\"defaults\">\n          <str name=\"hl.tag.pre\"><![CDATA[\n
    \              <b style=\"background:yellow\">,<b style=\"background:lawgreen\">,\n
    \              <b style=\"background:aquamarine\">,<b style=\"background:magenta\">,\n
    \              <b style=\"background:palegreen\">,<b style=\"background:coral\">,\n
    \              <b style=\"background:wheat\">,<b style=\"background:khaki\">,\n
    \              <b style=\"background:lime\">,<b style=\"background:deepskyblue\">]]></str>\n
    \         <str name=\"hl.tag.post\"><![CDATA[</b>]]></str>\n        </lst>\n      </fragmentsBuilder>\n\n
    \     <boundaryScanner name=\"default\"\n                       default=\"true\"\n
    \                      class=\"solr.highlight.SimpleBoundaryScanner\">\n        <lst
    name=\"defaults\">\n          <str name=\"hl.bs.maxScan\">10</str>\n          <str
    name=\"hl.bs.chars\">.,!? &#9;&#10;&#13;</str>\n        </lst>\n      </boundaryScanner>\n\n
    \     <boundaryScanner name=\"breakIterator\"\n                       class=\"solr.highlight.BreakIteratorBoundaryScanner\">\n
    \       <lst name=\"defaults\">\n          <!-- type should be one of CHARACTER,
    WORD(default), LINE and SENTENCE -->\n          <str name=\"hl.bs.type\">WORD</str>\n
    \         <!-- language and country are used when constructing Locale object.
    \ -->\n          <!-- And the Locale object will be used when getting instance
    of BreakIterator -->\n          <str name=\"hl.bs.language\">en</str>\n          <str
    name=\"hl.bs.country\">US</str>\n        </lst>\n      </boundaryScanner>\n    </highlighting>\n
    \ </searchComponent>\n\n  <!-- Update Processors\n\n       Chains of Update Processor
    Factories for dealing with Update\n       Requests can be declared, and then used
    by name in Update\n       Request Processors\n\n       http://wiki.apache.org/solr/UpdateRequestProcessor\n\n
    \   -->\n\n  <!-- Add unknown fields to the schema\n\n       Field type guessing
    update processors that will\n       attempt to parse string-typed field values
    as Booleans, Longs,\n       Doubles, or Dates, and then add schema fields with
    the guessed\n       field types. Text content will be indexed as \"text_general\"
    as\n       well as a copy to a plain string version in *_str.\n\n       These
    require that the schema is both managed and mutable, by\n       declaring schemaFactory
    as ManagedIndexSchemaFactory, with\n       mutable specified as true.\n\n       See
    http://wiki.apache.org/solr/GuessingFieldTypes\n    -->\n  <updateProcessor class=\"solr.UUIDUpdateProcessorFactory\"
    name=\"uuid\"/>\n  <updateProcessor class=\"solr.RemoveBlankFieldUpdateProcessorFactory\"
    name=\"remove-blank\"/>\n  <updateProcessor class=\"solr.FieldNameMutatingUpdateProcessorFactory\"
    name=\"field-name-mutating\">\n    <str name=\"pattern\">[^\\w-\\.]</str>\n    <str
    name=\"replacement\">_</str>\n  </updateProcessor>\n  <updateProcessor class=\"solr.ParseBooleanFieldUpdateProcessorFactory\"
    name=\"parse-boolean\"/>\n  <updateProcessor class=\"solr.ParseLongFieldUpdateProcessorFactory\"
    name=\"parse-long\"/>\n  <updateProcessor class=\"solr.ParseDoubleFieldUpdateProcessorFactory\"
    name=\"parse-double\"/>\n  <updateProcessor class=\"solr.ParseDateFieldUpdateProcessorFactory\"
    name=\"parse-date\">\n    <arr name=\"format\">\n      <str>yyyy-MM-dd'T'HH:mm:ss.SSSZ</str>\n
    \     <str>yyyy-MM-dd'T'HH:mm:ss,SSSZ</str>\n      <str>yyyy-MM-dd'T'HH:mm:ss.SSS</str>\n
    \     <str>yyyy-MM-dd'T'HH:mm:ss,SSS</str>\n      <str>yyyy-MM-dd'T'HH:mm:ssZ</str>\n
    \     <str>yyyy-MM-dd'T'HH:mm:ss</str>\n      <str>yyyy-MM-dd'T'HH:mmZ</str>\n
    \     <str>yyyy-MM-dd'T'HH:mm</str>\n      <str>yyyy-MM-dd HH:mm:ss.SSSZ</str>\n
    \     <str>yyyy-MM-dd HH:mm:ss,SSSZ</str>\n      <str>yyyy-MM-dd HH:mm:ss.SSS</str>\n
    \     <str>yyyy-MM-dd HH:mm:ss,SSS</str>\n      <str>yyyy-MM-dd HH:mm:ssZ</str>\n
    \     <str>yyyy-MM-dd HH:mm:ss</str>\n      <str>yyyy-MM-dd HH:mmZ</str>\n      <str>yyyy-MM-dd
    HH:mm</str>\n      <str>yyyy-MM-dd</str>\n    </arr>\n  </updateProcessor>\n  <updateProcessor
    class=\"solr.AddSchemaFieldsUpdateProcessorFactory\" name=\"add-schema-fields\">\n
    \   <lst name=\"typeMapping\">\n      <str name=\"valueClass\">java.lang.String</str>\n
    \     <str name=\"fieldType\">text_general</str>\n      <lst name=\"copyField\">\n
    \       <str name=\"dest\">*_str</str>\n        <int name=\"maxChars\">256</int>\n
    \     </lst>\n      <!-- Use as default mapping instead of defaultFieldType -->\n
    \     <bool name=\"default\">true</bool>\n    </lst>\n    <lst name=\"typeMapping\">\n
    \     <str name=\"valueClass\">java.lang.Boolean</str>\n      <str name=\"fieldType\">booleans</str>\n
    \   </lst>\n    <lst name=\"typeMapping\">\n      <str name=\"valueClass\">java.util.Date</str>\n
    \     <str name=\"fieldType\">pdates</str>\n    </lst>\n    <lst name=\"typeMapping\">\n
    \     <str name=\"valueClass\">java.lang.Long</str>\n      <str name=\"valueClass\">java.lang.Integer</str>\n
    \     <str name=\"fieldType\">plongs</str>\n    </lst>\n    <lst name=\"typeMapping\">\n
    \     <str name=\"valueClass\">java.lang.Number</str>\n      <str name=\"fieldType\">pdoubles</str>\n
    \   </lst>\n  </updateProcessor>\n\n  <!-- The update.autoCreateFields property
    can be turned to false to disable schemaless mode -->\n  <updateRequestProcessorChain
    name=\"add-unknown-fields-to-the-schema\" default=\"${update.autoCreateFields:true}\"\n
    \          processor=\"uuid,remove-blank,field-name-mutating,parse-boolean,parse-long,parse-double,parse-date,add-schema-fields\">\n
    \   <processor class=\"solr.LogUpdateProcessorFactory\"/>\n    <processor class=\"solr.DistributedUpdateProcessorFactory\"/>\n
    \   <processor class=\"solr.RunUpdateProcessorFactory\"/>\n  </updateRequestProcessorChain>\n\n
    \ <!-- Deduplication\n\n       An example dedup update processor that creates
    the \"id\" field\n       on the fly based on the hash code of some other fields.
    \ This\n       example has overwriteDupes set to false since we are using the\n
    \      id field as the signatureField and Solr will maintain\n       uniqueness
    based on that anyway.\n\n    -->\n  <!--\n     <updateRequestProcessorChain name=\"dedupe\">\n
    \      <processor class=\"solr.processor.SignatureUpdateProcessorFactory\">\n
    \        <bool name=\"enabled\">true</bool>\n         <str name=\"signatureField\">id</str>\n
    \        <bool name=\"overwriteDupes\">false</bool>\n         <str name=\"fields\">name,features,cat</str>\n
    \        <str name=\"signatureClass\">solr.processor.Lookup3Signature</str>\n
    \      </processor>\n       <processor class=\"solr.LogUpdateProcessorFactory\"
    />\n       <processor class=\"solr.RunUpdateProcessorFactory\" />\n     </updateRequestProcessorChain>\n
    \   -->\n\n  <!-- Language identification\n\n       This example update chain
    identifies the language of the incoming\n       documents using the langid contrib.
    The detected language is\n       written to field language_s. No field name mapping
    is done.\n       The fields used for detection are text, title, subject and description,\n
    \      making this example suitable for detecting languages form full-text\n       rich
    documents injected via ExtractingRequestHandler.\n       See more about langId
    at http://wiki.apache.org/solr/LanguageDetection\n    -->\n  <!--\n   <updateRequestProcessorChain
    name=\"langid\">\n     <processor class=\"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory\">\n
    \      <str name=\"langid.fl\">text,title,subject,description</str>\n       <str
    name=\"langid.langField\">language_s</str>\n       <str name=\"langid.fallback\">en</str>\n
    \    </processor>\n     <processor class=\"solr.LogUpdateProcessorFactory\" />\n
    \    <processor class=\"solr.RunUpdateProcessorFactory\" />\n   </updateRequestProcessorChain>\n
    \ -->\n\n  <!-- Script update processor\n\n    This example hooks in an update
    processor implemented using JavaScript.\n\n    See more about the script update
    processor at http://wiki.apache.org/solr/ScriptUpdateProcessor\n  -->\n  <!--\n
    \   <updateRequestProcessorChain name=\"script\">\n      <processor class=\"solr.StatelessScriptUpdateProcessorFactory\">\n
    \       <str name=\"script\">update-script.js</str>\n        <lst name=\"params\">\n
    \         <str name=\"config_param\">example config parameter</str>\n        </lst>\n
    \     </processor>\n      <processor class=\"solr.RunUpdateProcessorFactory\"
    />\n    </updateRequestProcessorChain>\n  -->\n\n  <!-- Response Writers\n\n       http://wiki.apache.org/solr/QueryResponseWriter\n\n
    \      Request responses will be written using the writer specified by\n       the
    'wt' request parameter matching the name of a registered\n       writer.\n\n       The
    \"default\" writer is the default and will be used if 'wt' is\n       not specified
    in the request.\n    -->\n  <!-- The following response writers are implicitly
    configured unless\n       overridden...\n    -->\n  <!--\n     <queryResponseWriter
    name=\"xml\"\n                          default=\"true\"\n                          class=\"solr.XMLResponseWriter\"
    />\n     <queryResponseWriter name=\"json\" class=\"solr.JSONResponseWriter\"/>\n
    \    <queryResponseWriter name=\"python\" class=\"solr.PythonResponseWriter\"/>\n
    \    <queryResponseWriter name=\"ruby\" class=\"solr.RubyResponseWriter\"/>\n
    \    <queryResponseWriter name=\"php\" class=\"solr.PHPResponseWriter\"/>\n     <queryResponseWriter
    name=\"phps\" class=\"solr.PHPSerializedResponseWriter\"/>\n     <queryResponseWriter
    name=\"csv\" class=\"solr.CSVResponseWriter\"/>\n     <queryResponseWriter name=\"schema.xml\"
    class=\"solr.SchemaXmlResponseWriter\"/>\n    -->\n\n  <queryResponseWriter name=\"json\"
    class=\"solr.JSONResponseWriter\">\n    <!-- For the purposes of the tutorial,
    JSON responses are written as\n     plain text so that they are easy to read in
    *any* browser.\n     If you expect a MIME type of \"application/json\" just remove
    this override.\n    -->\n    <str name=\"content-type\">text/plain; charset=UTF-8</str>\n
    \ </queryResponseWriter>\n\n  <!--\n     Custom response writers can be declared
    as needed...\n    -->\n  <queryResponseWriter name=\"velocity\" class=\"solr.VelocityResponseWriter\"
    startup=\"lazy\">\n    <str name=\"template.base.dir\">${velocity.template.base.dir:}</str>\n
    \   <str name=\"solr.resource.loader.enabled\">${velocity.solr.resource.loader.enabled:true}</str>\n
    \   <str name=\"params.resource.loader.enabled\">${velocity.params.resource.loader.enabled:false}</str>\n
    \ </queryResponseWriter>\n\n  <!-- XSLT response writer transforms the XML output
    by any xslt file found\n       in Solr's conf/xslt directory.  Changes to xslt
    files are checked for\n       every xsltCacheLifetimeSeconds.\n    -->\n  <queryResponseWriter
    name=\"xslt\" class=\"solr.XSLTResponseWriter\">\n    <int name=\"xsltCacheLifetimeSeconds\">5</int>\n
    \ </queryResponseWriter>\n\n  <!-- Query Parsers\n\n       https://lucene.apache.org/solr/guide/query-syntax-and-parsing.html\n\n
    \      Multiple QParserPlugins can be registered by name, and then\n       used
    in either the \"defType\" param for the QueryComponent (used\n       by SearchHandler)
    or in LocalParams\n    -->\n  <!-- example of registering a query parser -->\n
    \ <!--\n     <queryParser name=\"myparser\" class=\"com.mycompany.MyQParserPlugin\"/>\n
    \   -->\n\n  <!-- Function Parsers\n\n       http://wiki.apache.org/solr/FunctionQuery\n\n
    \      Multiple ValueSourceParsers can be registered by name, and then\n       used
    as function names when using the \"func\" QParser.\n    -->\n  <!-- example of
    registering a custom function parser  -->\n  <!--\n     <valueSourceParser name=\"myfunc\"\n
    \                       class=\"com.mycompany.MyValueSourceParser\" />\n    -->\n\n\n
    \ <!-- Document Transformers\n       http://wiki.apache.org/solr/DocTransformers\n
    \   -->\n  <!--\n     Could be something like:\n     <transformer name=\"db\"
    class=\"com.mycompany.LoadFromDatabaseTransformer\" >\n       <int name=\"connection\">jdbc://....</int>\n
    \    </transformer>\n\n     To add a constant value to all docs, use:\n     <transformer
    name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\"
    >\n       <int name=\"value\">5</int>\n     </transformer>\n\n     If you want
    the user to still be able to change it with _value:something_ use this:\n     <transformer
    name=\"mytrans3\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\"
    >\n       <double name=\"defaultValue\">5</double>\n     </transformer>\n\n      If
    you are using the QueryElevationComponent, you may wish to mark documents that
    get boosted.  The\n      EditorialMarkerFactory will do exactly that:\n     <transformer
    name=\"qecBooster\" class=\"org.apache.solr.response.transform.EditorialMarkerFactory\"
    />\n    -->\n</config>\n"
  stopwords.txt: |
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
  synonyms.txt: |+
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    #-----------------------------------------------------------------------
    #some test synonym mappings unlikely to appear in real input text
    aaafoo => aaabar
    bbbfoo => bbbfoo bbbbar
    cccfoo => cccbar cccbaz
    fooaaa,baraaa,bazaaa

    # Some synonym groups specific to this example
    GB,gib,gigabyte,gigabytes
    MB,mib,megabyte,megabytes
    Television, Televisions, TV, TVs
    #notice we use "gib" instead of "GiB" so any WordDelimiterGraphFilter coming
    #after us won't split it into two words.

    # Synonym mappings can be used for spelling correction too
    pixima => pixma

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: solr-lang
data:
  contractions_ca.txt: |
    # Set of Catalan contractions for ElisionFilter
    # TODO: load this as a resource from the analyzer and sync it in build.xml
    d
    l
    m
    n
    s
    t
  contractions_fr.txt: |
    # Set of French contractions for ElisionFilter
    # TODO: load this as a resource from the analyzer and sync it in build.xml
    l
    m
    t
    qu
    n
    s
    j
    d
    c
    jusqu
    quoiqu
    lorsqu
    puisqu
  contractions_ga.txt: |
    # Set of Irish contractions for ElisionFilter
    # TODO: load this as a resource from the analyzer and sync it in build.xml
    d
    m
    b
  contractions_it.txt: "# Set of Italian contractions for ElisionFilter\n# TODO: load
    this as a resource from the analyzer and sync it in build.xml\nc\nl \nall \ndall
    \ndell \nnell \nsull \ncoll \npell \ngl \nagl \ndagl \ndegl \nnegl \nsugl \nun
    \nm \nt \ns \nv \nd\n"
  hyphenations_ga.txt: |
    # Set of Irish hyphenations for StopFilter
    # TODO: load this as a resource from the analyzer and sync it in build.xml
    h
    n
    t
  stemdict_nl.txt: "# Set of overrides for the dutch stemmer\n# TODO: load this as
    a resource from the analyzer and sync it in build.xml\nfiets\tfiets\nbromfiets\tbromfiets\nei\teier\nkind\tkinder\n"
  stoptags_ja.txt: "#\n# This file defines a Japanese stoptag set for JapanesePartOfSpeechStopFilter.\n#\n#
    Any token with a part-of-speech tag that exactly matches those defined in this\n#
    file are removed from the token stream.\n#\n# Set your own stoptags by uncommenting
    the lines below.  Note that comments are\n# not allowed on the same line as a
    stoptag.  See LUCENE-3745 for frequency lists,\n# etc. that can be useful for
    building you own stoptag set.\n#\n# The entire possible tagset is provided below
    for convenience.\n#\n#####\n#  noun: unclassified nouns\n#名詞\n#\n#  noun-common:
    Common nouns or nouns where the sub-classification is undefined\n#名詞-一般\n#\n#
    \ noun-proper: Proper nouns where the sub-classification is undefined \n#名詞-固有名詞\n#\n#
    \ noun-proper-misc: miscellaneous proper nouns\n#名詞-固有名詞-一般\n#\n#  noun-proper-person:
    Personal names where the sub-classification is undefined\n#名詞-固有名詞-人名\n#\n#  noun-proper-person-misc:
    names that cannot be divided into surname and \n#  given name; foreign names;
    names where the surname or given name is unknown.\n#  e.g. お市の方\n#名詞-固有名詞-人名-一般\n#\n#
    \ noun-proper-person-surname: Mainly Japanese surnames.\n#  e.g. 山田\n#名詞-固有名詞-人名-姓\n#\n#
    \ noun-proper-person-given_name: Mainly Japanese given names.\n#  e.g. 太郎\n#名詞-固有名詞-人名-名\n#\n#
    \ noun-proper-organization: Names representing organizations.\n#  e.g. 通産省, NHK\n#名詞-固有名詞-組織\n#\n#
    \ noun-proper-place: Place names where the sub-classification is undefined\n#名詞-固有名詞-地域\n#\n#
    \ noun-proper-place-misc: Place names excluding countries.\n#  e.g. アジア, バルセロナ,
    京都\n#名詞-固有名詞-地域-一般\n#\n#  noun-proper-place-country: Country names. \n#  e.g.
    日本, オーストラリア\n#名詞-固有名詞-地域-国\n#\n#  noun-pronoun: Pronouns where the sub-classification
    is undefined\n#名詞-代名詞\n#\n#  noun-pronoun-misc: miscellaneous pronouns: \n#  e.g.
    それ, ここ, あいつ, あなた, あちこち, いくつ, どこか, なに, みなさん, みんな, わたくし, われわれ\n#名詞-代名詞-一般\n#\n#
    \ noun-pronoun-contraction: Spoken language contraction made by combining a \n#
    \ pronoun and the particle 'wa'.\n#  e.g. ありゃ, こりゃ, こりゃあ, そりゃ, そりゃあ \n#名詞-代名詞-縮約\n#\n#
    \ noun-adverbial: Temporal nouns such as names of days or months that behave \n#
    \ like adverbs. Nouns that represent amount or ratios and can be used adverbially,\n#
    \ e.g. 金曜, 一月, 午後, 少量\n#名詞-副詞可能\n#\n#  noun-verbal: Nouns that take arguments
    with case and can appear followed by \n#  'suru' and related verbs (する, できる, なさる,
    くださる)\n#  e.g. インプット, 愛着, 悪化, 悪戦苦闘, 一安心, 下取り\n#名詞-サ変接続\n#\n#  noun-adjective-base:
    The base form of adjectives, words that appear before な (\"na\")\n#  e.g. 健康,
    安易, 駄目, だめ\n#名詞-形容動詞語幹\n#\n#  noun-numeric: Arabic numbers, Chinese numerals,
    and counters like 何 (回), 数.\n#  e.g. 0, 1, 2, 何, 数, 幾\n#名詞-数\n#\n#  noun-affix:
    noun affixes where the sub-classification is undefined\n#名詞-非自立\n#\n#  noun-affix-misc:
    Of adnominalizers, the case-marker の (\"no\"), and words that \n#  attach to the
    base form of inflectional words, words that cannot be classified \n#  into any
    of the other categories below. This category includes indefinite nouns.\n#  e.g.
    あかつき, 暁, かい, 甲斐, 気, きらい, 嫌い, くせ, 癖, こと, 事, ごと, 毎, しだい, 次第, \n#       順, せい, 所為,
    ついで, 序で, つもり, 積もり, 点, どころ, の, はず, 筈, はずみ, 弾み, \n#       拍子, ふう, ふり, 振り, ほう, 方,
    旨, もの, 物, 者, ゆえ, 故, ゆえん, 所以, わけ, 訳,\n#       わり, 割り, 割, ん-口語/, もん-口語/\n#名詞-非自立-一般\n#\n#
    \ noun-affix-adverbial: noun affixes that that can behave as adverbs.\n#  e.g.
    あいだ, 間, あげく, 挙げ句, あと, 後, 余り, 以外, 以降, 以後, 以上, 以前, 一方, うえ, \n#       上, うち, 内, おり,
    折り, かぎり, 限り, きり, っきり, 結果, ころ, 頃, さい, 際, 最中, さなか, \n#       最中, じたい, 自体, たび, 度,
    ため, 為, つど, 都度, とおり, 通り, とき, 時, ところ, 所, \n#       とたん, 途端, なか, 中, のち, 後, ばあい, 場合,
    日, ぶん, 分, ほか, 他, まえ, 前, まま, \n#       儘, 侭, みぎり, 矢先\n#名詞-非自立-副詞可能\n#\n#  noun-affix-aux:
    noun affixes treated as 助動詞 (\"auxiliary verb\") in school grammars \n#  with
    the stem よう(だ) (\"you(da)\").\n#  e.g.  よう, やう, 様 (よう)\n#名詞-非自立-助動詞語幹\n#  \n#
    \ noun-affix-adjective-base: noun affixes that can connect to the indeclinable\n#
    \ connection form な (aux \"da\").\n#  e.g. みたい, ふう\n#名詞-非自立-形容動詞語幹\n#\n#  noun-special:
    special nouns where the sub-classification is undefined.\n#名詞-特殊\n#\n#  noun-special-aux:
    The そうだ (\"souda\") stem form that is used for reporting news, is \n#  treated
    as 助動詞 (\"auxiliary verb\") in school grammars, and attach to the base \n#  form
    of inflectional words.\n#  e.g. そう\n#名詞-特殊-助動詞語幹\n#\n#  noun-suffix: noun suffixes
    where the sub-classification is undefined.\n#名詞-接尾\n#\n#  noun-suffix-misc: Of
    the nouns or stem forms of other parts of speech that connect \n#  to ガル or タイ
    and can combine into compound nouns, words that cannot be classified into\n#  any
    of the other categories below. In general, this category is more inclusive than
    \n#  接尾語 (\"suffix\") and is usually the last element in a compound noun.\n#  e.g.
    おき, かた, 方, 甲斐 (がい), がかり, ぎみ, 気味, ぐるみ, (～した) さ, 次第, 済 (ず) み,\n#       よう, (でき)っこ,
    感, 観, 性, 学, 類, 面, 用\n#名詞-接尾-一般\n#\n#  noun-suffix-person: Suffixes that form nouns
    and attach to person names more often\n#  than other nouns.\n#  e.g. 君, 様, 著\n#名詞-接尾-人名\n#\n#
    \ noun-suffix-place: Suffixes that form nouns and attach to place names more often
    \n#  than other nouns.\n#  e.g. 町, 市, 県\n#名詞-接尾-地域\n#\n#  noun-suffix-verbal:
    Of the suffixes that attach to nouns and form nouns, those that \n#  can appear
    before スル (\"suru\").\n#  e.g. 化, 視, 分け, 入り, 落ち, 買い\n#名詞-接尾-サ変接続\n#\n#  noun-suffix-aux:
    The stem form of そうだ (様態) that is used to indicate conditions, \n#  is treated
    as 助動詞 (\"auxiliary verb\") in school grammars, and attach to the \n#  conjunctive
    form of inflectional words.\n#  e.g. そう\n#名詞-接尾-助動詞語幹\n#\n#  noun-suffix-adjective-base:
    Suffixes that attach to other nouns or the conjunctive \n#  form of inflectional
    words and appear before the copula だ (\"da\").\n#  e.g. 的, げ, がち\n#名詞-接尾-形容動詞語幹\n#\n#
    \ noun-suffix-adverbial: Suffixes that attach to other nouns and can behave as
    adverbs.\n#  e.g. 後 (ご), 以後, 以降, 以前, 前後, 中, 末, 上, 時 (じ)\n#名詞-接尾-副詞可能\n#\n#  noun-suffix-classifier:
    Suffixes that attach to numbers and form nouns. This category \n#  is more inclusive
    than 助数詞 (\"classifier\") and includes common nouns that attach \n#  to numbers.\n#
    \ e.g. 個, つ, 本, 冊, パーセント, cm, kg, カ月, か国, 区画, 時間, 時半\n#名詞-接尾-助数詞\n#\n#  noun-suffix-special:
    Special suffixes that mainly attach to inflecting words.\n#  e.g. (楽し) さ, (考え)
    方\n#名詞-接尾-特殊\n#\n#  noun-suffix-conjunctive: Nouns that behave like conjunctions
    and join two words \n#  together.\n#  e.g. (日本) 対 (アメリカ), 対 (アメリカ), (3) 対 (5),
    (女優) 兼 (主婦)\n#名詞-接続詞的\n#\n#  noun-verbal_aux: Nouns that attach to the conjunctive
    particle て (\"te\") and are \n#  semantically verb-like.\n#  e.g. ごらん, ご覧, 御覧,
    頂戴\n#名詞-動詞非自立的\n#\n#  noun-quotation: text that cannot be segmented into words,
    proverbs, Chinese poetry, \n#  dialects, English, etc. Currently, the only entry
    for 名詞 引用文字列 (\"noun quotation\") \n#  is いわく (\"iwaku\").\n#名詞-引用文字列\n#\n#  noun-nai_adjective:
    Words that appear before the auxiliary verb ない (\"nai\") and\n#  behave like an
    adjective.\n#  e.g. 申し訳, 仕方, とんでも, 違い\n#名詞-ナイ形容詞語幹\n#\n#####\n#  prefix: unclassified
    prefixes\n#接頭詞\n#\n#  prefix-nominal: Prefixes that attach to nouns (including
    adjective stem forms) \n#  excluding numerical expressions.\n#  e.g. お (水), 某
    (氏), 同 (社), 故 (～氏), 高 (品質), お (見事), ご (立派)\n#接頭詞-名詞接続\n#\n#  prefix-verbal: Prefixes
    that attach to the imperative form of a verb or a verb\n#  in conjunctive form
    followed by なる/なさる/くださる.\n#  e.g. お (読みなさい), お (座り)\n#接頭詞-動詞接続\n#\n#  prefix-adjectival:
    Prefixes that attach to adjectives.\n#  e.g. お (寒いですねえ), バカ (でかい)\n#接頭詞-形容詞接続\n#\n#
    \ prefix-numerical: Prefixes that attach to numerical expressions.\n#  e.g. 約,
    およそ, 毎時\n#接頭詞-数接続\n#\n#####\n#  verb: unclassified verbs\n#動詞\n#\n#  verb-main:\n#動詞-自立\n#\n#
    \ verb-auxiliary:\n#動詞-非自立\n#\n#  verb-suffix:\n#動詞-接尾\n#\n#####\n#  adjective:
    unclassified adjectives\n#形容詞\n#\n#  adjective-main:\n#形容詞-自立\n#\n#  adjective-auxiliary:\n#形容詞-非自立\n#\n#
    \ adjective-suffix:\n#形容詞-接尾\n#\n#####\n#  adverb: unclassified adverbs\n#副詞\n#\n#
    \ adverb-misc: Words that can be segmented into one unit and where adnominal \n#
    \ modification is not possible.\n#  e.g. あいかわらず, 多分\n#副詞-一般\n#\n#  adverb-particle_conjunction:
    Adverbs that can be followed by の, は, に, \n#  な, する, だ, etc.\n#  e.g. こんなに, そんなに,
    あんなに, なにか, なんでも\n#副詞-助詞類接続\n#\n#####\n#  adnominal: Words that only have noun-modifying
    forms.\n#  e.g. この, その, あの, どの, いわゆる, なんらかの, 何らかの, いろんな, こういう, そういう, ああいう, \n#
    \      どういう, こんな, そんな, あんな, どんな, 大きな, 小さな, おかしな, ほんの, たいした, \n#       「(, も) さる
    (ことながら)」, 微々たる, 堂々たる, 単なる, いかなる, 我が」「同じ, 亡き\n#連体詞\n#\n#####\n#  conjunction: Conjunctions
    that can occur independently.\n#  e.g. が, けれども, そして, じゃあ, それどころか\n接続詞\n#\n#####\n#
    \ particle: unclassified particles.\n助詞\n#\n#  particle-case: case particles where
    the subclassification is undefined.\n助詞-格助詞\n#\n#  particle-case-misc: Case particles.\n#
    \ e.g. から, が, で, と, に, へ, より, を, の, にて\n助詞-格助詞-一般\n#\n#  particle-case-quote:
    the \"to\" that appears after nouns, a person’s speech, \n#  quotation marks,
    expressions of decisions from a meeting, reasons, judgements,\n#  conjectures,
    etc.\n#  e.g. ( だ) と (述べた.), ( である) と (して執行猶予...)\n助詞-格助詞-引用\n#\n#  particle-case-compound:
    Compounds of particles and verbs that mainly behave \n#  like case particles.\n#
    \ e.g. という, といった, とかいう, として, とともに, と共に, でもって, にあたって, に当たって, に当って,\n#       にあたり,
    に当たり, に当り, に当たる, にあたる, において, に於いて,に於て, における, に於ける, \n#       にかけ, にかけて, にかんし,
    に関し, にかんして, に関して, にかんする, に関する, に際し, \n#       に際して, にしたがい, に従い, に従う, にしたがって, に従って,
    にたいし, に対し, にたいして, \n#       に対して, にたいする, に対する, について, につき, につけ, につけて, につれ, につれて,
    にとって,\n#       にとり, にまつわる, によって, に依って, に因って, により, に依り, に因り, による, に依る, に因る, \n#
    \      にわたって, にわたる, をもって, を以って, を通じ, を通じて, を通して, をめぐって, をめぐり, をめぐる,\n#       って-口語/,
    ちゅう-関西弁「という」/, (何) ていう (人)-口語/, っていう-口語/, といふ, とかいふ\n助詞-格助詞-連語\n#\n#  particle-conjunctive:\n#
    \ e.g. から, からには, が, けれど, けれども, けど, し, つつ, て, で, と, ところが, どころか, とも, ども, \n#       ながら,
    なり, ので, のに, ば, ものの, や ( した), やいなや, (ころん) じゃ(いけない)-口語/, \n#       (行っ) ちゃ(いけない)-口語/,
    (言っ) たって (しかたがない)-口語/, (それがなく)ったって (平気)-口語/\n助詞-接続助詞\n#\n#  particle-dependency:\n#
    \ e.g. こそ, さえ, しか, すら, は, も, ぞ\n助詞-係助詞\n#\n#  particle-adverbial:\n#  e.g. がてら,
    かも, くらい, 位, ぐらい, しも, (学校) じゃ(これが流行っている)-口語/, \n#       (それ)じゃあ (よくない)-口語/, ずつ,
    (私) なぞ, など, (私) なり (に), (先生) なんか (大嫌い)-口語/,\n#       (私) なんぞ, (先生) なんて (大嫌い)-口語/,
    のみ, だけ, (私) だって-口語/, だに, \n#       (彼)ったら-口語/, (お茶) でも (いかが), 等 (とう), (今後) とも,
    ばかり, ばっか-口語/, ばっかり-口語/,\n#       ほど, 程, まで, 迄, (誰) も (が)([助詞-格助詞] および [助詞-係助詞]
    の前に位置する「も」)\n助詞-副助詞\n#\n#  particle-interjective: particles with interjective
    grammatical roles.\n#  e.g. (松島) や\n助詞-間投助詞\n#\n#  particle-coordinate:\n#  e.g.
    と, たり, だの, だり, とか, なり, や, やら\n助詞-並立助詞\n#\n#  particle-final:\n#  e.g. かい, かしら,
    さ, ぜ, (だ)っけ-口語/, (とまってる) で-方言/, な, ナ, なあ-口語/, ぞ, ね, ネ, \n#       ねぇ-口語/, ねえ-口語/,
    ねん-方言/, の, のう-口語/, や, よ, ヨ, よぉ-口語/, わ, わい-口語/\n助詞-終助詞\n#\n#  particle-adverbial/conjunctive/final:
    The particle \"ka\" when unknown whether it is \n#  adverbial, conjunctive, or
    sentence final. For example:\n#       (a) 「A か B か」. Ex:「(国内で運用する) か,(海外で運用する)
    か (.)」\n#       (b) Inside an adverb phrase. Ex:「(幸いという) か (, 死者はいなかった.)」\n#           「(祈りが届いたせい)
    か (, 試験に合格した.)」\n#       (c) 「かのように」. Ex:「(何もなかった) か (のように振る舞った.)」\n#  e.g. か\n助詞-副助詞／並立助詞／終助詞\n#\n#
    \ particle-adnominalizer: The \"no\" that attaches to nouns and modifies \n#  non-inflectional
    words.\n助詞-連体化\n#\n#  particle-adnominalizer: The \"ni\" and \"to\" that appear
    following nouns and adverbs \n#  that are giongo, giseigo, or gitaigo.\n#  e.g.
    に, と\n助詞-副詞化\n#\n#  particle-special: A particle that does not fit into one of
    the above classifications. \n#  This includes particles that are used in Tanka,
    Haiku, and other poetry.\n#  e.g. かな, けむ, ( しただろう) に, (あんた) にゃ(わからん), (俺) ん (家)\n助詞-特殊\n#\n#####\n#
    \ auxiliary-verb:\n助動詞\n#\n#####\n#  interjection: Greetings and other exclamations.\n#
    \ e.g. おはよう, おはようございます, こんにちは, こんばんは, ありがとう, どうもありがとう, ありがとうございます, \n#       いただきます,
    ごちそうさま, さよなら, さようなら, はい, いいえ, ごめん, ごめんなさい\n#感動詞\n#\n#####\n#  symbol: unclassified
    Symbols.\n記号\n#\n#  symbol-misc: A general symbol not in one of the categories
    below.\n#  e.g. [○◎@$〒→+]\n記号-一般\n#\n#  symbol-comma: Commas\n#  e.g. [,、]\n記号-読点\n#\n#
    \ symbol-period: Periods and full stops.\n#  e.g. [.．。]\n記号-句点\n#\n#  symbol-space:
    Full-width whitespace.\n記号-空白\n#\n#  symbol-open_bracket:\n#  e.g. [({‘“『【]\n記号-括弧開\n#\n#
    \ symbol-close_bracket:\n#  e.g. [)}’”』」】]\n記号-括弧閉\n#\n#  symbol-alphabetic:\n#記号-アルファベット\n#\n#####\n#
    \ other: unclassified other\n#その他\n#\n#  other-interjection: Words that are hard
    to classify as noun-suffixes or \n#  sentence-final particles.\n#  e.g. (だ)ァ\nその他-間投\n#\n#####\n#
    \ filler: Aizuchi that occurs during a conversation or sounds inserted as filler.\n#
    \ e.g. あの, うんと, えと\nフィラー\n#\n#####\n#  non-verbal: non-verbal sound.\n非言語音\n#\n#####\n#
    \ fragment:\n#語断片\n#\n#####\n#  unknown: unknown part of speech.\n#未知語\n#\n#####
    End of file\n"
  stopwords_ar.txt: "# This file was created by Jacques Savoy and is distributed under
    the BSD license.\n# See http://members.unine.ch/jacques.savoy/clef/index.html.\n#
    Also see http://www.opensource.org/licenses/bsd-license.html\n# Cleaned on October
    11, 2009 (not normalized, so use before normalization)\n# This means that when
    modifying this list, you might need to add some \n# redundant entries, for example
    containing forms with both أ and ا\nمن\nومن\nمنها\nمنه\nفي\nوفي\nفيها\nفيه\nو\nف\nثم\nاو\nأو\nب\nبها\nبه\nا\nأ\nاى\nاي\nأي\nأى\nلا\nولا\nالا\nألا\nإلا\nلكن\nما\nوما\nكما\nفما\nعن\nمع\nاذا\nإذا\nان\nأن\nإن\nانها\nأنها\nإنها\nانه\nأنه\nإنه\nبان\nبأن\nفان\nفأن\nوان\nوأن\nوإن\nالتى\nالتي\nالذى\nالذي\nالذين\nالى\nالي\nإلى\nإلي\nعلى\nعليها\nعليه\nاما\nأما\nإما\nايضا\nأيضا\nكل\nوكل\nلم\nولم\nلن\nولن\nهى\nهي\nهو\nوهى\nوهي\nوهو\nفهى\nفهي\nفهو\nانت\nأنت\nلك\nلها\nله\nهذه\nهذا\nتلك\nذلك\nهناك\nكانت\nكان\nيكون\nتكون\nوكانت\nوكان\nغير\nبعض\nقد\nنحو\nبين\nبينما\nمنذ\nضمن\nحيث\nالان\nالآن\nخلال\nبعد\nقبل\nحتى\nعند\nعندما\nلدى\nجميع\n"
  stopwords_bg.txt: |
    # This file was created by Jacques Savoy and is distributed under the BSD license.
    # See http://members.unine.ch/jacques.savoy/clef/index.html.
    # Also see http://www.opensource.org/licenses/bsd-license.html
    а
    аз
    ако
    ала
    бе
    без
    беше
    би
    бил
    била
    били
    било
    близо
    бъдат
    бъде
    бяха
    в
    вас
    ваш
    ваша
    вероятно
    вече
    взема
    ви
    вие
    винаги
    все
    всеки
    всички
    всичко
    всяка
    във
    въпреки
    върху
    г
    ги
    главно
    го
    д
    да
    дали
    до
    докато
    докога
    дори
    досега
    доста
    е
    едва
    един
    ето
    за
    зад
    заедно
    заради
    засега
    затова
    защо
    защото
    и
    из
    или
    им
    има
    имат
    иска
    й
    каза
    как
    каква
    какво
    както
    какъв
    като
    кога
    когато
    което
    които
    кой
    който
    колко
    която
    къде
    където
    към
    ли
    м
    ме
    между
    мен
    ми
    мнозина
    мога
    могат
    може
    моля
    момента
    му
    н
    на
    над
    назад
    най
    направи
    напред
    например
    нас
    не
    него
    нея
    ни
    ние
    никой
    нито
    но
    някои
    някой
    няма
    обаче
    около
    освен
    особено
    от
    отгоре
    отново
    още
    пак
    по
    повече
    повечето
    под
    поне
    поради
    после
    почти
    прави
    пред
    преди
    през
    при
    пък
    първо
    с
    са
    само
    се
    сега
    си
    скоро
    след
    сме
    според
    сред
    срещу
    сте
    съм
    със
    също
    т
    тази
    така
    такива
    такъв
    там
    твой
    те
    тези
    ти
    тн
    то
    това
    тогава
    този
    той
    толкова
    точно
    трябва
    тук
    тъй
    тя
    тях
    у
    харесва
    ч
    че
    често
    чрез
    ще
    щом
    я
  stopwords_ca.txt: "# Catalan stopwords from http://github.com/vcl/cue.language (Apache
    2 Licensed)\na\nabans\nací\nah\naixí\naixò\nal\nals\naleshores\nalgun\nalguna\nalgunes\nalguns\nalhora\nallà\nallí\nallò\naltra\naltre\naltres\namb\nambdós\nambdues\napa\naquell\naquella\naquelles\naquells\naquest\naquesta\naquestes\naquests\naquí\nbaix\ncada\ncadascú\ncadascuna\ncadascunes\ncadascuns\ncom\ncontra\nd'un\nd'una\nd'unes\nd'uns\ndalt\nde\ndel\ndels\ndes\ndesprés\ndins\ndintre\ndonat\ndoncs\ndurant\ne\neh\nel\nels\nem\nen\nencara\nens\nentre\nérem\neren\néreu\nes\nés\nesta\nestà\nestàvem\nestaven\nestàveu\nesteu\net\netc\nets\nfins\nfora\ngairebé\nha\nhan\nhas\nhavia\nhe\nhem\nheu\nhi
    \nho\ni\nigual\niguals\nja\nl'hi\nla\nles\nli\nli'n\nllavors\nm'he\nma\nmal\nmalgrat\nmateix\nmateixa\nmateixes\nmateixos\nme\nmentre\nmés\nmeu\nmeus\nmeva\nmeves\nmolt\nmolta\nmoltes\nmolts\nmon\nmons\nn'he\nn'hi\nne\nni\nno\nnogensmenys\nnomés\nnosaltres\nnostra\nnostre\nnostres\no\noh\noi\non\npas\npel\npels\nper\nperò\nperquè\npoc
    \npoca\npocs\npoques\npotser\npropi\nqual\nquals\nquan\nquant \nque\nquè\nquelcom\nqui\nquin\nquina\nquines\nquins\ns'ha\ns'han\nsa\nsemblant\nsemblants\nses\nseu
    \nseus\nseva\nseva\nseves\nsi\nsobre\nsobretot\nsóc\nsolament\nsols\nson \nsón\nsons
    \nsota\nsou\nt'ha\nt'han\nt'he\nta\ntal\ntambé\ntampoc\ntan\ntant\ntanta\ntantes\nteu\nteus\nteva\nteves\nton\ntons\ntot\ntota\ntotes\ntots\nun\nuna\nunes\nuns\nus\nva\nvaig\nvam\nvan\nvas\nveu\nvosaltres\nvostra\nvostre\nvostres\n"
  stopwords_cz.txt: |
    a
    s
    k
    o
    i
    u
    v
    z
    dnes
    cz
    tímto
    budeš
    budem
    byli
    jseš
    můj
    svým
    ta
    tomto
    tohle
    tuto
    tyto
    jej
    zda
    proč
    máte
    tato
    kam
    tohoto
    kdo
    kteří
    mi
    nám
    tom
    tomuto
    mít
    nic
    proto
    kterou
    byla
    toho
    protože
    asi
    ho
    naši
    napište
    re
    což
    tím
    takže
    svých
    její
    svými
    jste
    aj
    tu
    tedy
    teto
    bylo
    kde
    ke
    pravé
    ji
    nad
    nejsou
    či
    pod
    téma
    mezi
    přes
    ty
    pak
    vám
    ani
    když
    však
    neg
    jsem
    tento
    článku
    články
    aby
    jsme
    před
    pta
    jejich
    byl
    ještě
    až
    bez
    také
    pouze
    první
    vaše
    která
    nás
    nový
    tipy
    pokud
    může
    strana
    jeho
    své
    jiné
    zprávy
    nové
    není
    vás
    jen
    podle
    zde
    už
    být
    více
    bude
    již
    než
    který
    by
    které
    co
    nebo
    ten
    tak
    má
    při
    od
    po
    jsou
    jak
    další
    ale
    si
    se
    ve
    to
    jako
    za
    zpět
    ze
    do
    pro
    je
    na
    atd
    atp
    jakmile
    přičemž
    já
    on
    ona
    ono
    oni
    ony
    my
    vy
    jí
    ji
    mě
    mne
    jemu
    tomu
    těm
    těmu
    němu
    němuž
    jehož
    jíž
    jelikož
    jež
    jakož
    načež
  stopwords_da.txt: |2
     | From svn.tartarus.org/snowball/trunk/website/algorithms/danish/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A Danish stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.

     | This is a ranked list (commonest to rarest) of stopwords derived from
     | a large text sample.


    og           | and
    i            | in
    jeg          | I
    det          | that (dem. pronoun)/it (pers. pronoun)
    at           | that (in front of a sentence)/to (with infinitive)
    en           | a/an
    den          | it (pers. pronoun)/that (dem. pronoun)
    til          | to/at/for/until/against/by/of/into, more
    er           | present tense of "to be"
    som          | who, as
    på           | on/upon/in/on/at/to/after/of/with/for, on
    de           | they
    med          | with/by/in, along
    han          | he
    af           | of/by/from/off/for/in/with/on, off
    for          | at/for/to/from/by/of/ago, in front/before, because
    ikke         | not
    der          | who/which, there/those
    var          | past tense of "to be"
    mig          | me/myself
    sig          | oneself/himself/herself/itself/themselves
    men          | but
    et           | a/an/one, one (number), someone/somebody/one
    har          | present tense of "to have"
    om           | round/about/for/in/a, about/around/down, if
    vi           | we
    min          | my
    havde        | past tense of "to have"
    ham          | him
    hun          | she
    nu           | now
    over         | over/above/across/by/beyond/past/on/about, over/past
    da           | then, when/as/since
    fra          | from/off/since, off, since
    du           | you
    ud           | out
    sin          | his/her/its/one's
    dem          | them
    os           | us/ourselves
    op           | up
    man          | you/one
    hans         | his
    hvor         | where
    eller        | or
    hvad         | what
    skal         | must/shall etc.
    selv         | myself/youself/herself/ourselves etc., even
    her          | here
    alle         | all/everyone/everybody etc.
    vil          | will (verb)
    blev         | past tense of "to stay/to remain/to get/to become"
    kunne        | could
    ind          | in
    når          | when
    være         | present tense of "to be"
    dog          | however/yet/after all
    noget        | something
    ville        | would
    jo           | you know/you see (adv), yes
    deres        | their/theirs
    efter        | after/behind/according to/for/by/from, later/afterwards
    ned          | down
    skulle       | should
    denne        | this
    end          | than
    dette        | this
    mit          | my/mine
    også         | also
    under        | under/beneath/below/during, below/underneath
    have         | have
    dig          | you
    anden        | other
    hende        | her
    mine         | my
    alt          | everything
    meget        | much/very, plenty of
    sit          | his, her, its, one's
    sine         | his, her, its, one's
    vor          | our
    mod          | against
    disse        | these
    hvis         | if
    din          | your/yours
    nogle        | some
    hos          | by/at
    blive        | be/become
    mange        | many
    ad           | by/through
    bliver       | present tense of "to be/to become"
    hendes       | her/hers
    været        | be
    thi          | for (conj)
    jer          | you
    sådan        | such, like this/like that
  stopwords_de.txt: |2+
     | From svn.tartarus.org/snowball/trunk/website/algorithms/german/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A German stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.

     | The number of forms in this list is reduced significantly by passing it
     | through the German stemmer.


    aber           |  but

    alle           |  all
    allem
    allen
    aller
    alles

    als            |  than, as
    also           |  so
    am             |  an + dem
    an             |  at

    ander          |  other
    andere
    anderem
    anderen
    anderer
    anderes
    anderm
    andern
    anderr
    anders

    auch           |  also
    auf            |  on
    aus            |  out of
    bei            |  by
    bin            |  am
    bis            |  until
    bist           |  art
    da             |  there
    damit          |  with it
    dann           |  then

    der            |  the
    den
    des
    dem
    die
    das

    daß            |  that

    derselbe       |  the same
    derselben
    denselben
    desselben
    demselben
    dieselbe
    dieselben
    dasselbe

    dazu           |  to that

    dein           |  thy
    deine
    deinem
    deinen
    deiner
    deines

    denn           |  because

    derer          |  of those
    dessen         |  of him

    dich           |  thee
    dir            |  to thee
    du             |  thou

    dies           |  this
    diese
    diesem
    diesen
    dieser
    dieses


    doch           |  (several meanings)
    dort           |  (over) there


    durch          |  through

    ein            |  a
    eine
    einem
    einen
    einer
    eines

    einig          |  some
    einige
    einigem
    einigen
    einiger
    einiges

    einmal         |  once

    er             |  he
    ihn            |  him
    ihm            |  to him

    es             |  it
    etwas          |  something

    euer           |  your
    eure
    eurem
    euren
    eurer
    eures

    für            |  for
    gegen          |  towards
    gewesen        |  p.p. of sein
    hab            |  have
    habe           |  have
    haben          |  have
    hat            |  has
    hatte          |  had
    hatten         |  had
    hier           |  here
    hin            |  there
    hinter         |  behind

    ich            |  I
    mich           |  me
    mir            |  to me


    ihr            |  you, to her
    ihre
    ihrem
    ihren
    ihrer
    ihres
    euch           |  to you

    im             |  in + dem
    in             |  in
    indem          |  while
    ins            |  in + das
    ist            |  is

    jede           |  each, every
    jedem
    jeden
    jeder
    jedes

    jene           |  that
    jenem
    jenen
    jener
    jenes

    jetzt          |  now
    kann           |  can

    kein           |  no
    keine
    keinem
    keinen
    keiner
    keines

    können         |  can
    könnte         |  could
    machen         |  do
    man            |  one

    manche         |  some, many a
    manchem
    manchen
    mancher
    manches

    mein           |  my
    meine
    meinem
    meinen
    meiner
    meines

    mit            |  with
    muss           |  must
    musste         |  had to
    nach           |  to(wards)
    nicht          |  not
    nichts         |  nothing
    noch           |  still, yet
    nun            |  now
    nur            |  only
    ob             |  whether
    oder           |  or
    ohne           |  without
    sehr           |  very

    sein           |  his
    seine
    seinem
    seinen
    seiner
    seines

    selbst         |  self
    sich           |  herself

    sie            |  they, she
    ihnen          |  to them

    sind           |  are
    so             |  so

    solche         |  such
    solchem
    solchen
    solcher
    solches

    soll           |  shall
    sollte         |  should
    sondern        |  but
    sonst          |  else
    über           |  over
    um             |  about, around
    und            |  and

    uns            |  us
    unse
    unsem
    unsen
    unser
    unses

    unter          |  under
    viel           |  much
    vom            |  von + dem
    von            |  from
    vor            |  before
    während        |  while
    war            |  was
    waren          |  were
    warst          |  wast
    was            |  what
    weg            |  away, off
    weil           |  because
    weiter         |  further

    welche         |  which
    welchem
    welchen
    welcher
    welches

    wenn           |  when
    werde          |  will
    werden         |  will
    wie            |  how
    wieder         |  again
    will           |  want
    wir            |  we
    wird           |  will
    wirst          |  willst
    wo             |  where
    wollen         |  want
    wollte         |  wanted
    würde          |  would
    würden         |  would
    zu             |  to
    zum            |  zu + dem
    zur            |  zu + der
    zwar           |  indeed
    zwischen       |  between

  stopwords_el.txt: "# Lucene Greek Stopwords list\n# Note: by default this file is
    used after GreekLowerCaseFilter,\n# so when modifying this file use 'σ' instead
    of 'ς' \nο\nη\nτο\nοι\nτα\nτου\nτησ\nτων\nτον\nτην\nκαι \nκι\nκ\nειμαι\nεισαι\nειναι\nειμαστε\nειστε\nστο\nστον\nστη\nστην\nμα\nαλλα\nαπο\nγια\nπροσ\nμε\nσε\nωσ\nπαρα\nαντι\nκατα\nμετα\nθα\nνα\nδε\nδεν\nμη\nμην\nεπι\nενω\nεαν\nαν\nτοτε\nπου\nπωσ\nποιοσ\nποια\nποιο\nποιοι\nποιεσ\nποιων\nποιουσ\nαυτοσ\nαυτη\nαυτο\nαυτοι\nαυτων\nαυτουσ\nαυτεσ\nαυτα\nεκεινοσ\nεκεινη\nεκεινο\nεκεινοι\nεκεινεσ\nεκεινα\nεκεινων\nεκεινουσ\nοπωσ\nομωσ\nισωσ\nοσο\nοτι\n"
  stopwords_en.txt: |
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # a couple of test stopwords to test that the words are really being
    # configured from this file:
    stopworda
    stopwordb

    # Standard english stop words taken from Lucene's StopAnalyzer
    a
    an
    and
    are
    as
    at
    be
    but
    by
    for
    if
    in
    into
    is
    it
    no
    not
    of
    on
    or
    such
    that
    the
    their
    then
    there
    these
    they
    this
    to
    was
    will
    with
  stopwords_es.txt: |2+
     | From svn.tartarus.org/snowball/trunk/website/algorithms/spanish/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A Spanish stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.


     | The following is a ranked list (commonest to rarest) of stopwords
     | deriving from a large sample of text.

     | Extra words have been added at the end.

    de             |  from, of
    la             |  the, her
    que            |  who, that
    el             |  the
    en             |  in
    y              |  and
    a              |  to
    los            |  the, them
    del            |  de + el
    se             |  himself, from him etc
    las            |  the, them
    por            |  for, by, etc
    un             |  a
    para           |  for
    con            |  with
    no             |  no
    una            |  a
    su             |  his, her
    al             |  a + el
      | es         from SER
    lo             |  him
    como           |  how
    más            |  more
    pero           |  pero
    sus            |  su plural
    le             |  to him, her
    ya             |  already
    o              |  or
      | fue        from SER
    este           |  this
      | ha         from HABER
    sí             |  himself etc
    porque         |  because
    esta           |  this
      | son        from SER
    entre          |  between
      | está     from ESTAR
    cuando         |  when
    muy            |  very
    sin            |  without
    sobre          |  on
      | ser        from SER
      | tiene      from TENER
    también        |  also
    me             |  me
    hasta          |  until
    hay            |  there is/are
    donde          |  where
      | han        from HABER
    quien          |  whom, that
      | están      from ESTAR
      | estado     from ESTAR
    desde          |  from
    todo           |  all
    nos            |  us
    durante        |  during
      | estados    from ESTAR
    todos          |  all
    uno            |  a
    les            |  to them
    ni             |  nor
    contra         |  against
    otros          |  other
      | fueron     from SER
    ese            |  that
    eso            |  that
      | había      from HABER
    ante           |  before
    ellos          |  they
    e              |  and (variant of y)
    esto           |  this
    mí             |  me
    antes          |  before
    algunos        |  some
    qué            |  what?
    unos           |  a
    yo             |  I
    otro           |  other
    otras          |  other
    otra           |  other
    él             |  he
    tanto          |  so much, many
    esa            |  that
    estos          |  these
    mucho          |  much, many
    quienes        |  who
    nada           |  nothing
    muchos         |  many
    cual           |  who
      | sea        from SER
    poco           |  few
    ella           |  she
    estar          |  to be
      | haber      from HABER
    estas          |  these
      | estaba     from ESTAR
      | estamos    from ESTAR
    algunas        |  some
    algo           |  something
    nosotros       |  we

          | other forms

    mi             |  me
    mis            |  mi plural
    tú             |  thou
    te             |  thee
    ti             |  thee
    tu             |  thy
    tus            |  tu plural
    ellas          |  they
    nosotras       |  we
    vosotros       |  you
    vosotras       |  you
    os             |  you
    mío            |  mine
    mía            |
    míos           |
    mías           |
    tuyo           |  thine
    tuya           |
    tuyos          |
    tuyas          |
    suyo           |  his, hers, theirs
    suya           |
    suyos          |
    suyas          |
    nuestro        |  ours
    nuestra        |
    nuestros       |
    nuestras       |
    vuestro        |  yours
    vuestra        |
    vuestros       |
    vuestras       |
    esos           |  those
    esas           |  those

                   | forms of estar, to be (not including the infinitive):
    estoy
    estás
    está
    estamos
    estáis
    están
    esté
    estés
    estemos
    estéis
    estén
    estaré
    estarás
    estará
    estaremos
    estaréis
    estarán
    estaría
    estarías
    estaríamos
    estaríais
    estarían
    estaba
    estabas
    estábamos
    estabais
    estaban
    estuve
    estuviste
    estuvo
    estuvimos
    estuvisteis
    estuvieron
    estuviera
    estuvieras
    estuviéramos
    estuvierais
    estuvieran
    estuviese
    estuvieses
    estuviésemos
    estuvieseis
    estuviesen
    estando
    estado
    estada
    estados
    estadas
    estad

                   | forms of haber, to have (not including the infinitive):
    he
    has
    ha
    hemos
    habéis
    han
    haya
    hayas
    hayamos
    hayáis
    hayan
    habré
    habrás
    habrá
    habremos
    habréis
    habrán
    habría
    habrías
    habríamos
    habríais
    habrían
    había
    habías
    habíamos
    habíais
    habían
    hube
    hubiste
    hubo
    hubimos
    hubisteis
    hubieron
    hubiera
    hubieras
    hubiéramos
    hubierais
    hubieran
    hubiese
    hubieses
    hubiésemos
    hubieseis
    hubiesen
    habiendo
    habido
    habida
    habidos
    habidas

                   | forms of ser, to be (not including the infinitive):
    soy
    eres
    es
    somos
    sois
    son
    sea
    seas
    seamos
    seáis
    sean
    seré
    serás
    será
    seremos
    seréis
    serán
    sería
    serías
    seríamos
    seríais
    serían
    era
    eras
    éramos
    erais
    eran
    fui
    fuiste
    fue
    fuimos
    fuisteis
    fueron
    fuera
    fueras
    fuéramos
    fuerais
    fueran
    fuese
    fueses
    fuésemos
    fueseis
    fuesen
    siendo
    sido
      |  sed also means 'thirst'

                   | forms of tener, to have (not including the infinitive):
    tengo
    tienes
    tiene
    tenemos
    tenéis
    tienen
    tenga
    tengas
    tengamos
    tengáis
    tengan
    tendré
    tendrás
    tendrá
    tendremos
    tendréis
    tendrán
    tendría
    tendrías
    tendríamos
    tendríais
    tendrían
    tenía
    tenías
    teníamos
    teníais
    tenían
    tuve
    tuviste
    tuvo
    tuvimos
    tuvisteis
    tuvieron
    tuviera
    tuvieras
    tuviéramos
    tuvierais
    tuvieran
    tuviese
    tuvieses
    tuviésemos
    tuvieseis
    tuviesen
    teniendo
    tenido
    tenida
    tenidos
    tenidas
    tened

  stopwords_eu.txt: |
    # example set of basque stopwords
    al
    anitz
    arabera
    asko
    baina
    bat
    batean
    batek
    bati
    batzuei
    batzuek
    batzuetan
    batzuk
    bera
    beraiek
    berau
    berauek
    bere
    berori
    beroriek
    beste
    bezala
    da
    dago
    dira
    ditu
    du
    dute
    edo
    egin
    ere
    eta
    eurak
    ez
    gainera
    gu
    gutxi
    guzti
    haiei
    haiek
    haietan
    hainbeste
    hala
    han
    handik
    hango
    hara
    hari
    hark
    hartan
    hau
    hauei
    hauek
    hauetan
    hemen
    hemendik
    hemengo
    hi
    hona
    honek
    honela
    honetan
    honi
    hor
    hori
    horiei
    horiek
    horietan
    horko
    horra
    horrek
    horrela
    horretan
    horri
    hortik
    hura
    izan
    ni
    noiz
    nola
    non
    nondik
    nongo
    nor
    nora
    ze
    zein
    zen
    zenbait
    zenbat
    zer
    zergatik
    ziren
    zituen
    zu
    zuek
    zuen
    zuten
  stopwords_fa.txt: |
    # This file was created by Jacques Savoy and is distributed under the BSD license.
    # See http://members.unine.ch/jacques.savoy/clef/index.html.
    # Also see http://www.opensource.org/licenses/bsd-license.html
    # Note: by default this file is used after normalization, so when adding entries
    # to this file, use the arabic 'ي' instead of 'ی'
    انان
    نداشته
    سراسر
    خياه
    ايشان
    وي
    تاكنون
    بيشتري
    دوم
    پس
    ناشي
    وگو
    يا
    داشتند
    سپس
    هنگام
    هرگز
    پنج
    نشان
    امسال
    ديگر
    گروهي
    شدند
    چطور
    ده
    و
    دو
    نخستين
    ولي
    چرا
    چه
    وسط
    ه
    كدام
    قابل
    يك
    رفت
    هفت
    همچنين
    در
    هزار
    بله
    بلي
    شايد
    اما
    شناسي
    گرفته
    دهد
    داشته
    دانست
    داشتن
    خواهيم
    ميليارد
    وقتيكه
    امد
    خواهد
    جز
    اورده
    شده
    بلكه
    خدمات
    شدن
    برخي
    نبود
    بسياري
    جلوگيري
    حق
    كردند
    نوعي
    بعري
    نكرده
    نظير
    نبايد
    بوده
    بودن
    داد
    اورد
    هست
    جايي
    شود
    دنبال
    داده
    بايد
    سابق
    هيچ
    همان
    انجا
    كمتر
    كجاست
    گردد
    كسي
    تر
    مردم
    تان
    دادن
    بودند
    سري
    جدا
    ندارند
    مگر
    يكديگر
    دارد
    دهند
    بنابراين
    هنگامي
    سمت
    جا
    انچه
    خود
    دادند
    زياد
    دارند
    اثر
    بدون
    بهترين
    بيشتر
    البته
    به
    براساس
    بيرون
    كرد
    بعضي
    گرفت
    توي
    اي
    ميليون
    او
    جريان
    تول
    بر
    مانند
    برابر
    باشيم
    مدتي
    گويند
    اكنون
    تا
    تنها
    جديد
    چند
    بي
    نشده
    كردن
    كردم
    گويد
    كرده
    كنيم
    نمي
    نزد
    روي
    قصد
    فقط
    بالاي
    ديگران
    اين
    ديروز
    توسط
    سوم
    ايم
    دانند
    سوي
    استفاده
    شما
    كنار
    داريم
    ساخته
    طور
    امده
    رفته
    نخست
    بيست
    نزديك
    طي
    كنيد
    از
    انها
    تمامي
    داشت
    يكي
    طريق
    اش
    چيست
    روب
    نمايد
    گفت
    چندين
    چيزي
    تواند
    ام
    ايا
    با
    ان
    ايد
    ترين
    اينكه
    ديگري
    راه
    هايي
    بروز
    همچنان
    پاعين
    كس
    حدود
    مختلف
    مقابل
    چيز
    گيرد
    ندارد
    ضد
    همچون
    سازي
    شان
    مورد
    باره
    مرسي
    خويش
    برخوردار
    چون
    خارج
    شش
    هنوز
    تحت
    ضمن
    هستيم
    گفته
    فكر
    بسيار
    پيش
    براي
    روزهاي
    انكه
    نخواهد
    بالا
    كل
    وقتي
    كي
    چنين
    كه
    گيري
    نيست
    است
    كجا
    كند
    نيز
    يابد
    بندي
    حتي
    توانند
    عقب
    خواست
    كنند
    بين
    تمام
    همه
    ما
    باشند
    مثل
    شد
    اري
    باشد
    اره
    طبق
    بعد
    اگر
    صورت
    غير
    جاي
    بيش
    ريزي
    اند
    زيرا
    چگونه
    بار
    لطفا
    مي
    درباره
    من
    ديده
    همين
    گذاري
    برداري
    علت
    گذاشته
    هم
    فوق
    نه
    ها
    شوند
    اباد
    همواره
    هر
    اول
    خواهند
    چهار
    نام
    امروز
    مان
    هاي
    قبل
    كنم
    سعي
    تازه
    را
    هستند
    زير
    جلوي
    عنوان
    بود
  stopwords_fi.txt: " | From svn.tartarus.org/snowball/trunk/website/algorithms/finnish/stop.txt\n
    | This file is distributed under the BSD License.\n | See http://snowball.tartarus.org/license.php\n
    | Also see http://www.opensource.org/licenses/bsd-license.html\n |  - Encoding
    was converted to UTF-8.\n |  - This notice was added.\n |\n | NOTE: To use this
    file with StopFilterFactory, you must specify format=\"snowball\"\n \n| forms
    of BE\n\nolla\nolen\nolet\non\nolemme\nolette\novat\nole        | negative form\n\noli\nolisi\nolisit\nolisin\nolisimme\nolisitte\nolisivat\nolit\nolin\nolimme\nolitte\nolivat\nollut\nolleet\n\nen
    \        | negation\net\nei\nemme\nette\neivät\n\n|Nom   Gen    Acc    Part   Iness
    \  Elat    Illat  Adess   Ablat   Allat   Ess    Trans\nminä   minun  minut  minua
    \ minussa minusta minuun minulla minulta minulle               | I\nsinä   sinun
    \ sinut  sinua  sinussa sinusta sinuun sinulla sinulta sinulle               |
    you\nhän    hänen  hänet  häntä  hänessä hänestä häneen hänellä häneltä hänelle
    \              | he she\nme     meidän meidät meitä  meissä  meistä  meihin meillä
    \ meiltä  meille                | we\nte     teidän teidät teitä  teissä  teistä
    \ teihin teillä  teiltä  teille                | you\nhe     heidän heidät heitä
    \ heissä  heistä  heihin heillä  heiltä  heille                | they\n\ntämä
    \  tämän         tätä   tässä   tästä   tähän  tallä   tältä   tälle   tänä   täksi
    \ | this\ntuo    tuon          tuotä  tuossa  tuosta  tuohon tuolla  tuolta  tuolle
    \ tuona  tuoksi | that\nse     sen           sitä   siinä   siitä   siihen sillä
    \  siltä   sille   sinä   siksi  | it\nnämä   näiden        näitä  näissä  näistä
    \ näihin näillä  näiltä  näille  näinä  näiksi | these\nnuo    noiden        noita
    \ noissa  noista  noihin noilla  noilta  noille  noina  noiksi | those\nne     niiden
    \       niitä  niissä  niistä  niihin niillä  niiltä  niille  niinä  niiksi |
    they\n\nkuka   kenen kenet   ketä   kenessä kenestä keneen kenellä keneltä kenelle
    kenenä keneksi| who\nketkä  keiden ketkä  keitä  keissä  keistä  keihin keillä
    \ keiltä  keille  keinä  keiksi | (pl)\nmikä   minkä minkä   mitä   missä   mistä
    \  mihin  millä   miltä   mille   minä   miksi  | which what\nmitkä                                                                                    |
    (pl)\n\njoka   jonka         jota   jossa   josta   johon  jolla   jolta   jolle
    \  jona   joksi  | who which\njotka  joiden        joita  joissa  joista  joihin
    joilla  joilta  joille  joina  joiksi | (pl)\n\n| conjunctions\n\nettä   | that\nja
    \    | and\njos    | if\nkoska  | because\nkuin   | than\nmutta  | but\nniin   |
    so\nsekä   | and\nsillä  | for\ntai    | or\nvaan   | but\nvai    | or\nvaikka
    | although\n\n\n| prepositions\n\nkanssa  | with\nmukaan  | according to\nnoin
    \   | about\npoikki  | across\nyli     | over, across\n\n| other\n\nkun    | when\nniin
    \  | so\nnyt    | now\nitse   | self\n\n"
  stopwords_fr.txt: |2+
     | From svn.tartarus.org/snowball/trunk/website/algorithms/french/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A French stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.

    au             |  a + le
    aux            |  a + les
    avec           |  with
    ce             |  this
    ces            |  these
    dans           |  with
    de             |  of
    des            |  de + les
    du             |  de + le
    elle           |  she
    en             |  `of them' etc
    et             |  and
    eux            |  them
    il             |  he
    je             |  I
    la             |  the
    le             |  the
    leur           |  their
    lui            |  him
    ma             |  my (fem)
    mais           |  but
    me             |  me
    même           |  same; as in moi-même (myself) etc
    mes            |  me (pl)
    moi            |  me
    mon            |  my (masc)
    ne             |  not
    nos            |  our (pl)
    notre          |  our
    nous           |  we
    on             |  one
    ou             |  where
    par            |  by
    pas            |  not
    pour           |  for
    qu             |  que before vowel
    que            |  that
    qui            |  who
    sa             |  his, her (fem)
    se             |  oneself
    ses            |  his (pl)
    son            |  his, her (masc)
    sur            |  on
    ta             |  thy (fem)
    te             |  thee
    tes            |  thy (pl)
    toi            |  thee
    ton            |  thy (masc)
    tu             |  thou
    un             |  a
    une            |  a
    vos            |  your (pl)
    votre          |  your
    vous           |  you

                   |  single letter forms

    c              |  c'
    d              |  d'
    j              |  j'
    l              |  l'
    à              |  to, at
    m              |  m'
    n              |  n'
    s              |  s'
    t              |  t'
    y              |  there

                   | forms of être (not including the infinitive):
    été
    étée
    étées
    étés
    étant
    suis
    es
    est
    sommes
    êtes
    sont
    serai
    seras
    sera
    serons
    serez
    seront
    serais
    serait
    serions
    seriez
    seraient
    étais
    était
    étions
    étiez
    étaient
    fus
    fut
    fûmes
    fûtes
    furent
    sois
    soit
    soyons
    soyez
    soient
    fusse
    fusses
    fût
    fussions
    fussiez
    fussent

                   | forms of avoir (not including the infinitive):
    ayant
    eu
    eue
    eues
    eus
    ai
    as
    avons
    avez
    ont
    aurai
    auras
    aura
    aurons
    aurez
    auront
    aurais
    aurait
    aurions
    auriez
    auraient
    avais
    avait
    avions
    aviez
    avaient
    eut
    eûmes
    eûtes
    eurent
    aie
    aies
    ait
    ayons
    ayez
    aient
    eusse
    eusses
    eût
    eussions
    eussiez
    eussent

                   | Later additions (from Jean-Christophe Deschamps)
    ceci           |  this
    cela           |  that
    celà           |  that
    cet            |  this
    cette          |  this
    ici            |  here
    ils            |  they
    les            |  the (pl)
    leurs          |  their (pl)
    quel           |  which
    quels          |  which
    quelle         |  which
    quelles        |  which
    sans           |  without
    soi            |  oneself

  stopwords_ga.txt: |2

    a
    ach
    ag
    agus
    an
    aon
    ar
    arna
    as
    b'
    ba
    beirt
    bhúr
    caoga
    ceathair
    ceathrar
    chomh
    chtó
    chuig
    chun
    cois
    céad
    cúig
    cúigear
    d'
    daichead
    dar
    de
    deich
    deichniúr
    den
    dhá
    do
    don
    dtí
    dá
    dár
    dó
    faoi
    faoin
    faoina
    faoinár
    fara
    fiche
    gach
    gan
    go
    gur
    haon
    hocht
    i
    iad
    idir
    in
    ina
    ins
    inár
    is
    le
    leis
    lena
    lenár
    m'
    mar
    mo
    mé
    na
    nach
    naoi
    naonúr
    ná
    ní
    níor
    nó
    nócha
    ocht
    ochtar
    os
    roimh
    sa
    seacht
    seachtar
    seachtó
    seasca
    seisear
    siad
    sibh
    sinn
    sna
    sé
    sí
    tar
    thar
    thú
    triúr
    trí
    trína
    trínár
    tríocha
    tú
    um
    ár
    é
    éis
    í
    ó
    ón
    óna
    ónár
  stopwords_gl.txt: |
    # galican stopwords
    a
    aínda
    alí
    aquel
    aquela
    aquelas
    aqueles
    aquilo
    aquí
    ao
    aos
    as
    así
    á
    ben
    cando
    che
    co
    coa
    comigo
    con
    connosco
    contigo
    convosco
    coas
    cos
    cun
    cuns
    cunha
    cunhas
    da
    dalgunha
    dalgunhas
    dalgún
    dalgúns
    das
    de
    del
    dela
    delas
    deles
    desde
    deste
    do
    dos
    dun
    duns
    dunha
    dunhas
    e
    el
    ela
    elas
    eles
    en
    era
    eran
    esa
    esas
    ese
    eses
    esta
    estar
    estaba
    está
    están
    este
    estes
    estiven
    estou
    eu
    é
    facer
    foi
    foron
    fun
    había
    hai
    iso
    isto
    la
    las
    lle
    lles
    lo
    los
    mais
    me
    meu
    meus
    min
    miña
    miñas
    moi
    na
    nas
    neste
    nin
    no
    non
    nos
    nosa
    nosas
    noso
    nosos
    nós
    nun
    nunha
    nuns
    nunhas
    o
    os
    ou
    ó
    ós
    para
    pero
    pode
    pois
    pola
    polas
    polo
    polos
    por
    que
    se
    senón
    ser
    seu
    seus
    sexa
    sido
    sobre
    súa
    súas
    tamén
    tan
    te
    ten
    teñen
    teño
    ter
    teu
    teus
    ti
    tido
    tiña
    tiven
    túa
    túas
    un
    unha
    unhas
    uns
    vos
    vosa
    vosas
    voso
    vosos
    vós
  stopwords_hi.txt: "# Also see http://www.opensource.org/licenses/bsd-license.html\n#
    See http://members.unine.ch/jacques.savoy/clef/index.html.\n# This file was created
    by Jacques Savoy and is distributed under the BSD license.\n# Note: by default
    this file also contains forms normalized by HindiNormalizer \n# for spelling variation
    (see section below), such that it can be used whether or \n# not you enable that
    feature. When adding additional entries to this list,\n# please add the normalized
    form as well. \nअंदर\nअत\nअपना\nअपनी\nअपने\nअभी\nआदि\nआप\nइत्यादि\nइन \nइनका\nइन्हीं\nइन्हें\nइन्हों\nइस\nइसका\nइसकी\nइसके\nइसमें\nइसी\nइसे\nउन\nउनका\nउनकी\nउनके\nउनको\nउन्हीं\nउन्हें\nउन्हों\nउस\nउसके\nउसी\nउसे\nएक\nएवं\nएस\nऐसे\nऔर\nकई\nकर\nकरता\nकरते\nकरना\nकरने\nकरें\nकहते\nकहा\nका\nकाफ़ी\nकि\nकितना\nकिन्हें\nकिन्हों\nकिया\nकिर\nकिस\nकिसी\nकिसे\nकी\nकुछ\nकुल\nके\nको\nकोई\nकौन\nकौनसा\nगया\nघर\nजब\nजहाँ\nजा\nजितना\nजिन\nजिन्हें\nजिन्हों\nजिस\nजिसे\nजीधर\nजैसा\nजैसे\nजो\nतक\nतब\nतरह\nतिन\nतिन्हें\nतिन्हों\nतिस\nतिसे\nतो\nथा\nथी\nथे\nदबारा\nदिया\nदुसरा\nदूसरे\nदो\nद्वारा\nन\nनहीं\nना\nनिहायत\nनीचे\nने\nपर\nपर
    \ \nपहले\nपूरा\nपे\nफिर\nबनी\nबही\nबहुत\nबाद\nबाला\nबिलकुल\nभी\nभीतर\nमगर\nमानो\nमे\nमें\nयदि\nयह\nयहाँ\nयही\nया\nयिह
    \nये\nरखें\nरहा\nरहे\nऱ्वासा\nलिए\nलिये\nलेकिन\nव\nवर्ग\nवह\nवह \nवहाँ\nवहीं\nवाले\nवुह
    \nवे\nवग़ैरह\nसंग\nसकता\nसकते\nसबसे\nसभी\nसाथ\nसाबुत\nसाभ\nसारा\nसे\nसो\nही\nहुआ\nहुई\nहुए\nहै\nहैं\nहो\nहोता\nहोती\nहोते\nहोना\nहोने\n#
    additional normalized forms of the above\nअपनि\nजेसे\nहोति\nसभि\nतिंहों\nइंहों\nदवारा\nइसि\nकिंहें\nथि\nउंहों\nओर\nजिंहें\nवहिं\nअभि\nबनि\nहि\nउंहिं\nउंहें\nहें\nवगेरह\nएसे\nरवासा\nकोन\nनिचे\nकाफि\nउसि\nपुरा\nभितर\nहे\nबहि\nवहां\nकोइ\nयहां\nजिंहों\nतिंहें\nकिसि\nकइ\nयहि\nइंहिं\nजिधर\nइंहें\nअदि\nइतयादि\nहुइ\nकोनसा\nइसकि\nदुसरे\nजहां\nअप\nकिंहों\nउनकि\nभि\nवरग\nहुअ\nजेसा\nनहिं\n"
  stopwords_hu.txt: " | From svn.tartarus.org/snowball/trunk/website/algorithms/hungarian/stop.txt\n
    | This file is distributed under the BSD License.\n | See http://snowball.tartarus.org/license.php\n
    | Also see http://www.opensource.org/licenses/bsd-license.html\n |  - Encoding
    was converted to UTF-8.\n |  - This notice was added.\n |\n | NOTE: To use this
    file with StopFilterFactory, you must specify format=\"snowball\"\n \n| Hungarian
    stop word list\n| prepared by Anna Tordai\n\na\nahogy\nahol\naki\nakik\nakkor\nalatt\náltal\náltalában\namely\namelyek\namelyekben\namelyeket\namelyet\namelynek\nami\namit\namolyan\namíg\namikor\nát\nabban\nahhoz\nannak\narra\narról\naz\nazok\nazon\nazt\nazzal\nazért\naztán\nazután\nazonban\nbár\nbe\nbelül\nbenne\ncikk\ncikkek\ncikkeket\ncsak\nde\ne\neddig\negész\negy\negyes\negyetlen\negyéb\negyik\negyre\nekkor\nel\nelég\nellen\nelő\nelőször\nelőtt\nelső\nén\néppen\nebben\nehhez\nemilyen\nennek\nerre\nez\nezt\nezek\nezen\nezzel\nezért\nés\nfel\nfelé\nhanem\nhiszen\nhogy\nhogyan\nigen\nígy\nilletve\nill.\nill\nilyen\nilyenkor\nison\nismét\nitt\njó\njól\njobban\nkell\nkellett\nkeresztül\nkeressünk\nki\nkívül\nközött\nközül\nlegalább\nlehet\nlehetett\nlegyen\nlenne\nlenni\nlesz\nlett\nmaga\nmagát\nmajd\nmajd\nmár\nmás\nmásik\nmeg\nmég\nmellett\nmert\nmely\nmelyek\nmi\nmit\nmíg\nmiért\nmilyen\nmikor\nminden\nmindent\nmindenki\nmindig\nmint\nmintha\nmivel\nmost\nnagy\nnagyobb\nnagyon\nne\nnéha\nnekem\nneki\nnem\nnéhány\nnélkül\nnincs\nolyan\nott\nössze\nő\nők\nőket\npedig\npersze\nrá\ns\nsaját\nsem\nsemmi\nsok\nsokat\nsokkal\nszámára\nszemben\nszerint\nszinte\ntalán\ntehát\nteljes\ntovább\ntovábbá\ntöbb\núgy\nugyanis\núj\nújabb\nújra\nután\nutána\nutolsó\nvagy\nvagyis\nvalaki\nvalami\nvalamint\nvaló\nvagyok\nvan\nvannak\nvolt\nvoltam\nvoltak\nvoltunk\nvissza\nvele\nviszont\nvolna\n"
  stopwords_hy.txt: |
    # example set of Armenian stopwords.
    այդ
    այլ
    այն
    այս
    դու
    դուք
    եմ
    են
    ենք
    ես
    եք
    է
    էի
    էին
    էինք
    էիր
    էիք
    էր
    ըստ
    թ
    ի
    ին
    իսկ
    իր
    կամ
    համար
    հետ
    հետո
    մենք
    մեջ
    մի
    ն
    նա
    նաև
    նրա
    նրանք
    որ
    որը
    որոնք
    որպես
    ու
    ում
    պիտի
    վրա
    և
  stopwords_id.txt: |
    # from appendix D of: A Study of Stemming Effects on Information
    # Retrieval in Bahasa Indonesia
    ada
    adanya
    adalah
    adapun
    agak
    agaknya
    agar
    akan
    akankah
    akhirnya
    aku
    akulah
    amat
    amatlah
    anda
    andalah
    antar
    diantaranya
    antara
    antaranya
    diantara
    apa
    apaan
    mengapa
    apabila
    apakah
    apalagi
    apatah
    atau
    ataukah
    ataupun
    bagai
    bagaikan
    sebagai
    sebagainya
    bagaimana
    bagaimanapun
    sebagaimana
    bagaimanakah
    bagi
    bahkan
    bahwa
    bahwasanya
    sebaliknya
    banyak
    sebanyak
    beberapa
    seberapa
    begini
    beginian
    beginikah
    beginilah
    sebegini
    begitu
    begitukah
    begitulah
    begitupun
    sebegitu
    belum
    belumlah
    sebelum
    sebelumnya
    sebenarnya
    berapa
    berapakah
    berapalah
    berapapun
    betulkah
    sebetulnya
    biasa
    biasanya
    bila
    bilakah
    bisa
    bisakah
    sebisanya
    boleh
    bolehkah
    bolehlah
    buat
    bukan
    bukankah
    bukanlah
    bukannya
    cuma
    percuma
    dahulu
    dalam
    dan
    dapat
    dari
    daripada
    dekat
    demi
    demikian
    demikianlah
    sedemikian
    dengan
    depan
    di
    dia
    dialah
    dini
    diri
    dirinya
    terdiri
    dong
    dulu
    enggak
    enggaknya
    entah
    entahlah
    terhadap
    terhadapnya
    hal
    hampir
    hanya
    hanyalah
    harus
    haruslah
    harusnya
    seharusnya
    hendak
    hendaklah
    hendaknya
    hingga
    sehingga
    ia
    ialah
    ibarat
    ingin
    inginkah
    inginkan
    ini
    inikah
    inilah
    itu
    itukah
    itulah
    jangan
    jangankan
    janganlah
    jika
    jikalau
    juga
    justru
    kala
    kalau
    kalaulah
    kalaupun
    kalian
    kami
    kamilah
    kamu
    kamulah
    kan
    kapan
    kapankah
    kapanpun
    dikarenakan
    karena
    karenanya
    ke
    kecil
    kemudian
    kenapa
    kepada
    kepadanya
    ketika
    seketika
    khususnya
    kini
    kinilah
    kiranya
    sekiranya
    kita
    kitalah
    kok
    lagi
    lagian
    selagi
    lah
    lain
    lainnya
    melainkan
    selaku
    lalu
    melalui
    terlalu
    lama
    lamanya
    selama
    selama
    selamanya
    lebih
    terlebih
    bermacam
    macam
    semacam
    maka
    makanya
    makin
    malah
    malahan
    mampu
    mampukah
    mana
    manakala
    manalagi
    masih
    masihkah
    semasih
    masing
    mau
    maupun
    semaunya
    memang
    mereka
    merekalah
    meski
    meskipun
    semula
    mungkin
    mungkinkah
    nah
    namun
    nanti
    nantinya
    nyaris
    oleh
    olehnya
    seorang
    seseorang
    pada
    padanya
    padahal
    paling
    sepanjang
    pantas
    sepantasnya
    sepantasnyalah
    para
    pasti
    pastilah
    per
    pernah
    pula
    pun
    merupakan
    rupanya
    serupa
    saat
    saatnya
    sesaat
    saja
    sajalah
    saling
    bersama
    sama
    sesama
    sambil
    sampai
    sana
    sangat
    sangatlah
    saya
    sayalah
    se
    sebab
    sebabnya
    sebuah
    tersebut
    tersebutlah
    sedang
    sedangkan
    sedikit
    sedikitnya
    segala
    segalanya
    segera
    sesegera
    sejak
    sejenak
    sekali
    sekalian
    sekalipun
    sesekali
    sekaligus
    sekarang
    sekarang
    sekitar
    sekitarnya
    sela
    selain
    selalu
    seluruh
    seluruhnya
    semakin
    sementara
    sempat
    semua
    semuanya
    sendiri
    sendirinya
    seolah
    seperti
    sepertinya
    sering
    seringnya
    serta
    siapa
    siapakah
    siapapun
    disini
    disinilah
    sini
    sinilah
    sesuatu
    sesuatunya
    suatu
    sesudah
    sesudahnya
    sudah
    sudahkah
    sudahlah
    supaya
    tadi
    tadinya
    tak
    tanpa
    setelah
    telah
    tentang
    tentu
    tentulah
    tentunya
    tertentu
    seterusnya
    tapi
    tetapi
    setiap
    tiap
    setidaknya
    tidak
    tidakkah
    tidaklah
    toh
    waduh
    wah
    wahai
    sewaktu
    walau
    walaupun
    wong
    yaitu
    yakni
    yang
  stopwords_it.txt: |2
     | From svn.tartarus.org/snowball/trunk/website/algorithms/italian/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | An Italian stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.

    ad             |  a (to) before vowel
    al             |  a + il
    allo           |  a + lo
    ai             |  a + i
    agli           |  a + gli
    all            |  a + l'
    agl            |  a + gl'
    alla           |  a + la
    alle           |  a + le
    con            |  with
    col            |  con + il
    coi            |  con + i (forms collo, cogli etc are now very rare)
    da             |  from
    dal            |  da + il
    dallo          |  da + lo
    dai            |  da + i
    dagli          |  da + gli
    dall           |  da + l'
    dagl           |  da + gll'
    dalla          |  da + la
    dalle          |  da + le
    di             |  of
    del            |  di + il
    dello          |  di + lo
    dei            |  di + i
    degli          |  di + gli
    dell           |  di + l'
    degl           |  di + gl'
    della          |  di + la
    delle          |  di + le
    in             |  in
    nel            |  in + el
    nello          |  in + lo
    nei            |  in + i
    negli          |  in + gli
    nell           |  in + l'
    negl           |  in + gl'
    nella          |  in + la
    nelle          |  in + le
    su             |  on
    sul            |  su + il
    sullo          |  su + lo
    sui            |  su + i
    sugli          |  su + gli
    sull           |  su + l'
    sugl           |  su + gl'
    sulla          |  su + la
    sulle          |  su + le
    per            |  through, by
    tra            |  among
    contro         |  against
    io             |  I
    tu             |  thou
    lui            |  he
    lei            |  she
    noi            |  we
    voi            |  you
    loro           |  they
    mio            |  my
    mia            |
    miei           |
    mie            |
    tuo            |
    tua            |
    tuoi           |  thy
    tue            |
    suo            |
    sua            |
    suoi           |  his, her
    sue            |
    nostro         |  our
    nostra         |
    nostri         |
    nostre         |
    vostro         |  your
    vostra         |
    vostri         |
    vostre         |
    mi             |  me
    ti             |  thee
    ci             |  us, there
    vi             |  you, there
    lo             |  him, the
    la             |  her, the
    li             |  them
    le             |  them, the
    gli            |  to him, the
    ne             |  from there etc
    il             |  the
    un             |  a
    uno            |  a
    una            |  a
    ma             |  but
    ed             |  and
    se             |  if
    perché         |  why, because
    anche          |  also
    come           |  how
    dov            |  where (as dov')
    dove           |  where
    che            |  who, that
    chi            |  who
    cui            |  whom
    non            |  not
    più            |  more
    quale          |  who, that
    quanto         |  how much
    quanti         |
    quanta         |
    quante         |
    quello         |  that
    quelli         |
    quella         |
    quelle         |
    questo         |  this
    questi         |
    questa         |
    queste         |
    si             |  yes
    tutto          |  all
    tutti          |  all

                   |  single letter forms:

    a              |  at
    c              |  as c' for ce or ci
    e              |  and
    i              |  the
    l              |  as l'
    o              |  or

                   | forms of avere, to have (not including the infinitive):

    ho
    hai
    ha
    abbiamo
    avete
    hanno
    abbia
    abbiate
    abbiano
    avrò
    avrai
    avrà
    avremo
    avrete
    avranno
    avrei
    avresti
    avrebbe
    avremmo
    avreste
    avrebbero
    avevo
    avevi
    aveva
    avevamo
    avevate
    avevano
    ebbi
    avesti
    ebbe
    avemmo
    aveste
    ebbero
    avessi
    avesse
    avessimo
    avessero
    avendo
    avuto
    avuta
    avuti
    avute

                   | forms of essere, to be (not including the infinitive):
    sono
    sei
    è
    siamo
    siete
    sia
    siate
    siano
    sarò
    sarai
    sarà
    saremo
    sarete
    saranno
    sarei
    saresti
    sarebbe
    saremmo
    sareste
    sarebbero
    ero
    eri
    era
    eravamo
    eravate
    erano
    fui
    fosti
    fu
    fummo
    foste
    furono
    fossi
    fosse
    fossimo
    fossero
    essendo

                   | forms of fare, to do (not including the infinitive, fa, fat-):
    faccio
    fai
    facciamo
    fanno
    faccia
    facciate
    facciano
    farò
    farai
    farà
    faremo
    farete
    faranno
    farei
    faresti
    farebbe
    faremmo
    fareste
    farebbero
    facevo
    facevi
    faceva
    facevamo
    facevate
    facevano
    feci
    facesti
    fece
    facemmo
    faceste
    fecero
    facessi
    facesse
    facessimo
    facessero
    facendo

                   | forms of stare, to be (not including the infinitive):
    sto
    stai
    sta
    stiamo
    stanno
    stia
    stiate
    stiano
    starò
    starai
    starà
    staremo
    starete
    staranno
    starei
    staresti
    starebbe
    staremmo
    stareste
    starebbero
    stavo
    stavi
    stava
    stavamo
    stavate
    stavano
    stetti
    stesti
    stette
    stemmo
    steste
    stettero
    stessi
    stesse
    stessimo
    stessero
    stando
  stopwords_ja.txt: |
    #
    # This file defines a stopword set for Japanese.
    #
    # This set is made up of hand-picked frequent terms from segmented Japanese Wikipedia.
    # Punctuation characters and frequent kanji have mostly been left out.  See LUCENE-3745
    # for frequency lists, etc. that can be useful for making your own set (if desired)
    #
    # Note that there is an overlap between these stopwords and the terms stopped when used
    # in combination with the JapanesePartOfSpeechStopFilter.  When editing this file, note
    # that comments are not allowed on the same line as stopwords.
    #
    # Also note that stopping is done in a case-insensitive manner.  Change your StopFilter
    # configuration if you need case-sensitive stopping.  Lastly, note that stopping is done
    # using the same character width as the entries in this file.  Since this StopFilter is
    # normally done after a CJKWidthFilter in your chain, you would usually want your romaji
    # entries to be in half-width and your kana entries to be in full-width.
    #
    の
    に
    は
    を
    た
    が
    で
    て
    と
    し
    れ
    さ
    ある
    いる
    も
    する
    から
    な
    こと
    として
    い
    や
    れる
    など
    なっ
    ない
    この
    ため
    その
    あっ
    よう
    また
    もの
    という
    あり
    まで
    られ
    なる
    へ
    か
    だ
    これ
    によって
    により
    おり
    より
    による
    ず
    なり
    られる
    において
    ば
    なかっ
    なく
    しかし
    について
    せ
    だっ
    その後
    できる
    それ
    う
    ので
    なお
    のみ
    でき
    き
    つ
    における
    および
    いう
    さらに
    でも
    ら
    たり
    その他
    に関する
    たち
    ます
    ん
    なら
    に対して
    特に
    せる
    及び
    これら
    とき
    では
    にて
    ほか
    ながら
    うち
    そして
    とともに
    ただし
    かつて
    それぞれ
    または
    お
    ほど
    ものの
    に対する
    ほとんど
    と共に
    といった
    です
    とも
    ところ
    ここ
    ##### End of file
  stopwords_lv.txt: "# Set of Latvian stopwords from A Stemming Algorithm for Latvian,
    Karlis Kreslins\n# the original list of over 800 forms was refined: \n#   pronouns,
    adverbs, interjections were removed\n# \n# prepositions\naiz\nap\nar\napakš\nārpus\naugšpus\nbez\ncaur\ndēļ\ngar\niekš\niz\nkopš\nlabad\nlejpus\nlīdz\nno\notrpus\npa\npar\npār\npēc\npie\npirms\npret\npriekš\nstarp\nšaipus\nuz\nviņpus\nvirs\nvirspus\nzem\napakšpus\n#
    Conjunctions\nun\nbet\njo\nja\nka\nlai\ntomēr\ntikko\nturpretī\narī\nkaut\ngan\ntādēļ\ntā\nne\ntikvien\nvien\nkā\nir\nte\nvai\nkamēr\n#
    Particles\nar\ndiezin\ndroši\ndiemžēl\nnebūt\nik\nit\ntaču\nnu\npat\ntiklab\niekšpus\nnedz\ntik\nnevis\nturpretim\njeb\niekam\niekām\niekāms\nkolīdz\nlīdzko\ntiklīdz\njebšu\ntālab\ntāpēc\nnekā\nitin\njā\njau\njel\nnē\nnezin\ntad\ntikai\nvis\ntak\niekams\nvien\n#
    modal verbs\nbūt  \nbiju \nbiji\nbija\nbijām\nbijāt\nesmu\nesi\nesam\nesat \nbūšu
    \    \nbūsi\nbūs\nbūsim\nbūsiet\ntikt\ntiku\ntiki\ntika\ntikām\ntikāt\ntieku\ntiec\ntiek\ntiekam\ntiekat\ntikšu\ntiks\ntiksim\ntiksiet\ntapt\ntapi\ntapāt\ntopat\ntapšu\ntapsi\ntaps\ntapsim\ntapsiet\nkļūt\nkļuvu\nkļuvi\nkļuva\nkļuvām\nkļuvāt\nkļūstu\nkļūsti\nkļūst\nkļūstam\nkļūstat\nkļūšu\nkļūsi\nkļūs\nkļūsim\nkļūsiet\n#
    verbs\nvarēt\nvarēju\nvarējām\nvarēšu\nvarēsim\nvar\nvarēji\nvarējāt\nvarēsi\nvarēsiet\nvarat\nvarēja\nvarēs\n"
  stopwords_nl.txt: |2
     | From svn.tartarus.org/snowball/trunk/website/algorithms/dutch/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A Dutch stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.

     | This is a ranked list (commonest to rarest) of stopwords derived from
     | a large sample of Dutch text.

     | Dutch stop words frequently exhibit homonym clashes. These are indicated
     | clearly below.

    de             |  the
    en             |  and
    van            |  of, from
    ik             |  I, the ego
    te             |  (1) chez, at etc, (2) to, (3) too
    dat            |  that, which
    die            |  that, those, who, which
    in             |  in, inside
    een            |  a, an, one
    hij            |  he
    het            |  the, it
    niet           |  not, nothing, naught
    zijn           |  (1) to be, being, (2) his, one's, its
    is             |  is
    was            |  (1) was, past tense of all persons sing. of 'zijn' (to be) (2) wax, (3) the washing, (4) rise of river
    op             |  on, upon, at, in, up, used up
    aan            |  on, upon, to (as dative)
    met            |  with, by
    als            |  like, such as, when
    voor           |  (1) before, in front of, (2) furrow
    had            |  had, past tense all persons sing. of 'hebben' (have)
    er             |  there
    maar           |  but, only
    om             |  round, about, for etc
    hem            |  him
    dan            |  then
    zou            |  should/would, past tense all persons sing. of 'zullen'
    of             |  or, whether, if
    wat            |  what, something, anything
    mijn           |  possessive and noun 'mine'
    men            |  people, 'one'
    dit            |  this
    zo             |  so, thus, in this way
    door           |  through by
    over           |  over, across
    ze             |  she, her, they, them
    zich           |  oneself
    bij            |  (1) a bee, (2) by, near, at
    ook            |  also, too
    tot            |  till, until
    je             |  you
    mij            |  me
    uit            |  out of, from
    der            |  Old Dutch form of 'van der' still found in surnames
    daar           |  (1) there, (2) because
    haar           |  (1) her, their, them, (2) hair
    naar           |  (1) unpleasant, unwell etc, (2) towards, (3) as
    heb            |  present first person sing. of 'to have'
    hoe            |  how, why
    heeft          |  present third person sing. of 'to have'
    hebben         |  'to have' and various parts thereof
    deze           |  this
    u              |  you
    want           |  (1) for, (2) mitten, (3) rigging
    nog            |  yet, still
    zal            |  'shall', first and third person sing. of verb 'zullen' (will)
    me             |  me
    zij            |  she, they
    nu             |  now
    ge             |  'thou', still used in Belgium and south Netherlands
    geen           |  none
    omdat          |  because
    iets           |  something, somewhat
    worden         |  to become, grow, get
    toch           |  yet, still
    al             |  all, every, each
    waren          |  (1) 'were' (2) to wander, (3) wares, (3)
    veel           |  much, many
    meer           |  (1) more, (2) lake
    doen           |  to do, to make
    toen           |  then, when
    moet           |  noun 'spot/mote' and present form of 'to must'
    ben            |  (1) am, (2) 'are' in interrogative second person singular of 'to be'
    zonder         |  without
    kan            |  noun 'can' and present form of 'to be able'
    hun            |  their, them
    dus            |  so, consequently
    alles          |  all, everything, anything
    onder          |  under, beneath
    ja             |  yes, of course
    eens           |  once, one day
    hier           |  here
    wie            |  who
    werd           |  imperfect third person sing. of 'become'
    altijd         |  always
    doch           |  yet, but etc
    wordt          |  present third person sing. of 'become'
    wezen          |  (1) to be, (2) 'been' as in 'been fishing', (3) orphans
    kunnen         |  to be able
    ons            |  us/our
    zelf           |  self
    tegen          |  against, towards, at
    na             |  after, near
    reeds          |  already
    wil            |  (1) present tense of 'want', (2) 'will', noun, (3) fender
    kon            |  could; past tense of 'to be able'
    niets          |  nothing
    uw             |  your
    iemand         |  somebody
    geweest        |  been; past participle of 'be'
    andere         |  other
  stopwords_no.txt: |2+
     | From svn.tartarus.org/snowball/trunk/website/algorithms/norwegian/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A Norwegian stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.

     | This stop word list is for the dominant bokmål dialect. Words unique
     | to nynorsk are marked *.

     | Revised by Jan Bruusgaard <Jan.Bruusgaard@ssb.no>, Jan 2005

    og             | and
    i              | in
    jeg            | I
    det            | it/this/that
    at             | to (w. inf.)
    en             | a/an
    et             | a/an
    den            | it/this/that
    til            | to
    er             | is/am/are
    som            | who/that
    på             | on
    de             | they / you(formal)
    med            | with
    han            | he
    av             | of
    ikke           | not
    ikkje          | not *
    der            | there
    så             | so
    var            | was/were
    meg            | me
    seg            | you
    men            | but
    ett            | one
    har            | have
    om             | about
    vi             | we
    min            | my
    mitt           | my
    ha             | have
    hadde          | had
    hun            | she
    nå             | now
    over           | over
    da             | when/as
    ved            | by/know
    fra            | from
    du             | you
    ut             | out
    sin            | your
    dem            | them
    oss            | us
    opp            | up
    man            | you/one
    kan            | can
    hans           | his
    hvor           | where
    eller          | or
    hva            | what
    skal           | shall/must
    selv           | self (reflective)
    sjøl           | self (reflective)
    her            | here
    alle           | all
    vil            | will
    bli            | become
    ble            | became
    blei           | became *
    blitt          | have become
    kunne          | could
    inn            | in
    når            | when
    være           | be
    kom            | come
    noen           | some
    noe            | some
    ville          | would
    dere           | you
    som            | who/which/that
    deres          | their/theirs
    kun            | only/just
    ja             | yes
    etter          | after
    ned            | down
    skulle         | should
    denne          | this
    for            | for/because
    deg            | you
    si             | hers/his
    sine           | hers/his
    sitt           | hers/his
    mot            | against
    å              | to
    meget          | much
    hvorfor        | why
    dette          | this
    disse          | these/those
    uten           | without
    hvordan        | how
    ingen          | none
    din            | your
    ditt           | your
    blir           | become
    samme          | same
    hvilken        | which
    hvilke         | which (plural)
    sånn           | such a
    inni           | inside/within
    mellom         | between
    vår            | our
    hver           | each
    hvem           | who
    vors           | us/ours
    hvis           | whose
    både           | both
    bare           | only/just
    enn            | than
    fordi          | as/because
    før            | before
    mange          | many
    også           | also
    slik           | just
    vært           | been
    være           | to be
    båe            | both *
    begge          | both
    siden          | since
    dykk           | your *
    dykkar         | yours *
    dei            | they *
    deira          | them *
    deires         | theirs *
    deim           | them *
    di             | your (fem.) *
    då             | as/when *
    eg             | I *
    ein            | a/an *
    eit            | a/an *
    eitt           | a/an *
    elles          | or *
    honom          | he *
    hjå            | at *
    ho             | she *
    hoe            | she *
    henne          | her
    hennar         | her/hers
    hennes         | hers
    hoss           | how *
    hossen         | how *
    ikkje          | not *
    ingi           | noone *
    inkje          | noone *
    korleis        | how *
    korso          | how *
    kva            | what/which *
    kvar           | where *
    kvarhelst      | where *
    kven           | who/whom *
    kvi            | why *
    kvifor         | why *
    me             | we *
    medan          | while *
    mi             | my *
    mine           | my *
    mykje          | much *
    no             | now *
    nokon          | some (masc./neut.) *
    noka           | some (fem.) *
    nokor          | some *
    noko           | some *
    nokre          | some *
    si             | his/hers *
    sia            | since *
    sidan          | since *
    so             | so *
    somt           | some *
    somme          | some *
    um             | about*
    upp            | up *
    vere           | be *
    vore           | was *
    verte          | become *
    vort           | become *
    varte          | became *
    vart           | became *

  stopwords_pt.txt: |2
     | From svn.tartarus.org/snowball/trunk/website/algorithms/portuguese/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A Portuguese stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.


     | The following is a ranked list (commonest to rarest) of stopwords
     | deriving from a large sample of text.

     | Extra words have been added at the end.

    de             |  of, from
    a              |  the; to, at; her
    o              |  the; him
    que            |  who, that
    e              |  and
    do             |  de + o
    da             |  de + a
    em             |  in
    um             |  a
    para           |  for
      | é          from SER
    com            |  with
    não            |  not, no
    uma            |  a
    os             |  the; them
    no             |  em + o
    se             |  himself etc
    na             |  em + a
    por            |  for
    mais           |  more
    as             |  the; them
    dos            |  de + os
    como           |  as, like
    mas            |  but
      | foi        from SER
    ao             |  a + o
    ele            |  he
    das            |  de + as
      | tem        from TER
    à              |  a + a
    seu            |  his
    sua            |  her
    ou             |  or
      | ser        from SER
    quando         |  when
    muito          |  much
      | há         from HAV
    nos            |  em + os; us
    já             |  already, now
      | está       from EST
    eu             |  I
    também         |  also
    só             |  only, just
    pelo           |  per + o
    pela           |  per + a
    até            |  up to
    isso           |  that
    ela            |  he
    entre          |  between
      | era        from SER
    depois         |  after
    sem            |  without
    mesmo          |  same
    aos            |  a + os
      | ter        from TER
    seus           |  his
    quem           |  whom
    nas            |  em + as
    me             |  me
    esse           |  that
    eles           |  they
      | estão      from EST
    você           |  you
      | tinha      from TER
      | foram      from SER
    essa           |  that
    num            |  em + um
    nem            |  nor
    suas           |  her
    meu            |  my
    às             |  a + as
    minha          |  my
      | têm        from TER
    numa           |  em + uma
    pelos          |  per + os
    elas           |  they
      | havia      from HAV
      | seja       from SER
    qual           |  which
      | será       from SER
    nós            |  we
      | tenho      from TER
    lhe            |  to him, her
    deles          |  of them
    essas          |  those
    esses          |  those
    pelas          |  per + as
    este           |  this
      | fosse      from SER
    dele           |  of him

     | other words. There are many contractions such as naquele = em+aquele,
     | mo = me+o, but they are rare.
     | Indefinite article plural forms are also rare.

    tu             |  thou
    te             |  thee
    vocês          |  you (plural)
    vos            |  you
    lhes           |  to them
    meus           |  my
    minhas
    teu            |  thy
    tua
    teus
    tuas
    nosso          | our
    nossa
    nossos
    nossas

    dela           |  of her
    delas          |  of them

    esta           |  this
    estes          |  these
    estas          |  these
    aquele         |  that
    aquela         |  that
    aqueles        |  those
    aquelas        |  those
    isto           |  this
    aquilo         |  that

                   | forms of estar, to be (not including the infinitive):
    estou
    está
    estamos
    estão
    estive
    esteve
    estivemos
    estiveram
    estava
    estávamos
    estavam
    estivera
    estivéramos
    esteja
    estejamos
    estejam
    estivesse
    estivéssemos
    estivessem
    estiver
    estivermos
    estiverem

                   | forms of haver, to have (not including the infinitive):
    hei
    há
    havemos
    hão
    houve
    houvemos
    houveram
    houvera
    houvéramos
    haja
    hajamos
    hajam
    houvesse
    houvéssemos
    houvessem
    houver
    houvermos
    houverem
    houverei
    houverá
    houveremos
    houverão
    houveria
    houveríamos
    houveriam

                   | forms of ser, to be (not including the infinitive):
    sou
    somos
    são
    era
    éramos
    eram
    fui
    foi
    fomos
    foram
    fora
    fôramos
    seja
    sejamos
    sejam
    fosse
    fôssemos
    fossem
    for
    formos
    forem
    serei
    será
    seremos
    serão
    seria
    seríamos
    seriam

                   | forms of ter, to have (not including the infinitive):
    tenho
    tem
    temos
    tém
    tinha
    tínhamos
    tinham
    tive
    teve
    tivemos
    tiveram
    tivera
    tivéramos
    tenha
    tenhamos
    tenham
    tivesse
    tivéssemos
    tivessem
    tiver
    tivermos
    tiverem
    terei
    terá
    teremos
    terão
    teria
    teríamos
    teriam
  stopwords_ro.txt: "# This file was created by Jacques Savoy and is distributed under
    the BSD license.\n# See http://members.unine.ch/jacques.savoy/clef/index.html.\n#
    Also see http://www.opensource.org/licenses/bsd-license.html\nacea\naceasta\naceastă\naceea\nacei\naceia\nacel\nacela\nacele\nacelea\nacest\nacesta\naceste\nacestea\naceşti\naceştia\nacolo\nacum\nai\naia\naibă\naici\nal\năla\nale\nalea\nălea\naltceva\naltcineva\nam\nar\nare\naş\naşadar\nasemenea\nasta\năsta\nastăzi\nastea\năstea\năştia\nasupra\naţi\nau\navea\navem\naveţi\nazi\nbine\nbucur\nbună\nca\ncă\ncăci\ncând\ncare\ncărei\ncăror\ncărui\ncât\ncâte\ncâţi\ncătre\ncâtva\nce\ncel\nceva\nchiar\ncînd\ncine\ncineva\ncît\ncîte\ncîţi\ncîtva\ncontra\ncu\ncum\ncumva\ncurând\ncurînd\nda\ndă\ndacă\ndar\ndatorită\nde\ndeci\ndeja\ndeoarece\ndeparte\ndeşi\ndin\ndinaintea\ndintr\ndintre\ndrept\ndupă\nea\nei\nel\nele\neram\neste\neşti\neu\nface\nfără\nfi\nfie\nfiecare\nfii\nfim\nfiţi\niar\nieri\nîi\nîl\nîmi\nîmpotriva\nîn
    \nînainte\nînaintea\nîncât\nîncît\nîncotro\nîntre\nîntrucât\nîntrucît\nîţi\nla\nlângă\nle\nli\nlîngă\nlor\nlui\nmă\nmâine\nmea\nmei\nmele\nmereu\nmeu\nmi\nmine\nmult\nmultă\nmulţi\nne\nnicăieri\nnici\nnimeni\nnişte\nnoastră\nnoastre\nnoi\nnoştri\nnostru\nnu\nori\noricând\noricare\noricât\norice\noricînd\noricine\noricît\noricum\noriunde\npână\npe\npentru\npeste\npînă\npoate\npot\nprea\nprima\nprimul\nprin\nprintr\nsa\nsă\nsăi\nsale\nsau\nsău\nse\nşi\nsînt\nsîntem\nsînteţi\nspre\nsub\nsunt\nsuntem\nsunteţi\nta\ntăi\ntale\ntău\nte\nţi\nţie\ntine\ntoată\ntoate\ntot\ntoţi\ntotuşi\ntu\nun\nuna\nunde\nundeva\nunei\nunele\nuneori\nunor\nvă\nvi\nvoastră\nvoastre\nvoi\nvoştri\nvostru\nvouă\nvreo\nvreun\n"
  stopwords_ru.txt: |2+
     | From svn.tartarus.org/snowball/trunk/website/algorithms/russian/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | a russian stop word list. comments begin with vertical bar. each stop
     | word is at the start of a line.

     | this is a ranked list (commonest to rarest) of stopwords derived from
     | a large text sample.

     | letter `ё' is translated to `е'.

    и              | and
    в              | in/into
    во             | alternative form
    не             | not
    что            | what/that
    он             | he
    на             | on/onto
    я              | i
    с              | from
    со             | alternative form
    как            | how
    а              | milder form of `no' (but)
    то             | conjunction and form of `that'
    все            | all
    она            | she
    так            | so, thus
    его            | him
    но             | but
    да             | yes/and
    ты             | thou
    к              | towards, by
    у              | around, chez
    же             | intensifier particle
    вы             | you
    за             | beyond, behind
    бы             | conditional/subj. particle
    по             | up to, along
    только         | only
    ее             | her
    мне            | to me
    было           | it was
    вот            | here is/are, particle
    от             | away from
    меня           | me
    еще            | still, yet, more
    нет            | no, there isnt/arent
    о              | about
    из             | out of
    ему            | to him
    теперь         | now
    когда          | when
    даже           | even
    ну             | so, well
    вдруг          | suddenly
    ли             | interrogative particle
    если           | if
    уже            | already, but homonym of `narrower'
    или            | or
    ни             | neither
    быть           | to be
    был            | he was
    него           | prepositional form of его
    до             | up to
    вас            | you accusative
    нибудь         | indef. suffix preceded by hyphen
    опять          | again
    уж             | already, but homonym of `adder'
    вам            | to you
    сказал         | he said
    ведь           | particle `after all'
    там            | there
    потом          | then
    себя           | oneself
    ничего         | nothing
    ей             | to her
    может          | usually with `быть' as `maybe'
    они            | they
    тут            | here
    где            | where
    есть           | there is/are
    надо           | got to, must
    ней            | prepositional form of  ей
    для            | for
    мы             | we
    тебя           | thee
    их             | them, their
    чем            | than
    была           | she was
    сам            | self
    чтоб           | in order to
    без            | without
    будто          | as if
    человек        | man, person, one
    чего           | genitive form of `what'
    раз            | once
    тоже           | also
    себе           | to oneself
    под            | beneath
    жизнь          | life
    будет          | will be
    ж              | short form of intensifer particle `же'
    тогда          | then
    кто            | who
    этот           | this
    говорил        | was saying
    того           | genitive form of `that'
    потому         | for that reason
    этого          | genitive form of `this'
    какой          | which
    совсем         | altogether
    ним            | prepositional form of `его', `они'
    здесь          | here
    этом           | prepositional form of `этот'
    один           | one
    почти          | almost
    мой            | my
    тем            | instrumental/dative plural of `тот', `то'
    чтобы          | full form of `in order that'
    нее            | her (acc.)
    кажется        | it seems
    сейчас         | now
    были           | they were
    куда           | where to
    зачем          | why
    сказать        | to say
    всех           | all (acc., gen. preposn. plural)
    никогда        | never
    сегодня        | today
    можно          | possible, one can
    при            | by
    наконец        | finally
    два            | two
    об             | alternative form of `о', about
    другой         | another
    хоть           | even
    после          | after
    над            | above
    больше         | more
    тот            | that one (masc.)
    через          | across, in
    эти            | these
    нас            | us
    про            | about
    всего          | in all, only, of all
    них            | prepositional form of `они' (they)
    какая          | which, feminine
    много          | lots
    разве          | interrogative particle
    сказала        | she said
    три            | three
    эту            | this, acc. fem. sing.
    моя            | my, feminine
    впрочем        | moreover, besides
    хорошо         | good
    свою           | ones own, acc. fem. sing.
    этой           | oblique form of `эта', fem. `this'
    перед          | in front of
    иногда         | sometimes
    лучше          | better
    чуть           | a little
    том            | preposn. form of `that one'
    нельзя         | one must not
    такой          | such a one
    им             | to them
    более          | more
    всегда         | always
    конечно        | of course
    всю            | acc. fem. sing of `all'
    между          | between


      | b: some paradigms
      |
      | personal pronouns
      |
      | я  меня  мне  мной  [мною]
      | ты  тебя  тебе  тобой  [тобою]
      | он  его  ему  им  [него, нему, ним]
      | она  ее  эи  ею  [нее, нэи, нею]
      | оно  его  ему  им  [него, нему, ним]
      |
      | мы  нас  нам  нами
      | вы  вас  вам  вами
      | они  их  им  ими  [них, ним, ними]
      |
      |   себя  себе  собой   [собою]
      |
      | demonstrative pronouns: этот (this), тот (that)
      |
      | этот  эта  это  эти
      | этого  эты  это  эти
      | этого  этой  этого  этих
      | этому  этой  этому  этим
      | этим  этой  этим  [этою]  этими
      | этом  этой  этом  этих
      |
      | тот  та  то  те
      | того  ту  то  те
      | того  той  того  тех
      | тому  той  тому  тем
      | тем  той  тем  [тою]  теми
      | том  той  том  тех
      |
      | determinative pronouns
      |
      | (a) весь (all)
      |
      | весь  вся  все  все
      | всего  всю  все  все
      | всего  всей  всего  всех
      | всему  всей  всему  всем
      | всем  всей  всем  [всею]  всеми
      | всем  всей  всем  всех
      |
      | (b) сам (himself etc)
      |
      | сам  сама  само  сами
      | самого саму  само  самих
      | самого самой самого  самих
      | самому самой самому  самим
      | самим  самой  самим  [самою]  самими
      | самом самой самом  самих
      |
      | stems of verbs `to be', `to have', `to do' and modal
      |
      | быть  бы  буд  быв  есть  суть
      | име
      | дел
      | мог   мож  мочь
      | уме
      | хоч  хот
      | долж
      | можн
      | нужн
      | нельзя

  stopwords_sv.txt: |2+
     | From svn.tartarus.org/snowball/trunk/website/algorithms/swedish/stop.txt
     | This file is distributed under the BSD License.
     | See http://snowball.tartarus.org/license.php
     | Also see http://www.opensource.org/licenses/bsd-license.html
     |  - Encoding was converted to UTF-8.
     |  - This notice was added.
     |
     | NOTE: To use this file with StopFilterFactory, you must specify format="snowball"

     | A Swedish stop word list. Comments begin with vertical bar. Each stop
     | word is at the start of a line.

     | This is a ranked list (commonest to rarest) of stopwords derived from
     | a large text sample.

     | Swedish stop words occasionally exhibit homonym clashes. For example
     |  så = so, but also seed. These are indicated clearly below.

    och            | and
    det            | it, this/that
    att            | to (with infinitive)
    i              | in, at
    en             | a
    jag            | I
    hon            | she
    som            | who, that
    han            | he
    på             | on
    den            | it, this/that
    med            | with
    var            | where, each
    sig            | him(self) etc
    för            | for
    så             | so (also: seed)
    till           | to
    är             | is
    men            | but
    ett            | a
    om             | if; around, about
    hade           | had
    de             | they, these/those
    av             | of
    icke           | not, no
    mig            | me
    du             | you
    henne          | her
    då             | then, when
    sin            | his
    nu             | now
    har            | have
    inte           | inte någon = no one
    hans           | his
    honom          | him
    skulle         | 'sake'
    hennes         | her
    där            | there
    min            | my
    man            | one (pronoun)
    ej             | nor
    vid            | at, by, on (also: vast)
    kunde          | could
    något          | some etc
    från           | from, off
    ut             | out
    när            | when
    efter          | after, behind
    upp            | up
    vi             | we
    dem            | them
    vara           | be
    vad            | what
    över           | over
    än             | than
    dig            | you
    kan            | can
    sina           | his
    här            | here
    ha             | have
    mot            | towards
    alla           | all
    under          | under (also: wonder)
    någon          | some etc
    eller          | or (else)
    allt           | all
    mycket         | much
    sedan          | since
    ju             | why
    denna          | this/that
    själv          | myself, yourself etc
    detta          | this/that
    åt             | to
    utan           | without
    varit          | was
    hur            | how
    ingen          | no
    mitt           | my
    ni             | you
    bli            | to be, become
    blev           | from bli
    oss            | us
    din            | thy
    dessa          | these/those
    några          | some etc
    deras          | their
    blir           | from bli
    mina           | my
    samma          | (the) same
    vilken         | who, that
    er             | you, your
    sådan          | such a
    vår            | our
    blivit         | from bli
    dess           | its
    inom           | within
    mellan         | between
    sådant         | such a
    varför         | why
    varje          | each
    vilka          | who, that
    ditt           | thy
    vem            | who
    vilket         | who, that
    sitta          | his
    sådana         | such a
    vart           | each
    dina           | thy
    vars           | whose
    vårt           | our
    våra           | our
    ert            | your
    era            | your
    vilkas         | whose

  stopwords_th.txt: |
    # Thai stopwords from:
    # "Opinion Detection in Thai Political News Columns
    # Based on Subjectivity Analysis"
    # Khampol Sukhum, Supot Nitsuwat, and Choochart Haruechaiyasak
    ไว้
    ไม่
    ไป
    ได้
    ให้
    ใน
    โดย
    แห่ง
    แล้ว
    และ
    แรก
    แบบ
    แต่
    เอง
    เห็น
    เลย
    เริ่ม
    เรา
    เมื่อ
    เพื่อ
    เพราะ
    เป็นการ
    เป็น
    เปิดเผย
    เปิด
    เนื่องจาก
    เดียวกัน
    เดียว
    เช่น
    เฉพาะ
    เคย
    เข้า
    เขา
    อีก
    อาจ
    อะไร
    ออก
    อย่าง
    อยู่
    อยาก
    หาก
    หลาย
    หลังจาก
    หลัง
    หรือ
    หนึ่ง
    ส่วน
    ส่ง
    สุด
    สําหรับ
    ว่า
    วัน
    ลง
    ร่วม
    ราย
    รับ
    ระหว่าง
    รวม
    ยัง
    มี
    มาก
    มา
    พร้อม
    พบ
    ผ่าน
    ผล
    บาง
    น่า
    นี้
    นํา
    นั้น
    นัก
    นอกจาก
    ทุก
    ที่สุด
    ที่
    ทําให้
    ทํา
    ทาง
    ทั้งนี้
    ทั้ง
    ถ้า
    ถูก
    ถึง
    ต้อง
    ต่างๆ
    ต่าง
    ต่อ
    ตาม
    ตั้งแต่
    ตั้ง
    ด้าน
    ด้วย
    ดัง
    ซึ่ง
    ช่วง
    จึง
    จาก
    จัด
    จะ
    คือ
    ความ
    ครั้ง
    คง
    ขึ้น
    ของ
    ขอ
    ขณะ
    ก่อน
    ก็
    การ
    กับ
    กัน
    กว่า
    กล่าว
  stopwords_tr.txt: |
    # Turkish stopwords from LUCENE-559
    # merged with the list from "Information Retrieval on Turkish Texts"
    #   (http://www.users.muohio.edu/canf/papers/JASIST2008offPrint.pdf)
    acaba
    altmış
    altı
    ama
    ancak
    arada
    aslında
    ayrıca
    bana
    bazı
    belki
    ben
    benden
    beni
    benim
    beri
    beş
    bile
    bin
    bir
    birçok
    biri
    birkaç
    birkez
    birşey
    birşeyi
    biz
    bize
    bizden
    bizi
    bizim
    böyle
    böylece
    bu
    buna
    bunda
    bundan
    bunlar
    bunları
    bunların
    bunu
    bunun
    burada
    çok
    çünkü
    da
    daha
    dahi
    de
    defa
    değil
    diğer
    diye
    doksan
    dokuz
    dolayı
    dolayısıyla
    dört
    edecek
    eden
    ederek
    edilecek
    ediliyor
    edilmesi
    ediyor
    eğer
    elli
    en
    etmesi
    etti
    ettiği
    ettiğini
    gibi
    göre
    halen
    hangi
    hatta
    hem
    henüz
    hep
    hepsi
    her
    herhangi
    herkesin
    hiç
    hiçbir
    için
    iki
    ile
    ilgili
    ise
    işte
    itibaren
    itibariyle
    kadar
    karşın
    katrilyon
    kendi
    kendilerine
    kendini
    kendisi
    kendisine
    kendisini
    kez
    ki
    kim
    kimden
    kime
    kimi
    kimse
    kırk
    milyar
    milyon
    mu
    mü
    mı
    nasıl
    ne
    neden
    nedenle
    nerde
    nerede
    nereye
    niye
    niçin
    o
    olan
    olarak
    oldu
    olduğu
    olduğunu
    olduklarını
    olmadı
    olmadığı
    olmak
    olması
    olmayan
    olmaz
    olsa
    olsun
    olup
    olur
    olursa
    oluyor
    on
    ona
    ondan
    onlar
    onlardan
    onları
    onların
    onu
    onun
    otuz
    oysa
    öyle
    pek
    rağmen
    sadece
    sanki
    sekiz
    seksen
    sen
    senden
    seni
    senin
    siz
    sizden
    sizi
    sizin
    şey
    şeyden
    şeyi
    şeyler
    şöyle
    şu
    şuna
    şunda
    şundan
    şunları
    şunu
    tarafından
    trilyon
    tüm
    üç
    üzere
    var
    vardı
    ve
    veya
    ya
    yani
    yapacak
    yapılan
    yapılması
    yapıyor
    yapmak
    yaptı
    yaptığı
    yaptığını
    yaptıkları
    yedi
    yerine
    yetmiş
    yine
    yirmi
    yoksa
    yüz
    zaten
  userdict_ja.txt: |
    #
    # This is a sample user dictionary for Kuromoji (JapaneseTokenizer)
    #
    # Add entries to this file in order to override the statistical model in terms
    # of segmentation, readings and part-of-speech tags.  Notice that entries do
    # not have weights since they are always used when found.  This is by-design
    # in order to maximize ease-of-use.
    #
    # Entries are defined using the following CSV format:
    #  <text>,<token 1> ... <token n>,<reading 1> ... <reading n>,<part-of-speech tag>
    #
    # Notice that a single half-width space separates tokens and readings, and
    # that the number tokens and readings must match exactly.
    #
    # Also notice that multiple entries with the same <text> is undefined.
    #
    # Whitespace only lines are ignored.  Comments are not allowed on entry lines.
    #

    # Custom segmentation for kanji compounds
    日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞
    関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,カスタム名詞

    # Custom segmentation for compound katakana
    トートバッグ,トート バッグ,トート バッグ,かずカナ名詞
    ショルダーバッグ,ショルダー バッグ,ショルダー バッグ,かずカナ名詞

    # Custom reading for former sumo wrestler
    朝青龍,朝青龍,アサショウリュウ,カスタム人名
