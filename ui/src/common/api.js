/*
 * Copyright 2021 MeshDynamics.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This is a file is a global request-response handler.
 * Do not edit this file unless a global change is required.
 */

import axios from "axios";
import { store } from "./helpers";
import auth from "./actions/auth.actions";
import { getAccesToken } from "./utils/lib/common-utils";
import createAuthRefreshInterceptor from "axios-auth-refresh";
import { refreshAuthLogic, retryRequest } from "./services/auth.service";
import commonUtils from "./utils/commonUtils";
import _ from "lodash";

export function getApi() {
  const api = axios.create();

  const handleTokenChange = () => {
    const token = getAccesToken(store.getState());

    // Default auth header for get and post
    api.defaults.headers.get["Authorization"] = `Bearer ${token}`;
    api.defaults.headers.post["Authorization"] = `Bearer ${token}`;
    api.defaults.headers.put["Authorization"] = `Bearer ${token}`;
    api.defaults.headers.delete["Authorization"] = `Bearer ${token}`;
  };

  store.subscribe(handleTokenChange);

  // Default Headers
  api.defaults.headers.get["Content-Type"] = "application/json";
  api.defaults.headers.post["Content-Type"] = "application/json";
  api.defaults.headers.put["Content-Type"] = "application/json";
  api.defaults.headers.delete["Content-Type"] = "application/json";

  api.interceptors.request.use(
    (config) => {
      config.withCredentials = false;
      //   const token = getAccesToken(store.getState());
      //   config.headers['Authorization'] = `Bearer ${token}`;
      return config;
    },
    (error) => Promise.reject(error)
  );

  createAuthRefreshInterceptor(api, refreshAuthLogic, {
    pauseInstanceWhileRefreshing: true,
    statusCodes: [401, 403],
  });

  api.interceptors.response.use(
    (response) => {
      const contentHeader = response.headers["content-disposition"];
      if (contentHeader) {
        let fileName = "file name here";
        const fileNameAt = contentHeader.indexOf("filename=");
        if (fileNameAt > -1) {
          fileName = _.trim(contentHeader.substr(fileNameAt + 9), " \";='");
        }
        const data = _.isString(response.data) ? response.data : JSON.stringify(response.data);
        commonUtils.downloadAFileToClient(fileName, data);
        return {
          isFileDownloaded: true,
        };
      }
      return response.data;
    },
    (error) => {
      const status = error.response ? error.response.status : null;
      if ((status === 401 || status == 403) && window.authRefeshInProgress) {
        return retryRequest(error);
      }
      return Promise.reject(error);
    }
  );
  return api;
}

const api = getApi();

export default api;
