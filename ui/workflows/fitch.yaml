name: Build Devtool for fitch

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter build version'
        required: true
        default: 'v1.0.71'

jobs:
  buildmacOS:
    name: Build devTool for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Build for macOS(manual)
        env:
          APPLE_ID: ${{ secrets.AC_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          version=${{ github.event.inputs.version }}
          git checkout $version
          npm install
          export RELEASE_TYPE=customer/fitch
          jq --arg version "${version}" '.version = $version' package.json > "tmp" && mv "tmp" package.json
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -m --config electron-builder.customer-fitch.yml --publish always

  buildlinux:
    name: Build devTool for linux
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
      - name: Build for linux(manual)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          version=${{ github.event.inputs.version }}
          git checkout $version
          npm install
          export RELEASE_TYPE=customer/fitch
          jq --arg version "${version}" '.version = $version' package.json > "tmp" && mv "tmp" package.json
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -l --config electron-builder.customer-fitch.yml --publish always

  buildwindows:
    name: Build devTool for windows
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags

      - name: Build for windows(manual)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
        run: |
          choco install yq -y
          echo 'Decoding certificate string'
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.WIN_CSC_LINK }}")
          [IO.File]::WriteAllBytes("md-cert.pfx", $pfx_cert_byte)
          npm install
          $version = "${{ github.event.inputs.version }}"
          git checkout $version
          jq --arg version $version '.version = $version' package.json > .\tmp.txt
          $CONTENT = Get-Content -Path .\tmp.txt
          Remove-Item -path .\package.json
          Add-Content -Path .\package.json -Value $CONTENT
          $Env:RELEASE_TYPE = "customer/fitch"
          yq w .\electron-builder.customer-fitch.yml win.certificateFile md-cert.pfx |  yq w - win.certificatePassword "${{ secrets.WIN_CSC_KEY_PASSWORD }}" > ebtmp.txt
          $BUILDER_CONTENT = Get-Content -Path .\ebtmp.txt
          echo $BUILDER_CONTENT
          Remove-Item -path .\electron-builder.customer-fitch.yml
          Add-Content -Path .\electron-builder.customer-fitch.yml -Value $BUILDER_CONTENT
          npx webpack --mode production --display minimal --config webpack.electron.config.js
          npx electron-builder build -w --config electron-builder.customer-fitch.yml --publish always