package com.cubeui.backend.web.rest;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.FORBIDDEN;
import static org.springframework.http.HttpStatus.NOT_FOUND;
import static org.springframework.http.ResponseEntity.created;
import static org.springframework.http.ResponseEntity.noContent;
import static org.springframework.http.ResponseEntity.ok;
import static org.springframework.http.ResponseEntity.status;

import com.cubeui.backend.domain.DTO.TestPathDTO;
import com.cubeui.backend.domain.DTO.TestServiceDTO;
import com.cubeui.backend.domain.Path;
import com.cubeui.backend.domain.Service;
import com.cubeui.backend.domain.TestConfig;
import com.cubeui.backend.domain.TestPath;
import com.cubeui.backend.domain.TestService;
import com.cubeui.backend.repository.ServiceRepository;
import com.cubeui.backend.repository.TestConfigRepository;
import com.cubeui.backend.repository.TestServiceRepository;
import com.cubeui.backend.web.ErrorResponse;
import com.cubeui.backend.web.exception.RecordNotFoundException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@RestController
@RequestMapping("/api/test-service")
public class TestServiceController {
  @Autowired
  private TestConfigRepository testConfigRepository;
  @Autowired
  private ServiceRepository serviceRepository;
  @Autowired
  private TestServiceRepository testServiceRepository;

  @GetMapping("/{id}")
  public ResponseEntity get(@PathVariable("id") Long id) {
    if(id == null) {
      return status(BAD_REQUEST).body(new ErrorResponse("TestService with ID '" + id +"' is not present."));
    }
    Optional<TestService> existed = this.testServiceRepository.findById(id);
    if(existed.isPresent()) {
      return ok(this.testServiceRepository.findById(id));
    } else {
      return status(NOT_FOUND).body(new ErrorResponse("TestService with ID '" + id + "' not found."));
    }
  }

  @DeleteMapping("/{id}")
  public ResponseEntity delete(@PathVariable("id") Long id) {
    if(id == null) {
      return status(BAD_REQUEST).body(new ErrorResponse("TestService with ID '" + id +"' is not present."));
    }
    Optional<TestService> existed = this.testServiceRepository.findById(id);
    if(existed.isPresent()) {
      this.testServiceRepository.delete(existed.get());
      return noContent().build();
    } else {
      return status(NOT_FOUND).body(new ErrorResponse("TestService with ID '" + id + "' not found."));
    }
  }

  @PostMapping("")
  public ResponseEntity save (@RequestBody TestServiceDTO testServiceDTO, HttpServletRequest request) {
    if(testServiceDTO.getId() != null) {
      return status(FORBIDDEN).body(new ErrorResponse("TestService ID is autogenerated value'" + testServiceDTO.getId()));
    }
    Optional<TestConfig> testConfig = null;
    if(testServiceDTO.getTestId() != null) {
      testConfig = testConfigRepository.findById(testServiceDTO.getTestId());
      if(testConfig.isEmpty()) return status(BAD_REQUEST).body(new ErrorResponse("TestConfig with ID '" + testServiceDTO.getTestId() + "' not found."));
    } else {
      return status(BAD_REQUEST).body(new ErrorResponse("Mandatory field TestConfig Id is empty."));
    }
    Optional<Service> service = null;
    if(testServiceDTO.getServiceId() != null) {
      service = serviceRepository.findById(testServiceDTO.getServiceId());
      if(service.isEmpty()) return status(BAD_REQUEST).body(new ErrorResponse("Service with ID '" + testServiceDTO.getServiceId() + "' not found."));
    } else {
      return status(BAD_REQUEST).body(new ErrorResponse("Mandatory field Service Id is empty."));
    }
    Optional<TestService> testService = this.testServiceRepository.findByTestConfigIdAndServiceId(testServiceDTO.getTestId(), testServiceDTO.getServiceId());
    if (testService.isPresent()) {
      return ok(testService);
    }
    TestService saved = this.testServiceRepository.save(
        TestService.builder()
            .testConfig(testConfig.get())
            .service(service.get())
            .build());
    return created(
        ServletUriComponentsBuilder
            .fromContextPath(request)
            .path(request.getServletPath() + "/{id")
            .buildAndExpand(saved.getId())
            .toUri())
        .body(saved);
  }

  @PutMapping("")
  public ResponseEntity update(@RequestBody TestServiceDTO testServiceDTO, HttpServletRequest request) {
    if(testServiceDTO.getId() == null) {
      return status(FORBIDDEN).body(new ErrorResponse("Mandatory field TestService id is not present in the request."));
    }
    Optional<TestService> existing = testServiceRepository.findById(testServiceDTO.getId());
    if(existing.isPresent()) {
      Optional.ofNullable(testServiceDTO.getTestId()).ifPresent(testConfigId -> {
        Optional<TestConfig> testConfig = Optional.ofNullable(testConfigRepository.findById(testConfigId)).get();
        if(testConfig.isPresent()) {
          existing.get().setTestConfig(testConfig.get());
        } else {
          throw new RecordNotFoundException("TestConfig with ID '" + testServiceDTO.getTestId() + "' not found.");
        }
      });
      Optional.ofNullable(testServiceDTO.getServiceId()).ifPresent(serviceId -> {
        Optional<Service> service = Optional.ofNullable(serviceRepository.findById(serviceId)).get();
        if(service.isPresent()) {
          existing.get().setService(service.get());
        } else {
          throw new RecordNotFoundException("Service with ID '" + testServiceDTO.getServiceId() + "' not found.");
        }
      });
      this.testServiceRepository.save(existing.get());
      return created(
          ServletUriComponentsBuilder
              .fromContextPath(request)
              .path(request.getServletPath() + "/{id")
              .buildAndExpand(existing.get().getId())
              .toUri())
          .body(existing);
    } else {
      return status(NOT_FOUND).body(new ErrorResponse("TestService with ID '" + testServiceDTO.getId() + "' not found."));
    }
  }
}
