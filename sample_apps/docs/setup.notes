#### Building the sample movieinfo app

# mvn package
# first, build Utils and install to make sure MIRest and RestWrapJDBC pick up changes. 
# If you don't run "mvn install", the older Utils bits are packaged. I have scratched my head several times 
# as to why my changes to Utils aren't deployed in the RestWrapJDBC docker image when deployed.

## Build io.cube.Utils jar
mvn clean; mvn package; mvn install

## Build MIRest and update docker image cubeiocorp/sample_apps-mirest:V1-SNAPSHOT
cd MIRest 
# Otherwise, changes to Utils may not be packaged in MIRest war. By default the previously installed Utils jar
# is picked up from the .m2/repository/... folder 
mvn dependency:purge-local-repository -DmanualInclude=io.cube.Utils   
mvn clean; mvn package

## Build RestWrapJDBC and update cubeiocorp/restwrapjdbc:V1-SNAPSHOT
cd RestWrapJDBC
mvn dependency:purge-local-repository -DmanualInclude=io.cube.Utils   
docker push cubeiocorp/restwrapjdbc:V1-SNAPSHOT
docker push cubeiocorp/sample_apps-mirest:V1-SNAPSHOT

## For local runs of the MIRest make sure that local mysql database is up and running
## local mysql database containing the movieinfo db
docker run --name mysql-sakila-v3-instance -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password cubeiocorp/mysql-sakila:v3
# login to bash
docker exec -it mysql-sakila-v3-instance /bin/bash
mysql -ucube -pcubeio

## For kubernetes cluster run on AWS, make sure that the RDS instance is running. Use the connection string 
## from AWS console in the moviebook.yaml file (e.g., sakila2.cnt3lftdrpew.us-west-2.rds.amazonaws.com)
https://us-east-2.console.aws.amazon.com/rds/home?region=us-east-2#GettingStarted:


### Deploying the movieinfo app
# Follow instructions in cubeio/docs/setup to create the kubernetes cluster
# Inject ISTIO sidecar proxy


# Deploy app and envoy-cs filters
kubectl apply -f demos/moviebook/moviebook.yaml

# If you are running the cube server locally, then establish an ssh tunnel as follows. 
# The IP at the end is that of the solr service. Look at cube.conf
ssh -R 0.0.0.0:8080:localhost:8080 -i ~/.ssh/id_rsa ubuntu@18.191.135.125


### Deploy Cube services
kubectl apply -f cube-deploy/cube-cs.yaml


### Record and Replay

## Recording steps
# change the lua filters (one-time with appropriate customer-id and instance-id)

# deploy envoy-cs yaml files
kubectl apply -f demos/moviebook/moviebook-envoy-cs.yaml


# Postman requests: recordstart
# record start (app or run records entered manualy)
# play traffic
# record stop
# check status


## Replay
# replayinit -- get the replay id

# deploy envoy-replay yaml files, and the mock-all-except-& yaml files. 
# Do we need to do this? kubectl delete -f moviebook/moviebook-envoy-cs.yaml
kubectl apply -f demos/moviebook/moviebook-envoy-replay-cs.yaml
kubectl apply -f demos/moviebook/mock-all-except-moviebook.yaml


# replaystart --replay-id & collection-id needs to be fetched from 
# replaystatus

## Analyze record and replay
# replayanalyzestart


# venky-test-c8-78b93e66-ad45-4a49-88f2-a948d87db20c


#### Notes
# If you are running the cube server locally, then establish an ssh tunnel as follows. 
# The IP at the end is that of the solr service. Look at cube.conf
ssh -R 0.0.0.0:8080:localhost:8080 -i ~/.ssh/id_rsa ubuntu@18.191.135.125

# When services are run from the eclipse console, the logs will be in the install directory. (e.g., /Applications/Eclipse.app/MacOS/...)

# ISSUES
create cluster, record, replay (as many times); However, after replay, the record doesn't seem to work. Deployed the services again and the envoy filters, deleted mock-all* and replay filters, etc. Nothing seems to help.