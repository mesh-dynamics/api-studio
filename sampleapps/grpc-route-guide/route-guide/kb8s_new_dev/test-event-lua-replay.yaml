apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-event-lua-replay
  namespace: grpc
  labels:
    app: route-guide
spec:
  workloadSelector:
    labels:
      component: route-guide-service-replay
      namespace: grpc
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          # portNumber: 8080
          filterchain:
            filter:
              name: "envoy.http_connection_manager"
              subFilter:
                name: "envoy.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.config.filter.http.lua.v2.Lua"
            inlineCode: |
              local random = math.random
              math.randomseed((os.time()+os.clock())*1000000)
              function uuid()
                    local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
                    return string.gsub(template, '[xy]', function (c)
                  local v = (c == 'x') and random(0, 0xf) or random(8, 0xb)
                  return string.format('%x', v)
                end)
              end
              -- taken from https://gist.github.com/tylerneylon/59f4bcf316be525b30ab#file-json-lua-L66
              local function generateTrace()
                -- return random(0, 9223372036854775807)
                return random (0 ,2147483647)
              end
              function enc(data)
                local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
                  return ((data:gsub('.', function(x)
                      local r,b='',x:byte()
                      for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                      return r;
                  end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                      if (#x < 6) then return '' end
                      local c=0
                      for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                      return b:sub(c+1,c+1)
                  end)..({ '', '==', '=' })[#data%3+1])
              end
              local function starts_with(str, start)
                return str:sub(1, #start) == start
              end
              function addJsonObjToBuffer(buf, tbl)
                local listdelim = ''
                for key, value in pairs(tbl) do
                  buf[#buf + 1] = listdelim .. string.format(" %q : %q ", key, value)
                  listdelim = ', '
                end
              end
              function addMultiValuedMapToBuffer(buf, tbl, start_delim, fieldname)
                buf[#buf+1] = start_delim .. string.format("%q", fieldname) .. ': {'
                local listdelim = ''
                for key, value in pairs(tbl) do
                  buf[#buf + 1] = listdelim .. string.format(" %q : [%q] ", key, value)
                  listdelim = ', '
                end
                buf[#buf+1] = '}'
                delim = ', '
              end
              function addQueryParamsToBuffer(buf, queryParamsStr, start_delim)
                buf[#buf+1] = start_delim .. '"queryParams" : { '
                local queryParamsMap = {}
                if not isempty(queryParamsStr) then
                  for key,value in queryParamsStr:gmatch "([^=%?&]+)=([^=&]+)" do
                    if queryParamsMap[key] ~= nil then
                      queryParamsMap[key] = queryParamsMap[key] .. ', ' .. string.format("%q" , value)
                    else
                      queryParamsMap[key] = string.format("%q", value)
                    end
                  end
                end
                local listdelim = ''
                for key, value in pairs(queryParamsMap) do
                  buf[#buf + 1] = listdelim .. string.format("%q", key) .. ' : [' .. value .. ']'
                  listdelim = ', '
                end
                buf[#buf+1] = '}'
                delim = ', '
              end
              function isempty(s)
                return s == nil or s == ''
              end
              function logRequest(handle, cubeEvent)
                local buf = {'{'}
                local listdelim = ', '
                logEvent(buf,handle,cubeEvent, 'GRPCRequestPayload')
                buf[#buf+1] = listdelim .. string.format('"method":%q', handle:headers():get(":method") or "")
                local fullPath = cubeEvent["apiPath"]
                local path = string.match(fullPath ,  "[^%?]+")
                local queryParamsStr = string.match(fullPath , "%?.+")
                -- handle:logErr('path : ' .. path)
                -- handle:logErr('queryParam : ' .. queryParamsStr)
                addQueryParamsToBuffer(buf, queryParamsStr, ', ')
                buf[#buf+1] = listdelim .. string.format('"path":%q', path)
                buf[#buf+1] = ' } ] }'
                data = table.concat(buf)
                callStoreEvent(handle, data)
                handle:logErr('[cube req]' .. data)
              end
              function callStoreEvent(handle, data)
                local hhdr, hbody = handle:httpCall(
                  "outbound|8080||cubeui-backend.cube.svc.cluster.local",
                  {
                    [":method"] = "POST",
                    [":path"] = "/api/cs/storeEvent",
                    [":authority"] = "cube",
                    ["Content-Type"] = "application/json",
                    ["Authorization"] = "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJNZXNoREFnZW50VXNlckBjdWJlY29ycC5pbyIsInJvbGVzIjpbIlJPTEVfVVNFUiJdLCJ0eXBlIjoicGF0IiwiY3VzdG9tZXJfaWQiOjMsImlhdCI6MTU4OTgyODI4NiwiZXhwIjoxOTA1MTg4Mjg2fQ.Xn6JTEIAi58it6iOSZ0G7u2waK6a_c-Elpk_cpWsK9s"
                  },
                  data,
                  5000)
                 if hbody then
                  handle:logErr("Response from cube : ".. hbody)
                 end
              end
              function logResponse(handle, cubeEvent)
                local buf = {'{'}
                local listdelim = ', '
                logEvent(buf,handle,cubeEvent, 'GRPCResponsePayload')
                local fullPath = cubeEvent["apiPath"]
                local path = string.match(fullPath ,  "[^%?]+")
                buf[#buf+1] = listdelim .. string.format('"path":%q', path)
                buf[#buf+1] = listdelim .. string.format('"status":%q', handle:headers():get(":status") or "")
                buf[#buf+1] = ' } ] }'
                data = table.concat(buf)
                callStoreEvent(handle, data)
                handle:logErr('[cube resp]' .. data)
              end
              function logEvent(buf, handle, cubeEvent, payloadType)
                addJsonObjToBuffer(buf, cubeEvent)
                local listdelim = ', '
                buf[#buf + 1] = listdelim .. ' "payload" : [ "'.. payloadType ..'", { '
                local hdrs = handle:headers()
                addMultiValuedMapToBuffer(buf, hdrs, '', "hdrs")
                local body = handle:body()
                local b = ''
                if body then
                  local len = body:length()
                  b = body:getBytes(0, len)
                  -- b = "Hello World"
                end
                -- handle:logErr('[PM_BODY]' .. body)
                handle:logErr('[PM_B]' .. enc(b))
                local trailers = handle:trailers()
                if trailers then
                 for key, value in pairs(trailers) do
                    handle:logErr('[TRAILER_LOG]' .. "key: " .. key .. " value: " .. value)
                  end
                  addMultiValuedMapToBuffer(buf, trailers, ', ', "trls")
                end
                buf[#buf+1] = listdelim .. '"body":"' .. enc(b) .. '"'
                buf[#buf+1] = listdelim .. ' "payloadState" : "WrappedEncoded" '
              end
              function envoy_on_response(response_handle)
                local starttime = os.clock()
                local cubeResp = {}

                cubeResp["customerId"] = "CubeCorp"
                cubeResp["app"] = "grpc"
                cubeResp["instanceId"] = "prod"
                cubeResp["service"] = "route-guide-service"
                cubeResp["run_type"] = "Replay"
                -- "Record"
                cubeResp["recordingType"] = "Golden"
                 -- "Golden"
                cubeResp["eventType"] = "HTTPResponse"
                cubeResp["timestamp"] = os.date("%Y-%m-%dT%H:%M:%SZ")

                if (crequestid) then cubeResp["reqId"] = crequestid end
                if (traceId) then cubeResp["traceId"] = traceId end
                if (spanId) then cubeResp["spanId"] = spanId end
                if (parentSpanId) then cubeResp["parentSpanId"] = parentSpanId end
                if (apiPath) then cubeResp["apiPath"] = apiPath end

                logResponse(response_handle, cubeResp)
                local endtime = os.clock()
                response_handle:logErr('End time ' .. endtime)
                response_handle:logErr('envoy_on_response time ' .. (endtime - starttime))
              end
              function envoy_on_request(request_handle)
                local service = "route-guide-service"
                local cubeReq = {}
                xrequestid = request_handle:headers():get("x-request-id")
                -- Setting trace as constant for analysis to work, can set actual once trace propagation is done
                -- traceId = "CONSTANT-TRACE-GRPC"
                -- traceId = request_handle:headers():get("x-b3-traceid")
                traceId = request_handle:headers():get("x-datadog-trace-id")
                if not (traceId) then
                  traceId = generateTrace()
                  request_handle:logErr("Generated TRACE : " .. traceId)
                  request_handle:headers():add("x-datadog-trace-id", traceId)
                end
                spanId = generateTrace()
                parentSpanId = request_handle:headers():get("ot-baggage-md-parent-id")

                apiPath = request_handle:headers():get(":path") or "/"
                if starts_with(apiPath, "/") and apiPath ~= "/" then
                    apiPath = apiPath:sub(2, #apiPath)
                end
                crequestid = service .. "-" .. traceId .. "-" .. uuid()
                -- crequestid = service .. "-" .. uuid()

                cubeReq["customerId"] = "CubeCorp"
                cubeReq["app"] = "grpc"
                cubeReq["instanceId"] = "prod"
                cubeReq["service"] = "route-guide-service"
                cubeReq["run_type"] = "Replay"
                cubeReq["recordingType"] = "Golden"
                cubeReq["apiPath"] = apiPath
                cubeReq["traceId"] = traceId
                cubeReq["spanId"] = spanId
                if parentSpanId then cubeReq["parentSpanId"] = parentSpanId end
                cubeReq["reqId"] = crequestid
                cubeReq["eventType"] = "HTTPRequest"
                cubeReq["timestamp"] = os.date("%Y-%m-%dT%H:%M:%SZ")

                request_handle:logErr("Request id: " .. crequestid)

                logRequest(request_handle, cubeReq)
                request_handle:headers():remove("ot-baggage-md-parent-id")
                request_handle:headers():add("ot-baggage-md-parent-id", spanId)
              end