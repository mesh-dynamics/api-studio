/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cubeiosample.webservices.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-02")
public class ReturnMovieResult implements org.apache.thrift.TBase<ReturnMovieResult, ReturnMovieResult._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnMovieResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnMovieResult");

  private static final org.apache.thrift.protocol.TField RENTAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RETURN_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("returnUpdates", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentUpdates", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReturnMovieResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReturnMovieResultTupleSchemeFactory();

  public int rentalId; // required
  public int returnUpdates; // required
  public int paymentUpdates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RENTAL_ID((short)1, "rentalId"),
    RETURN_UPDATES((short)2, "returnUpdates"),
    PAYMENT_UPDATES((short)3, "paymentUpdates");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RENTAL_ID
          return RENTAL_ID;
        case 2: // RETURN_UPDATES
          return RETURN_UPDATES;
        case 3: // PAYMENT_UPDATES
          return PAYMENT_UPDATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RENTALID_ISSET_ID = 0;
  private static final int __RETURNUPDATES_ISSET_ID = 1;
  private static final int __PAYMENTUPDATES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RENTAL_ID, new org.apache.thrift.meta_data.FieldMetaData("rentalId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("returnUpdates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("paymentUpdates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnMovieResult.class, metaDataMap);
  }

  public ReturnMovieResult() {
  }

  public ReturnMovieResult(
    int rentalId,
    int returnUpdates,
    int paymentUpdates)
  {
    this();
    this.rentalId = rentalId;
    setRentalIdIsSet(true);
    this.returnUpdates = returnUpdates;
    setReturnUpdatesIsSet(true);
    this.paymentUpdates = paymentUpdates;
    setPaymentUpdatesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReturnMovieResult(ReturnMovieResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rentalId = other.rentalId;
    this.returnUpdates = other.returnUpdates;
    this.paymentUpdates = other.paymentUpdates;
  }

  public ReturnMovieResult deepCopy() {
    return new ReturnMovieResult(this);
  }

  @Override
  public void clear() {
    setRentalIdIsSet(false);
    this.rentalId = 0;
    setReturnUpdatesIsSet(false);
    this.returnUpdates = 0;
    setPaymentUpdatesIsSet(false);
    this.paymentUpdates = 0;
  }

  public int getRentalId() {
    return this.rentalId;
  }

  public ReturnMovieResult setRentalId(int rentalId) {
    this.rentalId = rentalId;
    setRentalIdIsSet(true);
    return this;
  }

  public void unsetRentalId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RENTALID_ISSET_ID);
  }

  /** Returns true if field rentalId is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RENTALID_ISSET_ID);
  }

  public void setRentalIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RENTALID_ISSET_ID, value);
  }

  public int getReturnUpdates() {
    return this.returnUpdates;
  }

  public ReturnMovieResult setReturnUpdates(int returnUpdates) {
    this.returnUpdates = returnUpdates;
    setReturnUpdatesIsSet(true);
    return this;
  }

  public void unsetReturnUpdates() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETURNUPDATES_ISSET_ID);
  }

  /** Returns true if field returnUpdates is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnUpdates() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETURNUPDATES_ISSET_ID);
  }

  public void setReturnUpdatesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETURNUPDATES_ISSET_ID, value);
  }

  public int getPaymentUpdates() {
    return this.paymentUpdates;
  }

  public ReturnMovieResult setPaymentUpdates(int paymentUpdates) {
    this.paymentUpdates = paymentUpdates;
    setPaymentUpdatesIsSet(true);
    return this;
  }

  public void unsetPaymentUpdates() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAYMENTUPDATES_ISSET_ID);
  }

  /** Returns true if field paymentUpdates is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentUpdates() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAYMENTUPDATES_ISSET_ID);
  }

  public void setPaymentUpdatesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAYMENTUPDATES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case RENTAL_ID:
      if (value == null) {
        unsetRentalId();
      } else {
        setRentalId((Integer)value);
      }
      break;

    case RETURN_UPDATES:
      if (value == null) {
        unsetReturnUpdates();
      } else {
        setReturnUpdates((Integer)value);
      }
      break;

    case PAYMENT_UPDATES:
      if (value == null) {
        unsetPaymentUpdates();
      } else {
        setPaymentUpdates((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RENTAL_ID:
      return getRentalId();

    case RETURN_UPDATES:
      return getReturnUpdates();

    case PAYMENT_UPDATES:
      return getPaymentUpdates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RENTAL_ID:
      return isSetRentalId();
    case RETURN_UPDATES:
      return isSetReturnUpdates();
    case PAYMENT_UPDATES:
      return isSetPaymentUpdates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReturnMovieResult)
      return this.equals((ReturnMovieResult)that);
    return false;
  }

  public boolean equals(ReturnMovieResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rentalId = true;
    boolean that_present_rentalId = true;
    if (this_present_rentalId || that_present_rentalId) {
      if (!(this_present_rentalId && that_present_rentalId))
        return false;
      if (this.rentalId != that.rentalId)
        return false;
    }

    boolean this_present_returnUpdates = true;
    boolean that_present_returnUpdates = true;
    if (this_present_returnUpdates || that_present_returnUpdates) {
      if (!(this_present_returnUpdates && that_present_returnUpdates))
        return false;
      if (this.returnUpdates != that.returnUpdates)
        return false;
    }

    boolean this_present_paymentUpdates = true;
    boolean that_present_paymentUpdates = true;
    if (this_present_paymentUpdates || that_present_paymentUpdates) {
      if (!(this_present_paymentUpdates && that_present_paymentUpdates))
        return false;
      if (this.paymentUpdates != that.paymentUpdates)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + rentalId;

    hashCode = hashCode * 8191 + returnUpdates;

    hashCode = hashCode * 8191 + paymentUpdates;

    return hashCode;
  }

  @Override
  public int compareTo(ReturnMovieResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRentalId()).compareTo(other.isSetRentalId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalId, other.rentalId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnUpdates()).compareTo(other.isSetReturnUpdates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnUpdates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnUpdates, other.returnUpdates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentUpdates()).compareTo(other.isSetPaymentUpdates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentUpdates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentUpdates, other.paymentUpdates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReturnMovieResult(");
    boolean first = true;

    sb.append("rentalId:");
    sb.append(this.rentalId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnUpdates:");
    sb.append(this.returnUpdates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentUpdates:");
    sb.append(this.paymentUpdates);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReturnMovieResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReturnMovieResultStandardScheme getScheme() {
      return new ReturnMovieResultStandardScheme();
    }
  }

  private static class ReturnMovieResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReturnMovieResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnMovieResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RENTAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rentalId = iprot.readI32();
              struct.setRentalIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RETURN_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnUpdates = iprot.readI32();
              struct.setReturnUpdatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentUpdates = iprot.readI32();
              struct.setPaymentUpdatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnMovieResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RENTAL_ID_FIELD_DESC);
      oprot.writeI32(struct.rentalId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETURN_UPDATES_FIELD_DESC);
      oprot.writeI32(struct.returnUpdates);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_UPDATES_FIELD_DESC);
      oprot.writeI32(struct.paymentUpdates);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReturnMovieResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReturnMovieResultTupleScheme getScheme() {
      return new ReturnMovieResultTupleScheme();
    }
  }

  private static class ReturnMovieResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReturnMovieResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReturnMovieResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRentalId()) {
        optionals.set(0);
      }
      if (struct.isSetReturnUpdates()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentUpdates()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRentalId()) {
        oprot.writeI32(struct.rentalId);
      }
      if (struct.isSetReturnUpdates()) {
        oprot.writeI32(struct.returnUpdates);
      }
      if (struct.isSetPaymentUpdates()) {
        oprot.writeI32(struct.paymentUpdates);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReturnMovieResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.rentalId = iprot.readI32();
        struct.setRentalIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.returnUpdates = iprot.readI32();
        struct.setReturnUpdatesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentUpdates = iprot.readI32();
        struct.setPaymentUpdatesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

