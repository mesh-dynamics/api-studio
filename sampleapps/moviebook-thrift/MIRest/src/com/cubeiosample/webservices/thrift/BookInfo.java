/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cubeiosample.webservices.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-02")
public class BookInfo implements org.apache.thrift.TBase<BookInfo, BookInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BookInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BookInfo");

  private static final org.apache.thrift.protocol.TField REVIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviews", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RATINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("ratings", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("details", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BookInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BookInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<Review> reviews; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Rating> ratings; // required
  public @org.apache.thrift.annotation.Nullable Details details; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REVIEWS((short)1, "reviews"),
    RATINGS((short)2, "ratings"),
    DETAILS((short)3, "details");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REVIEWS
          return REVIEWS;
        case 2: // RATINGS
          return RATINGS;
        case 3: // DETAILS
          return DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REVIEWS, new org.apache.thrift.meta_data.FieldMetaData("reviews", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Review.class))));
    tmpMap.put(_Fields.RATINGS, new org.apache.thrift.meta_data.FieldMetaData("ratings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Rating.class))));
    tmpMap.put(_Fields.DETAILS, new org.apache.thrift.meta_data.FieldMetaData("details", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Details.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BookInfo.class, metaDataMap);
  }

  public BookInfo() {
  }

  public BookInfo(
    java.util.List<Review> reviews,
    java.util.List<Rating> ratings,
    Details details)
  {
    this();
    this.reviews = reviews;
    this.ratings = ratings;
    this.details = details;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BookInfo(BookInfo other) {
    if (other.isSetReviews()) {
      java.util.List<Review> __this__reviews = new java.util.ArrayList<Review>(other.reviews.size());
      for (Review other_element : other.reviews) {
        __this__reviews.add(new Review(other_element));
      }
      this.reviews = __this__reviews;
    }
    if (other.isSetRatings()) {
      java.util.List<Rating> __this__ratings = new java.util.ArrayList<Rating>(other.ratings.size());
      for (Rating other_element : other.ratings) {
        __this__ratings.add(new Rating(other_element));
      }
      this.ratings = __this__ratings;
    }
    if (other.isSetDetails()) {
      this.details = new Details(other.details);
    }
  }

  public BookInfo deepCopy() {
    return new BookInfo(this);
  }

  @Override
  public void clear() {
    this.reviews = null;
    this.ratings = null;
    this.details = null;
  }

  public int getReviewsSize() {
    return (this.reviews == null) ? 0 : this.reviews.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Review> getReviewsIterator() {
    return (this.reviews == null) ? null : this.reviews.iterator();
  }

  public void addToReviews(Review elem) {
    if (this.reviews == null) {
      this.reviews = new java.util.ArrayList<Review>();
    }
    this.reviews.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Review> getReviews() {
    return this.reviews;
  }

  public BookInfo setReviews(@org.apache.thrift.annotation.Nullable java.util.List<Review> reviews) {
    this.reviews = reviews;
    return this;
  }

  public void unsetReviews() {
    this.reviews = null;
  }

  /** Returns true if field reviews is set (has been assigned a value) and false otherwise */
  public boolean isSetReviews() {
    return this.reviews != null;
  }

  public void setReviewsIsSet(boolean value) {
    if (!value) {
      this.reviews = null;
    }
  }

  public int getRatingsSize() {
    return (this.ratings == null) ? 0 : this.ratings.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Rating> getRatingsIterator() {
    return (this.ratings == null) ? null : this.ratings.iterator();
  }

  public void addToRatings(Rating elem) {
    if (this.ratings == null) {
      this.ratings = new java.util.ArrayList<Rating>();
    }
    this.ratings.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Rating> getRatings() {
    return this.ratings;
  }

  public BookInfo setRatings(@org.apache.thrift.annotation.Nullable java.util.List<Rating> ratings) {
    this.ratings = ratings;
    return this;
  }

  public void unsetRatings() {
    this.ratings = null;
  }

  /** Returns true if field ratings is set (has been assigned a value) and false otherwise */
  public boolean isSetRatings() {
    return this.ratings != null;
  }

  public void setRatingsIsSet(boolean value) {
    if (!value) {
      this.ratings = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Details getDetails() {
    return this.details;
  }

  public BookInfo setDetails(@org.apache.thrift.annotation.Nullable Details details) {
    this.details = details;
    return this;
  }

  public void unsetDetails() {
    this.details = null;
  }

  /** Returns true if field details is set (has been assigned a value) and false otherwise */
  public boolean isSetDetails() {
    return this.details != null;
  }

  public void setDetailsIsSet(boolean value) {
    if (!value) {
      this.details = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case REVIEWS:
      if (value == null) {
        unsetReviews();
      } else {
        setReviews((java.util.List<Review>)value);
      }
      break;

    case RATINGS:
      if (value == null) {
        unsetRatings();
      } else {
        setRatings((java.util.List<Rating>)value);
      }
      break;

    case DETAILS:
      if (value == null) {
        unsetDetails();
      } else {
        setDetails((Details)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REVIEWS:
      return getReviews();

    case RATINGS:
      return getRatings();

    case DETAILS:
      return getDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REVIEWS:
      return isSetReviews();
    case RATINGS:
      return isSetRatings();
    case DETAILS:
      return isSetDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BookInfo)
      return this.equals((BookInfo)that);
    return false;
  }

  public boolean equals(BookInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_reviews = true && this.isSetReviews();
    boolean that_present_reviews = true && that.isSetReviews();
    if (this_present_reviews || that_present_reviews) {
      if (!(this_present_reviews && that_present_reviews))
        return false;
      if (!this.reviews.equals(that.reviews))
        return false;
    }

    boolean this_present_ratings = true && this.isSetRatings();
    boolean that_present_ratings = true && that.isSetRatings();
    if (this_present_ratings || that_present_ratings) {
      if (!(this_present_ratings && that_present_ratings))
        return false;
      if (!this.ratings.equals(that.ratings))
        return false;
    }

    boolean this_present_details = true && this.isSetDetails();
    boolean that_present_details = true && that.isSetDetails();
    if (this_present_details || that_present_details) {
      if (!(this_present_details && that_present_details))
        return false;
      if (!this.details.equals(that.details))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReviews()) ? 131071 : 524287);
    if (isSetReviews())
      hashCode = hashCode * 8191 + reviews.hashCode();

    hashCode = hashCode * 8191 + ((isSetRatings()) ? 131071 : 524287);
    if (isSetRatings())
      hashCode = hashCode * 8191 + ratings.hashCode();

    hashCode = hashCode * 8191 + ((isSetDetails()) ? 131071 : 524287);
    if (isSetDetails())
      hashCode = hashCode * 8191 + details.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BookInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReviews()).compareTo(other.isSetReviews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviews, other.reviews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatings()).compareTo(other.isSetRatings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratings, other.ratings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetails()).compareTo(other.isSetDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.details, other.details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BookInfo(");
    boolean first = true;

    sb.append("reviews:");
    if (this.reviews == null) {
      sb.append("null");
    } else {
      sb.append(this.reviews);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ratings:");
    if (this.ratings == null) {
      sb.append("null");
    } else {
      sb.append(this.ratings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("details:");
    if (this.details == null) {
      sb.append("null");
    } else {
      sb.append(this.details);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (details != null) {
      details.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BookInfoStandardScheme getScheme() {
      return new BookInfoStandardScheme();
    }
  }

  private static class BookInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<BookInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BookInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REVIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.reviews = new java.util.ArrayList<Review>(_list0.size);
                @org.apache.thrift.annotation.Nullable Review _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Review();
                  _elem1.read(iprot);
                  struct.reviews.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setReviewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RATINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.ratings = new java.util.ArrayList<Rating>(_list3.size);
                @org.apache.thrift.annotation.Nullable Rating _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Rating();
                  _elem4.read(iprot);
                  struct.ratings.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setRatingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.details = new Details();
              struct.details.read(iprot);
              struct.setDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BookInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reviews != null) {
        oprot.writeFieldBegin(REVIEWS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.reviews.size()));
          for (Review _iter6 : struct.reviews)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ratings != null) {
        oprot.writeFieldBegin(RATINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ratings.size()));
          for (Rating _iter7 : struct.ratings)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.details != null) {
        oprot.writeFieldBegin(DETAILS_FIELD_DESC);
        struct.details.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BookInfoTupleScheme getScheme() {
      return new BookInfoTupleScheme();
    }
  }

  private static class BookInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<BookInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BookInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReviews()) {
        optionals.set(0);
      }
      if (struct.isSetRatings()) {
        optionals.set(1);
      }
      if (struct.isSetDetails()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReviews()) {
        {
          oprot.writeI32(struct.reviews.size());
          for (Review _iter8 : struct.reviews)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetRatings()) {
        {
          oprot.writeI32(struct.ratings.size());
          for (Rating _iter9 : struct.ratings)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetDetails()) {
        struct.details.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BookInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.reviews = new java.util.ArrayList<Review>(_list10.size);
          @org.apache.thrift.annotation.Nullable Review _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new Review();
            _elem11.read(iprot);
            struct.reviews.add(_elem11);
          }
        }
        struct.setReviewsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ratings = new java.util.ArrayList<Rating>(_list13.size);
          @org.apache.thrift.annotation.Nullable Rating _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new Rating();
            _elem14.read(iprot);
            struct.ratings.add(_elem14);
          }
        }
        struct.setRatingsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.details = new Details();
        struct.details.read(iprot);
        struct.setDetailsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

