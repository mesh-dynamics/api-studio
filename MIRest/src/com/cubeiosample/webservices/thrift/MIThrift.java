/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cubeiosample.webservices.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-02")
public class MIThrift {

  public interface Iface {

    public boolean healthCheck() throws org.apache.thrift.TException;

    public ListMovieResult listMovies(String filmName, String keyWord, String actor,
        io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException;

    public RentMovieResult rentMovie(RentalInfo rentalInfo, io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException;

    public ListStoreResult listStores(int filmId, io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException;

    public ReturnMovieResult returnMovie(ReturnInfo returnInfo,
        io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void healthCheck(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void listMovies(String filmName, String keyWord, String actor,
        io.cube.tracing.thriftjava.Span span,
        org.apache.thrift.async.AsyncMethodCallback<ListMovieResult> resultHandler) throws org.apache.thrift.TException;

    public void rentMovie(RentalInfo rentalInfo, io.cube.tracing.thriftjava.Span span,
        org.apache.thrift.async.AsyncMethodCallback<RentMovieResult> resultHandler) throws org.apache.thrift.TException;

    public void listStores(int filmId, io.cube.tracing.thriftjava.Span span,
        org.apache.thrift.async.AsyncMethodCallback<ListStoreResult> resultHandler) throws org.apache.thrift.TException;

    public void returnMovie(ReturnInfo returnInfo, io.cube.tracing.thriftjava.Span span,
        org.apache.thrift.async.AsyncMethodCallback<ReturnMovieResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean healthCheck() throws org.apache.thrift.TException
    {
      send_healthCheck();
      return recv_healthCheck();
    }

    public void send_healthCheck() throws org.apache.thrift.TException
    {
      healthCheck_args args = new healthCheck_args();
      sendBase("healthCheck", args);
    }

    public boolean recv_healthCheck() throws org.apache.thrift.TException
    {
      healthCheck_result result = new healthCheck_result();
      receiveBase(result, "healthCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "healthCheck failed: unknown result");
    }

    public ListMovieResult listMovies(String filmName, String keyWord, String actor, io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException
    {
      send_listMovies(filmName, keyWord, actor, span);
      return recv_listMovies();
    }

    public void send_listMovies(String filmName, String keyWord, String actor, io.cube.tracing.thriftjava.Span span) throws org.apache.thrift.TException
    {
      listMovies_args args = new listMovies_args();
      args.setFilmName(filmName);
      args.setKeyWord(keyWord);
      args.setActor(actor);
      args.setSpan(span);
      sendBase("listMovies", args);
    }

    public ListMovieResult recv_listMovies() throws GenericMIThriftException, org.apache.thrift.TException
    {
      listMovies_result result = new listMovies_result();
      receiveBase(result, "listMovies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.genericException != null) {
        throw result.genericException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMovies failed: unknown result");
    }

    public RentMovieResult rentMovie(RentalInfo rentalInfo, io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException
    {
      send_rentMovie(rentalInfo, span);
      return recv_rentMovie();
    }

    public void send_rentMovie(RentalInfo rentalInfo, io.cube.tracing.thriftjava.Span span) throws org.apache.thrift.TException
    {
      rentMovie_args args = new rentMovie_args();
      args.setRentalInfo(rentalInfo);
      args.setSpan(span);
      sendBase("rentMovie", args);
    }

    public RentMovieResult recv_rentMovie() throws GenericMIThriftException, org.apache.thrift.TException
    {
      rentMovie_result result = new rentMovie_result();
      receiveBase(result, "rentMovie");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.genericException != null) {
        throw result.genericException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rentMovie failed: unknown result");
    }

    public ListStoreResult listStores(int filmId, io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException
    {
      send_listStores(filmId, span);
      return recv_listStores();
    }

    public void send_listStores(int filmId, io.cube.tracing.thriftjava.Span span) throws org.apache.thrift.TException
    {
      listStores_args args = new listStores_args();
      args.setFilmId(filmId);
      args.setSpan(span);
      sendBase("listStores", args);
    }

    public ListStoreResult recv_listStores() throws GenericMIThriftException, org.apache.thrift.TException
    {
      listStores_result result = new listStores_result();
      receiveBase(result, "listStores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.genericException != null) {
        throw result.genericException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listStores failed: unknown result");
    }

    public ReturnMovieResult returnMovie(ReturnInfo returnInfo, io.cube.tracing.thriftjava.Span span) throws GenericMIThriftException, org.apache.thrift.TException
    {
      send_returnMovie(returnInfo, span);
      return recv_returnMovie();
    }

    public void send_returnMovie(ReturnInfo returnInfo, io.cube.tracing.thriftjava.Span span) throws org.apache.thrift.TException
    {
      returnMovie_args args = new returnMovie_args();
      args.setReturnInfo(returnInfo);
      args.setSpan(span);
      sendBase("returnMovie", args);
    }

    public ReturnMovieResult recv_returnMovie() throws GenericMIThriftException, org.apache.thrift.TException
    {
      returnMovie_result result = new returnMovie_result();
      receiveBase(result, "returnMovie");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.genericException != null) {
        throw result.genericException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnMovie failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void healthCheck(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      healthCheck_call method_call = new healthCheck_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class healthCheck_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      public healthCheck_call(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("healthCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        healthCheck_args args = new healthCheck_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_healthCheck();
      }
    }

    public void listMovies(String filmName, String keyWord, String actor, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<ListMovieResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMovies_call method_call = new listMovies_call(filmName, keyWord, actor, span, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMovies_call extends org.apache.thrift.async.TAsyncMethodCall<ListMovieResult> {
      private String filmName;
      private String keyWord;
      private String actor;
      private io.cube.tracing.thriftjava.Span span;
      public listMovies_call(String filmName, String keyWord, String actor, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<ListMovieResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filmName = filmName;
        this.keyWord = keyWord;
        this.actor = actor;
        this.span = span;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMovies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMovies_args args = new listMovies_args();
        args.setFilmName(filmName);
        args.setKeyWord(keyWord);
        args.setActor(actor);
        args.setSpan(span);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ListMovieResult getResult() throws GenericMIThriftException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMovies();
      }
    }

    public void rentMovie(RentalInfo rentalInfo, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<RentMovieResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rentMovie_call method_call = new rentMovie_call(rentalInfo, span, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rentMovie_call extends org.apache.thrift.async.TAsyncMethodCall<RentMovieResult> {
      private RentalInfo rentalInfo;
      private io.cube.tracing.thriftjava.Span span;
      public rentMovie_call(RentalInfo rentalInfo, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<RentMovieResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rentalInfo = rentalInfo;
        this.span = span;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rentMovie", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rentMovie_args args = new rentMovie_args();
        args.setRentalInfo(rentalInfo);
        args.setSpan(span);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RentMovieResult getResult() throws GenericMIThriftException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rentMovie();
      }
    }

    public void listStores(int filmId, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<ListStoreResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listStores_call method_call = new listStores_call(filmId, span, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listStores_call extends org.apache.thrift.async.TAsyncMethodCall<ListStoreResult> {
      private int filmId;
      private io.cube.tracing.thriftjava.Span span;
      public listStores_call(int filmId, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<ListStoreResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filmId = filmId;
        this.span = span;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listStores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listStores_args args = new listStores_args();
        args.setFilmId(filmId);
        args.setSpan(span);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ListStoreResult getResult() throws GenericMIThriftException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listStores();
      }
    }

    public void returnMovie(ReturnInfo returnInfo, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<ReturnMovieResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnMovie_call method_call = new returnMovie_call(returnInfo, span, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnMovie_call extends org.apache.thrift.async.TAsyncMethodCall<ReturnMovieResult> {
      private ReturnInfo returnInfo;
      private io.cube.tracing.thriftjava.Span span;
      public returnMovie_call(ReturnInfo returnInfo, io.cube.tracing.thriftjava.Span span, org.apache.thrift.async.AsyncMethodCallback<ReturnMovieResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.returnInfo = returnInfo;
        this.span = span;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnMovie", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnMovie_args args = new returnMovie_args();
        args.setReturnInfo(returnInfo);
        args.setSpan(span);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnMovieResult getResult() throws GenericMIThriftException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnMovie();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.MeshDTBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.MeshDProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.MeshDProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.MeshDProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.MeshDProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("healthCheck", new healthCheck());
      processMap.put("listMovies", new listMovies());
      processMap.put("rentMovie", new rentMovie());
      processMap.put("listStores", new listStores());
      processMap.put("returnMovie", new returnMovie());
      return processMap;
    }

    public static class healthCheck<I extends Iface> extends org.apache.thrift.MeshDProcessFunction<I, healthCheck_args> {
      public healthCheck() {
        super("healthCheck");
      }

      public healthCheck_args getEmptyArgsInstance() {
        return new healthCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public healthCheck_result getResult(I iface, healthCheck_args args) throws org.apache.thrift.TException {
        healthCheck_result result = new healthCheck_result();
        result.success = iface.healthCheck();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class listMovies<I extends Iface> extends org.apache.thrift.MeshDProcessFunction<I, listMovies_args> {
      public listMovies() {
        super("listMovies");
      }

      public listMovies_args getEmptyArgsInstance() {
        return new listMovies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public listMovies_result getResult(I iface, listMovies_args args) throws org.apache.thrift.TException {
        listMovies_result result = new listMovies_result();
        try {
          result.success = iface.listMovies(args.filmName, args.keyWord, args.actor, args.span);
        } catch (GenericMIThriftException genericException) {
          result.genericException = genericException;
        }
        return result;
      }
    }

    public static class rentMovie<I extends Iface> extends org.apache.thrift.MeshDProcessFunction<I, rentMovie_args> {
      public rentMovie() {
        super("rentMovie");
      }

      public rentMovie_args getEmptyArgsInstance() {
        return new rentMovie_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public rentMovie_result getResult(I iface, rentMovie_args args) throws org.apache.thrift.TException {
        rentMovie_result result = new rentMovie_result();
        try {
          result.success = iface.rentMovie(args.rentalInfo, args.span);
        } catch (GenericMIThriftException genericException) {
          result.genericException = genericException;
        }
        return result;
      }
    }

    public static class listStores<I extends Iface> extends org.apache.thrift.MeshDProcessFunction<I, listStores_args> {
      public listStores() {
        super("listStores");
      }

      public listStores_args getEmptyArgsInstance() {
        return new listStores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public listStores_result getResult(I iface, listStores_args args) throws org.apache.thrift.TException {
        listStores_result result = new listStores_result();
        try {
          result.success = iface.listStores(args.filmId, args.span);
        } catch (GenericMIThriftException genericException) {
          result.genericException = genericException;
        }
        return result;
      }
    }

    public static class returnMovie<I extends Iface> extends org.apache.thrift.MeshDProcessFunction<I, returnMovie_args> {
      public returnMovie() {
        super("returnMovie");
      }

      public returnMovie_args getEmptyArgsInstance() {
        return new returnMovie_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public returnMovie_result getResult(I iface, returnMovie_args args) throws org.apache.thrift.TException {
        returnMovie_result result = new returnMovie_result();
        try {
          result.success = iface.returnMovie(args.returnInfo, args.span);
        } catch (GenericMIThriftException genericException) {
          result.genericException = genericException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("healthCheck", new healthCheck());
      processMap.put("listMovies", new listMovies());
      processMap.put("rentMovie", new rentMovie());
      processMap.put("listStores", new listStores());
      processMap.put("returnMovie", new returnMovie());
      return processMap;
    }

    public static class healthCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, healthCheck_args, Boolean> {
      public healthCheck() {
        super("healthCheck");
      }

      public healthCheck_args getEmptyArgsInstance() {
        return new healthCheck_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            healthCheck_result result = new healthCheck_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            healthCheck_result result = new healthCheck_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, healthCheck_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.healthCheck(resultHandler);
      }
    }

    public static class listMovies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMovies_args, ListMovieResult> {
      public listMovies() {
        super("listMovies");
      }

      public listMovies_args getEmptyArgsInstance() {
        return new listMovies_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ListMovieResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ListMovieResult>() { 
          public void onComplete(ListMovieResult o) {
            listMovies_result result = new listMovies_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listMovies_result result = new listMovies_result();
            if (e instanceof GenericMIThriftException) {
              result.genericException = (GenericMIThriftException) e;
              result.setGenericExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMovies_args args, org.apache.thrift.async.AsyncMethodCallback<ListMovieResult> resultHandler) throws org.apache.thrift.TException {
        iface.listMovies(args.filmName, args.keyWord, args.actor, args.span,resultHandler);
      }
    }

    public static class rentMovie<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rentMovie_args, RentMovieResult> {
      public rentMovie() {
        super("rentMovie");
      }

      public rentMovie_args getEmptyArgsInstance() {
        return new rentMovie_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RentMovieResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RentMovieResult>() { 
          public void onComplete(RentMovieResult o) {
            rentMovie_result result = new rentMovie_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rentMovie_result result = new rentMovie_result();
            if (e instanceof GenericMIThriftException) {
              result.genericException = (GenericMIThriftException) e;
              result.setGenericExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rentMovie_args args, org.apache.thrift.async.AsyncMethodCallback<RentMovieResult> resultHandler) throws org.apache.thrift.TException {
        iface.rentMovie(args.rentalInfo, args.span,resultHandler);
      }
    }

    public static class listStores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listStores_args, ListStoreResult> {
      public listStores() {
        super("listStores");
      }

      public listStores_args getEmptyArgsInstance() {
        return new listStores_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ListStoreResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ListStoreResult>() { 
          public void onComplete(ListStoreResult o) {
            listStores_result result = new listStores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listStores_result result = new listStores_result();
            if (e instanceof GenericMIThriftException) {
              result.genericException = (GenericMIThriftException) e;
              result.setGenericExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listStores_args args, org.apache.thrift.async.AsyncMethodCallback<ListStoreResult> resultHandler) throws org.apache.thrift.TException {
        iface.listStores(args.filmId, args.span,resultHandler);
      }
    }

    public static class returnMovie<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnMovie_args, ReturnMovieResult> {
      public returnMovie() {
        super("returnMovie");
      }

      public returnMovie_args getEmptyArgsInstance() {
        return new returnMovie_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ReturnMovieResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ReturnMovieResult>() { 
          public void onComplete(ReturnMovieResult o) {
            returnMovie_result result = new returnMovie_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            returnMovie_result result = new returnMovie_result();
            if (e instanceof GenericMIThriftException) {
              result.genericException = (GenericMIThriftException) e;
              result.setGenericExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnMovie_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnMovieResult> resultHandler) throws org.apache.thrift.TException {
        iface.returnMovie(args.returnInfo, args.span,resultHandler);
      }
    }

  }

  public static class healthCheck_args implements org.apache.thrift.TBase<healthCheck_args, healthCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<healthCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("healthCheck_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new healthCheck_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new healthCheck_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(healthCheck_args.class, metaDataMap);
    }

    public healthCheck_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public healthCheck_args(healthCheck_args other) {
    }

    public healthCheck_args deepCopy() {
      return new healthCheck_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof healthCheck_args)
        return this.equals((healthCheck_args)that);
      return false;
    }

    public boolean equals(healthCheck_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(healthCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("healthCheck_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class healthCheck_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_argsStandardScheme getScheme() {
        return new healthCheck_argsStandardScheme();
      }
    }

    private static class healthCheck_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<healthCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, healthCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, healthCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class healthCheck_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_argsTupleScheme getScheme() {
        return new healthCheck_argsTupleScheme();
      }
    }

    private static class healthCheck_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<healthCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, healthCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, healthCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class healthCheck_result implements org.apache.thrift.TBase<healthCheck_result, healthCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<healthCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("healthCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new healthCheck_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new healthCheck_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(healthCheck_result.class, metaDataMap);
    }

    public healthCheck_result() {
    }

    public healthCheck_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public healthCheck_result(healthCheck_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public healthCheck_result deepCopy() {
      return new healthCheck_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public healthCheck_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof healthCheck_result)
        return this.equals((healthCheck_result)that);
      return false;
    }

    public boolean equals(healthCheck_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(healthCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("healthCheck_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class healthCheck_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_resultStandardScheme getScheme() {
        return new healthCheck_resultStandardScheme();
      }
    }

    private static class healthCheck_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<healthCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, healthCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, healthCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class healthCheck_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_resultTupleScheme getScheme() {
        return new healthCheck_resultTupleScheme();
      }
    }

    private static class healthCheck_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<healthCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, healthCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, healthCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMovies_args implements org.apache.thrift.TBase<listMovies_args, listMovies_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMovies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMovies_args");

    private static final org.apache.thrift.protocol.TField FILM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filmName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWord", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("actor", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("span", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMovies_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMovies_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String filmName; // required
    public @org.apache.thrift.annotation.Nullable String keyWord; // required
    public @org.apache.thrift.annotation.Nullable String actor; // required
    public @org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILM_NAME((short)1, "filmName"),
      KEY_WORD((short)2, "keyWord"),
      ACTOR((short)3, "actor"),
      SPAN((short)4, "span");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILM_NAME
            return FILM_NAME;
          case 2: // KEY_WORD
            return KEY_WORD;
          case 3: // ACTOR
            return ACTOR;
          case 4: // SPAN
            return SPAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILM_NAME, new org.apache.thrift.meta_data.FieldMetaData("filmName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("keyWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTOR, new org.apache.thrift.meta_data.FieldMetaData("actor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPAN, new org.apache.thrift.meta_data.FieldMetaData("span", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.cube.tracing.thriftjava.Span.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMovies_args.class, metaDataMap);
    }

    public listMovies_args() {
    }

    public listMovies_args(
      String filmName,
      String keyWord,
      String actor,
      io.cube.tracing.thriftjava.Span span)
    {
      this();
      this.filmName = filmName;
      this.keyWord = keyWord;
      this.actor = actor;
      this.span = span;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMovies_args(listMovies_args other) {
      if (other.isSetFilmName()) {
        this.filmName = other.filmName;
      }
      if (other.isSetKeyWord()) {
        this.keyWord = other.keyWord;
      }
      if (other.isSetActor()) {
        this.actor = other.actor;
      }
      if (other.isSetSpan()) {
        this.span = new io.cube.tracing.thriftjava.Span(other.span);
      }
    }

    public listMovies_args deepCopy() {
      return new listMovies_args(this);
    }

    @Override
    public void clear() {
      this.filmName = null;
      this.keyWord = null;
      this.actor = null;
      this.span = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getFilmName() {
      return this.filmName;
    }

    public listMovies_args setFilmName(@org.apache.thrift.annotation.Nullable String filmName) {
      this.filmName = filmName;
      return this;
    }

    public void unsetFilmName() {
      this.filmName = null;
    }

    /** Returns true if field filmName is set (has been assigned a value) and false otherwise */
    public boolean isSetFilmName() {
      return this.filmName != null;
    }

    public void setFilmNameIsSet(boolean value) {
      if (!value) {
        this.filmName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getKeyWord() {
      return this.keyWord;
    }

    public listMovies_args setKeyWord(@org.apache.thrift.annotation.Nullable String keyWord) {
      this.keyWord = keyWord;
      return this;
    }

    public void unsetKeyWord() {
      this.keyWord = null;
    }

    /** Returns true if field keyWord is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyWord() {
      return this.keyWord != null;
    }

    public void setKeyWordIsSet(boolean value) {
      if (!value) {
        this.keyWord = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getActor() {
      return this.actor;
    }

    public listMovies_args setActor(@org.apache.thrift.annotation.Nullable String actor) {
      this.actor = actor;
      return this;
    }

    public void unsetActor() {
      this.actor = null;
    }

    /** Returns true if field actor is set (has been assigned a value) and false otherwise */
    public boolean isSetActor() {
      return this.actor != null;
    }

    public void setActorIsSet(boolean value) {
      if (!value) {
        this.actor = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public io.cube.tracing.thriftjava.Span getSpan() {
      return this.span;
    }

    public listMovies_args setSpan(@org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span) {
      this.span = span;
      return this;
    }

    public void unsetSpan() {
      this.span = null;
    }

    /** Returns true if field span is set (has been assigned a value) and false otherwise */
    public boolean isSetSpan() {
      return this.span != null;
    }

    public void setSpanIsSet(boolean value) {
      if (!value) {
        this.span = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case FILM_NAME:
        if (value == null) {
          unsetFilmName();
        } else {
          setFilmName((String)value);
        }
        break;

      case KEY_WORD:
        if (value == null) {
          unsetKeyWord();
        } else {
          setKeyWord((String)value);
        }
        break;

      case ACTOR:
        if (value == null) {
          unsetActor();
        } else {
          setActor((String)value);
        }
        break;

      case SPAN:
        if (value == null) {
          unsetSpan();
        } else {
          setSpan((io.cube.tracing.thriftjava.Span)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILM_NAME:
        return getFilmName();

      case KEY_WORD:
        return getKeyWord();

      case ACTOR:
        return getActor();

      case SPAN:
        return getSpan();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILM_NAME:
        return isSetFilmName();
      case KEY_WORD:
        return isSetKeyWord();
      case ACTOR:
        return isSetActor();
      case SPAN:
        return isSetSpan();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMovies_args)
        return this.equals((listMovies_args)that);
      return false;
    }

    public boolean equals(listMovies_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filmName = true && this.isSetFilmName();
      boolean that_present_filmName = true && that.isSetFilmName();
      if (this_present_filmName || that_present_filmName) {
        if (!(this_present_filmName && that_present_filmName))
          return false;
        if (!this.filmName.equals(that.filmName))
          return false;
      }

      boolean this_present_keyWord = true && this.isSetKeyWord();
      boolean that_present_keyWord = true && that.isSetKeyWord();
      if (this_present_keyWord || that_present_keyWord) {
        if (!(this_present_keyWord && that_present_keyWord))
          return false;
        if (!this.keyWord.equals(that.keyWord))
          return false;
      }

      boolean this_present_actor = true && this.isSetActor();
      boolean that_present_actor = true && that.isSetActor();
      if (this_present_actor || that_present_actor) {
        if (!(this_present_actor && that_present_actor))
          return false;
        if (!this.actor.equals(that.actor))
          return false;
      }

      boolean this_present_span = true && this.isSetSpan();
      boolean that_present_span = true && that.isSetSpan();
      if (this_present_span || that_present_span) {
        if (!(this_present_span && that_present_span))
          return false;
        if (!this.span.equals(that.span))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilmName()) ? 131071 : 524287);
      if (isSetFilmName())
        hashCode = hashCode * 8191 + filmName.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeyWord()) ? 131071 : 524287);
      if (isSetKeyWord())
        hashCode = hashCode * 8191 + keyWord.hashCode();

      hashCode = hashCode * 8191 + ((isSetActor()) ? 131071 : 524287);
      if (isSetActor())
        hashCode = hashCode * 8191 + actor.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpan()) ? 131071 : 524287);
      if (isSetSpan())
        hashCode = hashCode * 8191 + span.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMovies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilmName()).compareTo(other.isSetFilmName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilmName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filmName, other.filmName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(other.isSetKeyWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWord, other.keyWord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActor()).compareTo(other.isSetActor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actor, other.actor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpan()).compareTo(other.isSetSpan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span, other.span);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMovies_args(");
      boolean first = true;

      sb.append("filmName:");
      if (this.filmName == null) {
        sb.append("null");
      } else {
        sb.append(this.filmName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyWord:");
      if (this.keyWord == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWord);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actor:");
      if (this.actor == null) {
        sb.append("null");
      } else {
        sb.append(this.actor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("span:");
      if (this.span == null) {
        sb.append("null");
      } else {
        sb.append(this.span);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (span != null) {
        span.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMovies_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMovies_argsStandardScheme getScheme() {
        return new listMovies_argsStandardScheme();
      }
    }

    private static class listMovies_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMovies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMovies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filmName = iprot.readString();
                struct.setFilmNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyWord = iprot.readString();
                struct.setKeyWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actor = iprot.readString();
                struct.setActorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SPAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.span = new io.cube.tracing.thriftjava.Span();
                struct.span.read(iprot);
                struct.setSpanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMovies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filmName != null) {
          oprot.writeFieldBegin(FILM_NAME_FIELD_DESC);
          oprot.writeString(struct.filmName);
          oprot.writeFieldEnd();
        }
        if (struct.keyWord != null) {
          oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
          oprot.writeString(struct.keyWord);
          oprot.writeFieldEnd();
        }
        if (struct.actor != null) {
          oprot.writeFieldBegin(ACTOR_FIELD_DESC);
          oprot.writeString(struct.actor);
          oprot.writeFieldEnd();
        }
        if (struct.span != null) {
          oprot.writeFieldBegin(SPAN_FIELD_DESC);
          struct.span.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMovies_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMovies_argsTupleScheme getScheme() {
        return new listMovies_argsTupleScheme();
      }
    }

    private static class listMovies_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMovies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMovies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilmName()) {
          optionals.set(0);
        }
        if (struct.isSetKeyWord()) {
          optionals.set(1);
        }
        if (struct.isSetActor()) {
          optionals.set(2);
        }
        if (struct.isSetSpan()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilmName()) {
          oprot.writeString(struct.filmName);
        }
        if (struct.isSetKeyWord()) {
          oprot.writeString(struct.keyWord);
        }
        if (struct.isSetActor()) {
          oprot.writeString(struct.actor);
        }
        if (struct.isSetSpan()) {
          struct.span.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMovies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filmName = iprot.readString();
          struct.setFilmNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.keyWord = iprot.readString();
          struct.setKeyWordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.actor = iprot.readString();
          struct.setActorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.span = new io.cube.tracing.thriftjava.Span();
          struct.span.read(iprot);
          struct.setSpanIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listMovies_result implements org.apache.thrift.TBase<listMovies_result, listMovies_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMovies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMovies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("genericException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listMovies_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listMovies_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ListMovieResult success; // required
    public @org.apache.thrift.annotation.Nullable GenericMIThriftException genericException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "genericException");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ListMovieResult.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("genericException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GenericMIThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMovies_result.class, metaDataMap);
    }

    public listMovies_result() {
    }

    public listMovies_result(
      ListMovieResult success,
      GenericMIThriftException genericException)
    {
      this();
      this.success = success;
      this.genericException = genericException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMovies_result(listMovies_result other) {
      if (other.isSetSuccess()) {
        this.success = new ListMovieResult(other.success);
      }
      if (other.isSetGenericException()) {
        this.genericException = new GenericMIThriftException(other.genericException);
      }
    }

    public listMovies_result deepCopy() {
      return new listMovies_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.genericException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ListMovieResult getSuccess() {
      return this.success;
    }

    public listMovies_result setSuccess(@org.apache.thrift.annotation.Nullable ListMovieResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public GenericMIThriftException getGenericException() {
      return this.genericException;
    }

    public listMovies_result setGenericException(@org.apache.thrift.annotation.Nullable GenericMIThriftException genericException) {
      this.genericException = genericException;
      return this;
    }

    public void unsetGenericException() {
      this.genericException = null;
    }

    /** Returns true if field genericException is set (has been assigned a value) and false otherwise */
    public boolean isSetGenericException() {
      return this.genericException != null;
    }

    public void setGenericExceptionIsSet(boolean value) {
      if (!value) {
        this.genericException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ListMovieResult)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGenericException();
        } else {
          setGenericException((GenericMIThriftException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGenericException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGenericException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMovies_result)
        return this.equals((listMovies_result)that);
      return false;
    }

    public boolean equals(listMovies_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_genericException = true && this.isSetGenericException();
      boolean that_present_genericException = true && that.isSetGenericException();
      if (this_present_genericException || that_present_genericException) {
        if (!(this_present_genericException && that_present_genericException))
          return false;
        if (!this.genericException.equals(that.genericException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetGenericException()) ? 131071 : 524287);
      if (isSetGenericException())
        hashCode = hashCode * 8191 + genericException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listMovies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenericException()).compareTo(other.isSetGenericException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenericException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genericException, other.genericException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMovies_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genericException:");
      if (this.genericException == null) {
        sb.append("null");
      } else {
        sb.append(this.genericException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMovies_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMovies_resultStandardScheme getScheme() {
        return new listMovies_resultStandardScheme();
      }
    }

    private static class listMovies_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listMovies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMovies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ListMovieResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.genericException = new GenericMIThriftException();
                struct.genericException.read(iprot);
                struct.setGenericExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMovies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.genericException != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.genericException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMovies_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listMovies_resultTupleScheme getScheme() {
        return new listMovies_resultTupleScheme();
      }
    }

    private static class listMovies_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listMovies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMovies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGenericException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGenericException()) {
          struct.genericException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMovies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ListMovieResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.genericException = new GenericMIThriftException();
          struct.genericException.read(iprot);
          struct.setGenericExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rentMovie_args implements org.apache.thrift.TBase<rentMovie_args, rentMovie_args._Fields>, java.io.Serializable, Cloneable, Comparable<rentMovie_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rentMovie_args");

    private static final org.apache.thrift.protocol.TField RENTAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("span", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rentMovie_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rentMovie_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RentalInfo rentalInfo; // required
    public @org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RENTAL_INFO((short)1, "rentalInfo"),
      SPAN((short)2, "span");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RENTAL_INFO
            return RENTAL_INFO;
          case 2: // SPAN
            return SPAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RENTAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("rentalInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RentalInfo.class)));
      tmpMap.put(_Fields.SPAN, new org.apache.thrift.meta_data.FieldMetaData("span", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.cube.tracing.thriftjava.Span.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rentMovie_args.class, metaDataMap);
    }

    public rentMovie_args() {
    }

    public rentMovie_args(
      RentalInfo rentalInfo,
      io.cube.tracing.thriftjava.Span span)
    {
      this();
      this.rentalInfo = rentalInfo;
      this.span = span;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rentMovie_args(rentMovie_args other) {
      if (other.isSetRentalInfo()) {
        this.rentalInfo = new RentalInfo(other.rentalInfo);
      }
      if (other.isSetSpan()) {
        this.span = new io.cube.tracing.thriftjava.Span(other.span);
      }
    }

    public rentMovie_args deepCopy() {
      return new rentMovie_args(this);
    }

    @Override
    public void clear() {
      this.rentalInfo = null;
      this.span = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RentalInfo getRentalInfo() {
      return this.rentalInfo;
    }

    public rentMovie_args setRentalInfo(@org.apache.thrift.annotation.Nullable RentalInfo rentalInfo) {
      this.rentalInfo = rentalInfo;
      return this;
    }

    public void unsetRentalInfo() {
      this.rentalInfo = null;
    }

    /** Returns true if field rentalInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRentalInfo() {
      return this.rentalInfo != null;
    }

    public void setRentalInfoIsSet(boolean value) {
      if (!value) {
        this.rentalInfo = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public io.cube.tracing.thriftjava.Span getSpan() {
      return this.span;
    }

    public rentMovie_args setSpan(@org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span) {
      this.span = span;
      return this;
    }

    public void unsetSpan() {
      this.span = null;
    }

    /** Returns true if field span is set (has been assigned a value) and false otherwise */
    public boolean isSetSpan() {
      return this.span != null;
    }

    public void setSpanIsSet(boolean value) {
      if (!value) {
        this.span = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case RENTAL_INFO:
        if (value == null) {
          unsetRentalInfo();
        } else {
          setRentalInfo((RentalInfo)value);
        }
        break;

      case SPAN:
        if (value == null) {
          unsetSpan();
        } else {
          setSpan((io.cube.tracing.thriftjava.Span)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RENTAL_INFO:
        return getRentalInfo();

      case SPAN:
        return getSpan();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RENTAL_INFO:
        return isSetRentalInfo();
      case SPAN:
        return isSetSpan();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rentMovie_args)
        return this.equals((rentMovie_args)that);
      return false;
    }

    public boolean equals(rentMovie_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rentalInfo = true && this.isSetRentalInfo();
      boolean that_present_rentalInfo = true && that.isSetRentalInfo();
      if (this_present_rentalInfo || that_present_rentalInfo) {
        if (!(this_present_rentalInfo && that_present_rentalInfo))
          return false;
        if (!this.rentalInfo.equals(that.rentalInfo))
          return false;
      }

      boolean this_present_span = true && this.isSetSpan();
      boolean that_present_span = true && that.isSetSpan();
      if (this_present_span || that_present_span) {
        if (!(this_present_span && that_present_span))
          return false;
        if (!this.span.equals(that.span))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRentalInfo()) ? 131071 : 524287);
      if (isSetRentalInfo())
        hashCode = hashCode * 8191 + rentalInfo.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpan()) ? 131071 : 524287);
      if (isSetSpan())
        hashCode = hashCode * 8191 + span.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rentMovie_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRentalInfo()).compareTo(other.isSetRentalInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRentalInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalInfo, other.rentalInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpan()).compareTo(other.isSetSpan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span, other.span);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rentMovie_args(");
      boolean first = true;

      sb.append("rentalInfo:");
      if (this.rentalInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.rentalInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("span:");
      if (this.span == null) {
        sb.append("null");
      } else {
        sb.append(this.span);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rentalInfo != null) {
        rentalInfo.validate();
      }
      if (span != null) {
        span.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rentMovie_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rentMovie_argsStandardScheme getScheme() {
        return new rentMovie_argsStandardScheme();
      }
    }

    private static class rentMovie_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rentMovie_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rentMovie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RENTAL_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rentalInfo = new RentalInfo();
                struct.rentalInfo.read(iprot);
                struct.setRentalInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.span = new io.cube.tracing.thriftjava.Span();
                struct.span.read(iprot);
                struct.setSpanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rentMovie_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rentalInfo != null) {
          oprot.writeFieldBegin(RENTAL_INFO_FIELD_DESC);
          struct.rentalInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.span != null) {
          oprot.writeFieldBegin(SPAN_FIELD_DESC);
          struct.span.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rentMovie_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rentMovie_argsTupleScheme getScheme() {
        return new rentMovie_argsTupleScheme();
      }
    }

    private static class rentMovie_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rentMovie_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rentMovie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRentalInfo()) {
          optionals.set(0);
        }
        if (struct.isSetSpan()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRentalInfo()) {
          struct.rentalInfo.write(oprot);
        }
        if (struct.isSetSpan()) {
          struct.span.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rentMovie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rentalInfo = new RentalInfo();
          struct.rentalInfo.read(iprot);
          struct.setRentalInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.span = new io.cube.tracing.thriftjava.Span();
          struct.span.read(iprot);
          struct.setSpanIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rentMovie_result implements org.apache.thrift.TBase<rentMovie_result, rentMovie_result._Fields>, java.io.Serializable, Cloneable, Comparable<rentMovie_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rentMovie_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("genericException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rentMovie_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rentMovie_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RentMovieResult success; // required
    public @org.apache.thrift.annotation.Nullable GenericMIThriftException genericException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "genericException");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RentMovieResult.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("genericException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GenericMIThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rentMovie_result.class, metaDataMap);
    }

    public rentMovie_result() {
    }

    public rentMovie_result(
      RentMovieResult success,
      GenericMIThriftException genericException)
    {
      this();
      this.success = success;
      this.genericException = genericException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rentMovie_result(rentMovie_result other) {
      if (other.isSetSuccess()) {
        this.success = new RentMovieResult(other.success);
      }
      if (other.isSetGenericException()) {
        this.genericException = new GenericMIThriftException(other.genericException);
      }
    }

    public rentMovie_result deepCopy() {
      return new rentMovie_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.genericException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RentMovieResult getSuccess() {
      return this.success;
    }

    public rentMovie_result setSuccess(@org.apache.thrift.annotation.Nullable RentMovieResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public GenericMIThriftException getGenericException() {
      return this.genericException;
    }

    public rentMovie_result setGenericException(@org.apache.thrift.annotation.Nullable GenericMIThriftException genericException) {
      this.genericException = genericException;
      return this;
    }

    public void unsetGenericException() {
      this.genericException = null;
    }

    /** Returns true if field genericException is set (has been assigned a value) and false otherwise */
    public boolean isSetGenericException() {
      return this.genericException != null;
    }

    public void setGenericExceptionIsSet(boolean value) {
      if (!value) {
        this.genericException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RentMovieResult)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGenericException();
        } else {
          setGenericException((GenericMIThriftException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGenericException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGenericException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rentMovie_result)
        return this.equals((rentMovie_result)that);
      return false;
    }

    public boolean equals(rentMovie_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_genericException = true && this.isSetGenericException();
      boolean that_present_genericException = true && that.isSetGenericException();
      if (this_present_genericException || that_present_genericException) {
        if (!(this_present_genericException && that_present_genericException))
          return false;
        if (!this.genericException.equals(that.genericException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetGenericException()) ? 131071 : 524287);
      if (isSetGenericException())
        hashCode = hashCode * 8191 + genericException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rentMovie_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenericException()).compareTo(other.isSetGenericException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenericException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genericException, other.genericException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rentMovie_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genericException:");
      if (this.genericException == null) {
        sb.append("null");
      } else {
        sb.append(this.genericException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rentMovie_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rentMovie_resultStandardScheme getScheme() {
        return new rentMovie_resultStandardScheme();
      }
    }

    private static class rentMovie_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rentMovie_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rentMovie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RentMovieResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.genericException = new GenericMIThriftException();
                struct.genericException.read(iprot);
                struct.setGenericExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rentMovie_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.genericException != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.genericException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rentMovie_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rentMovie_resultTupleScheme getScheme() {
        return new rentMovie_resultTupleScheme();
      }
    }

    private static class rentMovie_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rentMovie_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rentMovie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGenericException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGenericException()) {
          struct.genericException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rentMovie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RentMovieResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.genericException = new GenericMIThriftException();
          struct.genericException.read(iprot);
          struct.setGenericExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listStores_args implements org.apache.thrift.TBase<listStores_args, listStores_args._Fields>, java.io.Serializable, Cloneable, Comparable<listStores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listStores_args");

    private static final org.apache.thrift.protocol.TField FILM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filmId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("span", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listStores_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listStores_argsTupleSchemeFactory();

    public int filmId; // required
    public @org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILM_ID((short)1, "filmId"),
      SPAN((short)2, "span");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILM_ID
            return FILM_ID;
          case 2: // SPAN
            return SPAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILM_ID, new org.apache.thrift.meta_data.FieldMetaData("filmId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPAN, new org.apache.thrift.meta_data.FieldMetaData("span", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.cube.tracing.thriftjava.Span.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listStores_args.class, metaDataMap);
    }

    public listStores_args() {
    }

    public listStores_args(
      int filmId,
      io.cube.tracing.thriftjava.Span span)
    {
      this();
      this.filmId = filmId;
      setFilmIdIsSet(true);
      this.span = span;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listStores_args(listStores_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.filmId = other.filmId;
      if (other.isSetSpan()) {
        this.span = new io.cube.tracing.thriftjava.Span(other.span);
      }
    }

    public listStores_args deepCopy() {
      return new listStores_args(this);
    }

    @Override
    public void clear() {
      setFilmIdIsSet(false);
      this.filmId = 0;
      this.span = null;
    }

    public int getFilmId() {
      return this.filmId;
    }

    public listStores_args setFilmId(int filmId) {
      this.filmId = filmId;
      setFilmIdIsSet(true);
      return this;
    }

    public void unsetFilmId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILMID_ISSET_ID);
    }

    /** Returns true if field filmId is set (has been assigned a value) and false otherwise */
    public boolean isSetFilmId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILMID_ISSET_ID);
    }

    public void setFilmIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILMID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public io.cube.tracing.thriftjava.Span getSpan() {
      return this.span;
    }

    public listStores_args setSpan(@org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span) {
      this.span = span;
      return this;
    }

    public void unsetSpan() {
      this.span = null;
    }

    /** Returns true if field span is set (has been assigned a value) and false otherwise */
    public boolean isSetSpan() {
      return this.span != null;
    }

    public void setSpanIsSet(boolean value) {
      if (!value) {
        this.span = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case FILM_ID:
        if (value == null) {
          unsetFilmId();
        } else {
          setFilmId((Integer)value);
        }
        break;

      case SPAN:
        if (value == null) {
          unsetSpan();
        } else {
          setSpan((io.cube.tracing.thriftjava.Span)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILM_ID:
        return getFilmId();

      case SPAN:
        return getSpan();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILM_ID:
        return isSetFilmId();
      case SPAN:
        return isSetSpan();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listStores_args)
        return this.equals((listStores_args)that);
      return false;
    }

    public boolean equals(listStores_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filmId = true;
      boolean that_present_filmId = true;
      if (this_present_filmId || that_present_filmId) {
        if (!(this_present_filmId && that_present_filmId))
          return false;
        if (this.filmId != that.filmId)
          return false;
      }

      boolean this_present_span = true && this.isSetSpan();
      boolean that_present_span = true && that.isSetSpan();
      if (this_present_span || that_present_span) {
        if (!(this_present_span && that_present_span))
          return false;
        if (!this.span.equals(that.span))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + filmId;

      hashCode = hashCode * 8191 + ((isSetSpan()) ? 131071 : 524287);
      if (isSetSpan())
        hashCode = hashCode * 8191 + span.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listStores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilmId()).compareTo(other.isSetFilmId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilmId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filmId, other.filmId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpan()).compareTo(other.isSetSpan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span, other.span);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listStores_args(");
      boolean first = true;

      sb.append("filmId:");
      sb.append(this.filmId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("span:");
      if (this.span == null) {
        sb.append("null");
      } else {
        sb.append(this.span);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (span != null) {
        span.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listStores_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listStores_argsStandardScheme getScheme() {
        return new listStores_argsStandardScheme();
      }
    }

    private static class listStores_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listStores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listStores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.filmId = iprot.readI32();
                struct.setFilmIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.span = new io.cube.tracing.thriftjava.Span();
                struct.span.read(iprot);
                struct.setSpanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listStores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILM_ID_FIELD_DESC);
        oprot.writeI32(struct.filmId);
        oprot.writeFieldEnd();
        if (struct.span != null) {
          oprot.writeFieldBegin(SPAN_FIELD_DESC);
          struct.span.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listStores_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listStores_argsTupleScheme getScheme() {
        return new listStores_argsTupleScheme();
      }
    }

    private static class listStores_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listStores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listStores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilmId()) {
          optionals.set(0);
        }
        if (struct.isSetSpan()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFilmId()) {
          oprot.writeI32(struct.filmId);
        }
        if (struct.isSetSpan()) {
          struct.span.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listStores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.filmId = iprot.readI32();
          struct.setFilmIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.span = new io.cube.tracing.thriftjava.Span();
          struct.span.read(iprot);
          struct.setSpanIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listStores_result implements org.apache.thrift.TBase<listStores_result, listStores_result._Fields>, java.io.Serializable, Cloneable, Comparable<listStores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listStores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("genericException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listStores_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listStores_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ListStoreResult success; // required
    public @org.apache.thrift.annotation.Nullable GenericMIThriftException genericException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "genericException");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ListStoreResult.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("genericException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GenericMIThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listStores_result.class, metaDataMap);
    }

    public listStores_result() {
    }

    public listStores_result(
      ListStoreResult success,
      GenericMIThriftException genericException)
    {
      this();
      this.success = success;
      this.genericException = genericException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listStores_result(listStores_result other) {
      if (other.isSetSuccess()) {
        this.success = new ListStoreResult(other.success);
      }
      if (other.isSetGenericException()) {
        this.genericException = new GenericMIThriftException(other.genericException);
      }
    }

    public listStores_result deepCopy() {
      return new listStores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.genericException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ListStoreResult getSuccess() {
      return this.success;
    }

    public listStores_result setSuccess(@org.apache.thrift.annotation.Nullable ListStoreResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public GenericMIThriftException getGenericException() {
      return this.genericException;
    }

    public listStores_result setGenericException(@org.apache.thrift.annotation.Nullable GenericMIThriftException genericException) {
      this.genericException = genericException;
      return this;
    }

    public void unsetGenericException() {
      this.genericException = null;
    }

    /** Returns true if field genericException is set (has been assigned a value) and false otherwise */
    public boolean isSetGenericException() {
      return this.genericException != null;
    }

    public void setGenericExceptionIsSet(boolean value) {
      if (!value) {
        this.genericException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ListStoreResult)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGenericException();
        } else {
          setGenericException((GenericMIThriftException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGenericException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGenericException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listStores_result)
        return this.equals((listStores_result)that);
      return false;
    }

    public boolean equals(listStores_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_genericException = true && this.isSetGenericException();
      boolean that_present_genericException = true && that.isSetGenericException();
      if (this_present_genericException || that_present_genericException) {
        if (!(this_present_genericException && that_present_genericException))
          return false;
        if (!this.genericException.equals(that.genericException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetGenericException()) ? 131071 : 524287);
      if (isSetGenericException())
        hashCode = hashCode * 8191 + genericException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listStores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenericException()).compareTo(other.isSetGenericException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenericException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genericException, other.genericException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listStores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genericException:");
      if (this.genericException == null) {
        sb.append("null");
      } else {
        sb.append(this.genericException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listStores_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listStores_resultStandardScheme getScheme() {
        return new listStores_resultStandardScheme();
      }
    }

    private static class listStores_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listStores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listStores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ListStoreResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.genericException = new GenericMIThriftException();
                struct.genericException.read(iprot);
                struct.setGenericExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listStores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.genericException != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.genericException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listStores_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listStores_resultTupleScheme getScheme() {
        return new listStores_resultTupleScheme();
      }
    }

    private static class listStores_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listStores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listStores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGenericException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGenericException()) {
          struct.genericException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listStores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ListStoreResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.genericException = new GenericMIThriftException();
          struct.genericException.read(iprot);
          struct.setGenericExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class returnMovie_args implements org.apache.thrift.TBase<returnMovie_args, returnMovie_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnMovie_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMovie_args");

    private static final org.apache.thrift.protocol.TField RETURN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("returnInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("span", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnMovie_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnMovie_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ReturnInfo returnInfo; // required
    public @org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETURN_INFO((short)1, "returnInfo"),
      SPAN((short)2, "span");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETURN_INFO
            return RETURN_INFO;
          case 2: // SPAN
            return SPAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETURN_INFO, new org.apache.thrift.meta_data.FieldMetaData("returnInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnInfo.class)));
      tmpMap.put(_Fields.SPAN, new org.apache.thrift.meta_data.FieldMetaData("span", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.cube.tracing.thriftjava.Span.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMovie_args.class, metaDataMap);
    }

    public returnMovie_args() {
    }

    public returnMovie_args(
      ReturnInfo returnInfo,
      io.cube.tracing.thriftjava.Span span)
    {
      this();
      this.returnInfo = returnInfo;
      this.span = span;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMovie_args(returnMovie_args other) {
      if (other.isSetReturnInfo()) {
        this.returnInfo = new ReturnInfo(other.returnInfo);
      }
      if (other.isSetSpan()) {
        this.span = new io.cube.tracing.thriftjava.Span(other.span);
      }
    }

    public returnMovie_args deepCopy() {
      return new returnMovie_args(this);
    }

    @Override
    public void clear() {
      this.returnInfo = null;
      this.span = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ReturnInfo getReturnInfo() {
      return this.returnInfo;
    }

    public returnMovie_args setReturnInfo(@org.apache.thrift.annotation.Nullable ReturnInfo returnInfo) {
      this.returnInfo = returnInfo;
      return this;
    }

    public void unsetReturnInfo() {
      this.returnInfo = null;
    }

    /** Returns true if field returnInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnInfo() {
      return this.returnInfo != null;
    }

    public void setReturnInfoIsSet(boolean value) {
      if (!value) {
        this.returnInfo = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public io.cube.tracing.thriftjava.Span getSpan() {
      return this.span;
    }

    public returnMovie_args setSpan(@org.apache.thrift.annotation.Nullable io.cube.tracing.thriftjava.Span span) {
      this.span = span;
      return this;
    }

    public void unsetSpan() {
      this.span = null;
    }

    /** Returns true if field span is set (has been assigned a value) and false otherwise */
    public boolean isSetSpan() {
      return this.span != null;
    }

    public void setSpanIsSet(boolean value) {
      if (!value) {
        this.span = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case RETURN_INFO:
        if (value == null) {
          unsetReturnInfo();
        } else {
          setReturnInfo((ReturnInfo)value);
        }
        break;

      case SPAN:
        if (value == null) {
          unsetSpan();
        } else {
          setSpan((io.cube.tracing.thriftjava.Span)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETURN_INFO:
        return getReturnInfo();

      case SPAN:
        return getSpan();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETURN_INFO:
        return isSetReturnInfo();
      case SPAN:
        return isSetSpan();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMovie_args)
        return this.equals((returnMovie_args)that);
      return false;
    }

    public boolean equals(returnMovie_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_returnInfo = true && this.isSetReturnInfo();
      boolean that_present_returnInfo = true && that.isSetReturnInfo();
      if (this_present_returnInfo || that_present_returnInfo) {
        if (!(this_present_returnInfo && that_present_returnInfo))
          return false;
        if (!this.returnInfo.equals(that.returnInfo))
          return false;
      }

      boolean this_present_span = true && this.isSetSpan();
      boolean that_present_span = true && that.isSetSpan();
      if (this_present_span || that_present_span) {
        if (!(this_present_span && that_present_span))
          return false;
        if (!this.span.equals(that.span))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetReturnInfo()) ? 131071 : 524287);
      if (isSetReturnInfo())
        hashCode = hashCode * 8191 + returnInfo.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpan()) ? 131071 : 524287);
      if (isSetSpan())
        hashCode = hashCode * 8191 + span.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(returnMovie_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReturnInfo()).compareTo(other.isSetReturnInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnInfo, other.returnInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpan()).compareTo(other.isSetSpan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span, other.span);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMovie_args(");
      boolean first = true;

      sb.append("returnInfo:");
      if (this.returnInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.returnInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("span:");
      if (this.span == null) {
        sb.append("null");
      } else {
        sb.append(this.span);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (returnInfo != null) {
        returnInfo.validate();
      }
      if (span != null) {
        span.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnMovie_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnMovie_argsStandardScheme getScheme() {
        return new returnMovie_argsStandardScheme();
      }
    }

    private static class returnMovie_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnMovie_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMovie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETURN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.returnInfo = new ReturnInfo();
                struct.returnInfo.read(iprot);
                struct.setReturnInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.span = new io.cube.tracing.thriftjava.Span();
                struct.span.read(iprot);
                struct.setSpanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMovie_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.returnInfo != null) {
          oprot.writeFieldBegin(RETURN_INFO_FIELD_DESC);
          struct.returnInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.span != null) {
          oprot.writeFieldBegin(SPAN_FIELD_DESC);
          struct.span.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnMovie_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnMovie_argsTupleScheme getScheme() {
        return new returnMovie_argsTupleScheme();
      }
    }

    private static class returnMovie_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnMovie_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnMovie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetReturnInfo()) {
          optionals.set(0);
        }
        if (struct.isSetSpan()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReturnInfo()) {
          struct.returnInfo.write(oprot);
        }
        if (struct.isSetSpan()) {
          struct.span.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnMovie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.returnInfo = new ReturnInfo();
          struct.returnInfo.read(iprot);
          struct.setReturnInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.span = new io.cube.tracing.thriftjava.Span();
          struct.span.read(iprot);
          struct.setSpanIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class returnMovie_result implements org.apache.thrift.TBase<returnMovie_result, returnMovie_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnMovie_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMovie_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("genericException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnMovie_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnMovie_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ReturnMovieResult success; // required
    public @org.apache.thrift.annotation.Nullable GenericMIThriftException genericException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "genericException");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnMovieResult.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("genericException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GenericMIThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMovie_result.class, metaDataMap);
    }

    public returnMovie_result() {
    }

    public returnMovie_result(
      ReturnMovieResult success,
      GenericMIThriftException genericException)
    {
      this();
      this.success = success;
      this.genericException = genericException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMovie_result(returnMovie_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnMovieResult(other.success);
      }
      if (other.isSetGenericException()) {
        this.genericException = new GenericMIThriftException(other.genericException);
      }
    }

    public returnMovie_result deepCopy() {
      return new returnMovie_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.genericException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ReturnMovieResult getSuccess() {
      return this.success;
    }

    public returnMovie_result setSuccess(@org.apache.thrift.annotation.Nullable ReturnMovieResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public GenericMIThriftException getGenericException() {
      return this.genericException;
    }

    public returnMovie_result setGenericException(@org.apache.thrift.annotation.Nullable GenericMIThriftException genericException) {
      this.genericException = genericException;
      return this;
    }

    public void unsetGenericException() {
      this.genericException = null;
    }

    /** Returns true if field genericException is set (has been assigned a value) and false otherwise */
    public boolean isSetGenericException() {
      return this.genericException != null;
    }

    public void setGenericExceptionIsSet(boolean value) {
      if (!value) {
        this.genericException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnMovieResult)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGenericException();
        } else {
          setGenericException((GenericMIThriftException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGenericException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGenericException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMovie_result)
        return this.equals((returnMovie_result)that);
      return false;
    }

    public boolean equals(returnMovie_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_genericException = true && this.isSetGenericException();
      boolean that_present_genericException = true && that.isSetGenericException();
      if (this_present_genericException || that_present_genericException) {
        if (!(this_present_genericException && that_present_genericException))
          return false;
        if (!this.genericException.equals(that.genericException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetGenericException()) ? 131071 : 524287);
      if (isSetGenericException())
        hashCode = hashCode * 8191 + genericException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(returnMovie_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenericException()).compareTo(other.isSetGenericException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenericException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genericException, other.genericException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMovie_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genericException:");
      if (this.genericException == null) {
        sb.append("null");
      } else {
        sb.append(this.genericException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnMovie_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnMovie_resultStandardScheme getScheme() {
        return new returnMovie_resultStandardScheme();
      }
    }

    private static class returnMovie_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnMovie_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMovie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnMovieResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.genericException = new GenericMIThriftException();
                struct.genericException.read(iprot);
                struct.setGenericExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMovie_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.genericException != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.genericException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnMovie_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnMovie_resultTupleScheme getScheme() {
        return new returnMovie_resultTupleScheme();
      }
    }

    private static class returnMovie_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnMovie_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnMovie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGenericException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGenericException()) {
          struct.genericException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnMovie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ReturnMovieResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.genericException = new GenericMIThriftException();
          struct.genericException.read(iprot);
          struct.setGenericExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
