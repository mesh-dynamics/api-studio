/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cubeiosample.webservices.thirft.thirft;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-09")
public class Rating implements org.apache.thrift.TBase<Rating, Rating._Fields>, java.io.Serializable, Cloneable, Comparable<Rating> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Rating");

  private static final org.apache.thrift.protocol.TField REVIEWER_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewer", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("stars", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RatingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RatingTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String reviewer; // required
  public short stars; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REVIEWER((short)1, "reviewer"),
    STARS((short)2, "stars");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REVIEWER
          return REVIEWER;
        case 2: // STARS
          return STARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REVIEWER, new org.apache.thrift.meta_data.FieldMetaData("reviewer", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARS, new org.apache.thrift.meta_data.FieldMetaData("stars", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Rating.class, metaDataMap);
  }

  public Rating() {
  }

  public Rating(
    String reviewer,
    short stars)
  {
    this();
    this.reviewer = reviewer;
    this.stars = stars;
    setStarsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Rating(Rating other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReviewer()) {
      this.reviewer = other.reviewer;
    }
    this.stars = other.stars;
  }

  public Rating deepCopy() {
    return new Rating(this);
  }

  @Override
  public void clear() {
    this.reviewer = null;
    setStarsIsSet(false);
    this.stars = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getReviewer() {
    return this.reviewer;
  }

  public Rating setReviewer(@org.apache.thrift.annotation.Nullable String reviewer) {
    this.reviewer = reviewer;
    return this;
  }

  public void unsetReviewer() {
    this.reviewer = null;
  }

  /** Returns true if field reviewer is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewer() {
    return this.reviewer != null;
  }

  public void setReviewerIsSet(boolean value) {
    if (!value) {
      this.reviewer = null;
    }
  }

  public short getStars() {
    return this.stars;
  }

  public Rating setStars(short stars) {
    this.stars = stars;
    setStarsIsSet(true);
    return this;
  }

  public void unsetStars() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARS_ISSET_ID);
  }

  /** Returns true if field stars is set (has been assigned a value) and false otherwise */
  public boolean isSetStars() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARS_ISSET_ID);
  }

  public void setStarsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case REVIEWER:
      if (value == null) {
        unsetReviewer();
      } else {
        setReviewer((String)value);
      }
      break;

    case STARS:
      if (value == null) {
        unsetStars();
      } else {
        setStars((Short)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REVIEWER:
      return getReviewer();

    case STARS:
      return getStars();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REVIEWER:
      return isSetReviewer();
    case STARS:
      return isSetStars();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Rating)
      return this.equals((Rating)that);
    return false;
  }

  public boolean equals(Rating that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_reviewer = true && this.isSetReviewer();
    boolean that_present_reviewer = true && that.isSetReviewer();
    if (this_present_reviewer || that_present_reviewer) {
      if (!(this_present_reviewer && that_present_reviewer))
        return false;
      if (!this.reviewer.equals(that.reviewer))
        return false;
    }

    boolean this_present_stars = true;
    boolean that_present_stars = true;
    if (this_present_stars || that_present_stars) {
      if (!(this_present_stars && that_present_stars))
        return false;
      if (this.stars != that.stars)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReviewer()) ? 131071 : 524287);
    if (isSetReviewer())
      hashCode = hashCode * 8191 + reviewer.hashCode();

    hashCode = hashCode * 8191 + stars;

    return hashCode;
  }

  @Override
  public int compareTo(Rating other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReviewer()).compareTo(other.isSetReviewer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewer, other.reviewer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStars()).compareTo(other.isSetStars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stars, other.stars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Rating(");
    boolean first = true;

    sb.append("reviewer:");
    if (this.reviewer == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stars:");
    sb.append(this.stars);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RatingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RatingStandardScheme getScheme() {
      return new RatingStandardScheme();
    }
  }

  private static class RatingStandardScheme extends org.apache.thrift.scheme.StandardScheme<Rating> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Rating struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // REVIEWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewer = iprot.readString();
              struct.setReviewerIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STARS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.stars = iprot.readI16();
              struct.setStarsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Rating struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reviewer != null) {
        oprot.writeFieldBegin(REVIEWER_FIELD_DESC);
        oprot.writeString(struct.reviewer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARS_FIELD_DESC);
      oprot.writeI16(struct.stars);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RatingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RatingTupleScheme getScheme() {
      return new RatingTupleScheme();
    }
  }

  private static class RatingTupleScheme extends org.apache.thrift.scheme.TupleScheme<Rating> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Rating struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReviewer()) {
        optionals.set(0);
      }
      if (struct.isSetStars()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReviewer()) {
        oprot.writeString(struct.reviewer);
      }
      if (struct.isSetStars()) {
        oprot.writeI16(struct.stars);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Rating struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.reviewer = iprot.readString();
        struct.setReviewerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stars = iprot.readI16();
        struct.setStarsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

