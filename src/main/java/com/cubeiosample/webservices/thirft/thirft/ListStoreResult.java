/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cubeiosample.webservices.thirft.thirft;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-09")
public class ListStoreResult implements org.apache.thrift.TBase<ListStoreResult, ListStoreResult._Fields>, java.io.Serializable, Cloneable, Comparable<ListStoreResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListStoreResult");

  private static final org.apache.thrift.protocol.TField STORE_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("storeInfoList", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ListStoreResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ListStoreResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<StoreInfo> storeInfoList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STORE_INFO_LIST((short)1, "storeInfoList");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STORE_INFO_LIST
          return STORE_INFO_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STORE_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("storeInfoList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StoreInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListStoreResult.class, metaDataMap);
  }

  public ListStoreResult() {
  }

  public ListStoreResult(
    java.util.List<StoreInfo> storeInfoList)
  {
    this();
    this.storeInfoList = storeInfoList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListStoreResult(ListStoreResult other) {
    if (other.isSetStoreInfoList()) {
      java.util.List<StoreInfo> __this__storeInfoList = new java.util.ArrayList<StoreInfo>(other.storeInfoList.size());
      for (StoreInfo other_element : other.storeInfoList) {
        __this__storeInfoList.add(new StoreInfo(other_element));
      }
      this.storeInfoList = __this__storeInfoList;
    }
  }

  public ListStoreResult deepCopy() {
    return new ListStoreResult(this);
  }

  @Override
  public void clear() {
    this.storeInfoList = null;
  }

  public int getStoreInfoListSize() {
    return (this.storeInfoList == null) ? 0 : this.storeInfoList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<StoreInfo> getStoreInfoListIterator() {
    return (this.storeInfoList == null) ? null : this.storeInfoList.iterator();
  }

  public void addToStoreInfoList(StoreInfo elem) {
    if (this.storeInfoList == null) {
      this.storeInfoList = new java.util.ArrayList<StoreInfo>();
    }
    this.storeInfoList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<StoreInfo> getStoreInfoList() {
    return this.storeInfoList;
  }

  public ListStoreResult setStoreInfoList(@org.apache.thrift.annotation.Nullable java.util.List<StoreInfo> storeInfoList) {
    this.storeInfoList = storeInfoList;
    return this;
  }

  public void unsetStoreInfoList() {
    this.storeInfoList = null;
  }

  /** Returns true if field storeInfoList is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreInfoList() {
    return this.storeInfoList != null;
  }

  public void setStoreInfoListIsSet(boolean value) {
    if (!value) {
      this.storeInfoList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case STORE_INFO_LIST:
      if (value == null) {
        unsetStoreInfoList();
      } else {
        setStoreInfoList((java.util.List<StoreInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STORE_INFO_LIST:
      return getStoreInfoList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STORE_INFO_LIST:
      return isSetStoreInfoList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListStoreResult)
      return this.equals((ListStoreResult)that);
    return false;
  }

  public boolean equals(ListStoreResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_storeInfoList = true && this.isSetStoreInfoList();
    boolean that_present_storeInfoList = true && that.isSetStoreInfoList();
    if (this_present_storeInfoList || that_present_storeInfoList) {
      if (!(this_present_storeInfoList && that_present_storeInfoList))
        return false;
      if (!this.storeInfoList.equals(that.storeInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStoreInfoList()) ? 131071 : 524287);
    if (isSetStoreInfoList())
      hashCode = hashCode * 8191 + storeInfoList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ListStoreResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStoreInfoList()).compareTo(other.isSetStoreInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreInfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeInfoList, other.storeInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListStoreResult(");
    boolean first = true;

    sb.append("storeInfoList:");
    if (this.storeInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.storeInfoList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListStoreResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ListStoreResultStandardScheme getScheme() {
      return new ListStoreResultStandardScheme();
    }
  }

  private static class ListStoreResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ListStoreResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ListStoreResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // STORE_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.storeInfoList = new java.util.ArrayList<StoreInfo>(_list64.size);
                @org.apache.thrift.annotation.Nullable StoreInfo _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new StoreInfo();
                  _elem65.read(iprot);
                  struct.storeInfoList.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setStoreInfoListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ListStoreResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.storeInfoList != null) {
        oprot.writeFieldBegin(STORE_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.storeInfoList.size()));
          for (StoreInfo _iter67 : struct.storeInfoList)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListStoreResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ListStoreResultTupleScheme getScheme() {
      return new ListStoreResultTupleScheme();
    }
  }

  private static class ListStoreResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ListStoreResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ListStoreResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStoreInfoList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStoreInfoList()) {
        {
          oprot.writeI32(struct.storeInfoList.size());
          for (StoreInfo _iter68 : struct.storeInfoList)
          {
            _iter68.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ListStoreResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.storeInfoList = new java.util.ArrayList<StoreInfo>(_list69.size);
          @org.apache.thrift.annotation.Nullable StoreInfo _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new StoreInfo();
            _elem70.read(iprot);
            struct.storeInfoList.add(_elem70);
          }
        }
        struct.setStoreInfoListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

