/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cubeiosample.webservices.thirft.thirft;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-09")
public class RentMovieResult implements org.apache.thrift.TBase<RentMovieResult, RentMovieResult._Fields>, java.io.Serializable, Cloneable, Comparable<RentMovieResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RentMovieResult");

  private static final org.apache.thrift.protocol.TField INVENTORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inventoryId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("numUpdates", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RENT_FIELD_DESC = new org.apache.thrift.protocol.TField("rent", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RentMovieResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RentMovieResultTupleSchemeFactory();

  public int inventoryId; // required
  public int numUpdates; // required
  public double rent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INVENTORY_ID((short)1, "inventoryId"),
    NUM_UPDATES((short)2, "numUpdates"),
    RENT((short)3, "rent");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INVENTORY_ID
          return INVENTORY_ID;
        case 2: // NUM_UPDATES
          return NUM_UPDATES;
        case 3: // RENT
          return RENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INVENTORYID_ISSET_ID = 0;
  private static final int __NUMUPDATES_ISSET_ID = 1;
  private static final int __RENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INVENTORY_ID, new org.apache.thrift.meta_data.FieldMetaData("inventoryId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("numUpdates", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RENT, new org.apache.thrift.meta_data.FieldMetaData("rent", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RentMovieResult.class, metaDataMap);
  }

  public RentMovieResult() {
  }

  public RentMovieResult(
    int inventoryId,
    int numUpdates,
    double rent)
  {
    this();
    this.inventoryId = inventoryId;
    setInventoryIdIsSet(true);
    this.numUpdates = numUpdates;
    setNumUpdatesIsSet(true);
    this.rent = rent;
    setRentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RentMovieResult(RentMovieResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inventoryId = other.inventoryId;
    this.numUpdates = other.numUpdates;
    this.rent = other.rent;
  }

  public RentMovieResult deepCopy() {
    return new RentMovieResult(this);
  }

  @Override
  public void clear() {
    setInventoryIdIsSet(false);
    this.inventoryId = 0;
    setNumUpdatesIsSet(false);
    this.numUpdates = 0;
    setRentIsSet(false);
    this.rent = 0.0;
  }

  public int getInventoryId() {
    return this.inventoryId;
  }

  public RentMovieResult setInventoryId(int inventoryId) {
    this.inventoryId = inventoryId;
    setInventoryIdIsSet(true);
    return this;
  }

  public void unsetInventoryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INVENTORYID_ISSET_ID);
  }

  /** Returns true if field inventoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetInventoryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INVENTORYID_ISSET_ID);
  }

  public void setInventoryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INVENTORYID_ISSET_ID, value);
  }

  public int getNumUpdates() {
    return this.numUpdates;
  }

  public RentMovieResult setNumUpdates(int numUpdates) {
    this.numUpdates = numUpdates;
    setNumUpdatesIsSet(true);
    return this;
  }

  public void unsetNumUpdates() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMUPDATES_ISSET_ID);
  }

  /** Returns true if field numUpdates is set (has been assigned a value) and false otherwise */
  public boolean isSetNumUpdates() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMUPDATES_ISSET_ID);
  }

  public void setNumUpdatesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMUPDATES_ISSET_ID, value);
  }

  public double getRent() {
    return this.rent;
  }

  public RentMovieResult setRent(double rent) {
    this.rent = rent;
    setRentIsSet(true);
    return this;
  }

  public void unsetRent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RENT_ISSET_ID);
  }

  /** Returns true if field rent is set (has been assigned a value) and false otherwise */
  public boolean isSetRent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RENT_ISSET_ID);
  }

  public void setRentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case INVENTORY_ID:
      if (value == null) {
        unsetInventoryId();
      } else {
        setInventoryId((Integer)value);
      }
      break;

    case NUM_UPDATES:
      if (value == null) {
        unsetNumUpdates();
      } else {
        setNumUpdates((Integer)value);
      }
      break;

    case RENT:
      if (value == null) {
        unsetRent();
      } else {
        setRent((Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INVENTORY_ID:
      return getInventoryId();

    case NUM_UPDATES:
      return getNumUpdates();

    case RENT:
      return getRent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INVENTORY_ID:
      return isSetInventoryId();
    case NUM_UPDATES:
      return isSetNumUpdates();
    case RENT:
      return isSetRent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RentMovieResult)
      return this.equals((RentMovieResult)that);
    return false;
  }

  public boolean equals(RentMovieResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_inventoryId = true;
    boolean that_present_inventoryId = true;
    if (this_present_inventoryId || that_present_inventoryId) {
      if (!(this_present_inventoryId && that_present_inventoryId))
        return false;
      if (this.inventoryId != that.inventoryId)
        return false;
    }

    boolean this_present_numUpdates = true;
    boolean that_present_numUpdates = true;
    if (this_present_numUpdates || that_present_numUpdates) {
      if (!(this_present_numUpdates && that_present_numUpdates))
        return false;
      if (this.numUpdates != that.numUpdates)
        return false;
    }

    boolean this_present_rent = true;
    boolean that_present_rent = true;
    if (this_present_rent || that_present_rent) {
      if (!(this_present_rent && that_present_rent))
        return false;
      if (this.rent != that.rent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + inventoryId;

    hashCode = hashCode * 8191 + numUpdates;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rent);

    return hashCode;
  }

  @Override
  public int compareTo(RentMovieResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInventoryId()).compareTo(other.isSetInventoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInventoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inventoryId, other.inventoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumUpdates()).compareTo(other.isSetNumUpdates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumUpdates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numUpdates, other.numUpdates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRent()).compareTo(other.isSetRent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rent, other.rent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RentMovieResult(");
    boolean first = true;

    sb.append("inventoryId:");
    sb.append(this.inventoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numUpdates:");
    sb.append(this.numUpdates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rent:");
    sb.append(this.rent);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RentMovieResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RentMovieResultStandardScheme getScheme() {
      return new RentMovieResultStandardScheme();
    }
  }

  private static class RentMovieResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RentMovieResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RentMovieResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // INVENTORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inventoryId = iprot.readI32();
              struct.setInventoryIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numUpdates = iprot.readI32();
              struct.setNumUpdatesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rent = iprot.readDouble();
              struct.setRentIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RentMovieResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INVENTORY_ID_FIELD_DESC);
      oprot.writeI32(struct.inventoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_UPDATES_FIELD_DESC);
      oprot.writeI32(struct.numUpdates);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENT_FIELD_DESC);
      oprot.writeDouble(struct.rent);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RentMovieResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RentMovieResultTupleScheme getScheme() {
      return new RentMovieResultTupleScheme();
    }
  }

  private static class RentMovieResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RentMovieResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RentMovieResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInventoryId()) {
        optionals.set(0);
      }
      if (struct.isSetNumUpdates()) {
        optionals.set(1);
      }
      if (struct.isSetRent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInventoryId()) {
        oprot.writeI32(struct.inventoryId);
      }
      if (struct.isSetNumUpdates()) {
        oprot.writeI32(struct.numUpdates);
      }
      if (struct.isSetRent()) {
        oprot.writeDouble(struct.rent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RentMovieResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.inventoryId = iprot.readI32();
        struct.setInventoryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numUpdates = iprot.readI32();
        struct.setNumUpdatesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rent = iprot.readDouble();
        struct.setRentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

