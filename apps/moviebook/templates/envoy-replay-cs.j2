apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{service_name}}-lua
  namespace: {{namespace}}
  labels:
    app: moviebook
spec:
  workloadLabels:
    component: {{service_name}}
    namespace: {{namespace}}
  filters:
  - listenerMatch:
      #portNumber: 8080
      listenerType: SIDECAR_INBOUND #will match with the inbound listener for {{service_name}}:8080
    insertPosition:
      index: FIRST
    filterName: envoy.lua
    filterType: HTTP
    filterConfig:
      inlineCode: |
                local random = math.random
                math.randomseed((os.time()+os.clock())*1000000)
                function uuid()
                      local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
                      return string.gsub(template, '[xy]', function (c)
                    local v = (c == 'x') and random(0, 0xf) or random(8, 0xb)
                    return string.format('%x', v)
                  end)
                end
                -- taken from https://gist.github.com/tylerneylon/59f4bcf316be525b30ab#file-json-lua-L66
                local function escape_str(s)
                  local in_char  = {'\\', '"', '/', '\b', '\f', '\n', '\r', '\t'}
                  local out_char = {'\\', '"', '/',  'b',  'f',  'n',  'r',  't'}
                  for i, c in ipairs(in_char) do
                    s = s:gsub(c, '\\' .. out_char[i])
                  end
                  return s
                end
                local function esc_str_opt(str)
                  local charmap = {['\\']='\\\\', ['"']='\\"', ['/']='\\/', ['\b']='\\b', ['\f']='\\f', ['\n']='\\n', ['\r']='\\r', ['\t']='\\t'}
                  local buf = {}
                  local inpstr = {string.byte(str, 1, #str)}
                  for i = 1, #inpstr do
                    local inp = string.char(inpstr[i])
                    local out = charmap[inp]
                    if out == nil then out = inp end
                    buf[#buf+1] = out
                  end
                  return table.concat(buf)
                end
                local function esc_str_opt1(str)
                  local in_char  = {'\\', '"', '/', '\b', '\f', '\n', '\r', '\t'}
                  local out_char = {'\\\\', '\\"', '\\/',  '\\b',  '\\f',  '\\n',  '\\r',  '\\t'}
                  local buf = {}
                  local inpstr = {string.byte(str, 1, #str)}
                  for i = 1, #inpstr do
                    local inp = string.char(inpstr[i])
                    local out = inp
                    for i, c in ipairs(in_char) do
                      if (c == inp) then out = out_char[i] end
                    end
                    buf[#buf+1] = out
                  end
                  return table.concat(buf)
                end
                local function esc_str_opt2(str)
                  local in_char  = {'\\', '"', '/', '\b', '\f', '\n', '\r', '\t'}
                  local out_char = {'\\\\', '\\"', '\\/',  '\\b',  '\\f',  '\\n',  '\\r',  '\\t'}
                  local outstr = string.gsub(str, '[\\"/\b\f\n\r\t]', function (inp)
                    local out = inp
                    for i, c in ipairs(in_char) do
                      if (c == inp) then out = out_char[i] end
                    end
                    return out
                  end)
                  return outstr
                end
                function addToBuf(buf, tbl, delim, fieldname)
                  buf[#buf+1] = delim .. string.format("%q", fieldname) .. ': ['
                  local listdelim=''
                  for key, value in pairs(tbl) do
                    buf[#buf+1] = listdelim .. string.format("{ %q : %q }", key, value)
                    listdelim = ', '
                  end
                  buf[#buf+1] = ']'
                  delim = ', '
                end
                function logHdrBody(handle, meta)
                  local starttime = os.clock()
                  handle:logErr('logHdrBody Start time ' .. starttime)
                  local r = {['"'] = '\\"', ['\\'] = '\\\\'}
                  local p = '["\\]'
                  local hdrs = handle:headers()
                  local path = hdrs:get(":path") or "/"
                  local buf = {'{'}
                  buf[#buf+1] = string.format('"path":%q', path)
                  local delim = ', '
                  first = true
                  addToBuf(buf, meta, delim, "meta")
                  addToBuf(buf, hdrs, delim, "hdrs")
                  local body = handle:body()
                  local b = ''
                  if body then
                    local len = body:length()
                    b = body:getBytes(0, len)
                    -- b = "Hello World"
                  end
                  -- buf[#buf+1] = delim .. '"body":"' .. escape_str(b) .. '"'
                  buf[#buf+1] = delim .. '"body":"' .. esc_str_opt(b) .. '"'
                  -- buf[#buf+1] = delim .. '"body":"' .. esc_str_opt2(b) .. '"'
                  handle:logErr('optimized escaping 1')
                  buf[#buf+1] = '}'
                  data = table.concat(buf)
                  local logStartTime = os.clock()
                  handle:logErr('[cube]' .. data)
                  local logEndTime = os.clock()
                  handle:logErr('log write time ' .. (logEndTime - logStartTime))
                  local endtime = os.clock()
                  handle:logErr('logHdrBody End time ' .. endtime)
                  handle:logErr('logHdrBody time ' .. (endtime - starttime))
                end
                function envoy_on_response(response_handle)
                  local starttime = os.clock()
                  local meta = {}
                  meta["type"] = "response"
                  meta["status"] = response_handle:headers():get(":status") or ""
                  meta["timestamp"] = os.date("%Y-%m-%dT%H:%M:%SZ")
                  -- meta["collection"] = "test-movieinfo-c1"
                  meta["runType"] = "Replay"
                  meta["customerId"] = "{{customer}}"
                  meta["app"] = "{{cube_application}}"
                  meta["instanceId"] = "{{cube_instanceid}}"
                  meta["service"] = "{{service_name}}"
                  if (crequestid) then meta["c-request-id"] = crequestid end
                  if (xrequestid) then meta["x-request-id"] = xrequestid end
                  if (xb3traceid) then meta["x-b3-traceid"] = xb3traceid end
                  if (xb3spanid) then meta["x-b3-spanid"] = xb3spanid end
                  if (xb3parentspanid) then meta["x-b3-parentspanid"] = xb3parentspanid end
                  if (apiPath) then meta["apiPath"] = apiPath end
                  logHdrBody(response_handle, meta)
                  local endtime = os.clock()
                  response_handle:logErr('End time ' .. endtime)
                  response_handle:logErr('envoy_on_response time ' .. (endtime - starttime))
                end
                function envoy_on_request(request_handle)
                  local service = "{{service_name}}"
                  local meta = {}
                  meta["type"] = "request"
                  xrequestid = request_handle:headers():get("x-request-id")
                  xb3traceid = request_handle:headers():get("x-b3-traceid")
                  xb3spanid = request_handle:headers():get("x-b3-spanid")
                  xb3parentspanid = request_handle:headers():get("x-b3-parentspanid")
                  apiPath = request_handle:headers():get(":path") or "/"
                  crequestid = service .. "-" .. xb3traceid .. "-" .. uuid()
                  meta["c-request-id"] = crequestid
                  request_handle:logErr("Request id: " .. crequestid)
                  meta["method"] = request_handle:headers():get(":method") or ""
                  meta["timestamp"] = os.date("%Y-%m-%dT%H:%M:%SZ")
                  -- meta["collection"] = "test-movieinfo-c1"
                  meta["runType"] = "Replay"
                  meta["customerId"] = "{{customer}}"
                  meta["app"] = "{{cube_application}}"
                  meta["instanceId"] = "{{cube_instanceid}}"
                  meta["service"] = "{{service_name}}"
                  request_handle:logErr("Span id : " .. xb3spanid)
                  baggageParentId = request_handle:headers():get("baggage-parent-span-id")
                  if (baggageParentId) then request_handle:logErr("Baggage Parent id : " .. baggageParentId) end
                  if (xb3spanid) then meta["x-b3-spanid"] = xb3spanid end
                  if (xb3traceid) then meta["x-b3-traceid"] = xb3traceid end
                  if baggageParentId then
                    meta["x-b3-parentspanid"] = baggageParentId
                  end
                  logHdrBody(request_handle, meta)
                  request_handle:headers():remove("baggage-parent-span-id")
                  request_handle:headers():add("baggage-parent-span-id", xb3spanid)
                end
