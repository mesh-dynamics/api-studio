apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{service_name}}-lua
  namespace: {{namespace}}
  labels:
    app: cube
spec:
  workloadLabels:
    component: {{service_name}}
    namespace: {{namespace}}
  filters:
  - listenerMatch:
      #portNumber: 8080
      listenerType: SIDECAR_INBOUND #will match with the inbound listener for cubews:8080
    insertPosition:
      index: FIRST
    filterName: envoy.lua
    filterType: HTTP
    filterConfig:
      inlineCode: |
                local ffi = require("ffi")
                ffi.cdef[[
                  typedef long time_t;
                  typedef struct timeval {
                    time_t tv_sec;
                    time_t tv_usec;
                  } timeval;

                  int gettimeofday(struct timeval* t, void* tzp);
                ]]

                local t = ffi.new("timeval")
                local function getEpochTime()
                  ffi.C.gettimeofday(t, nil)
                  local res = tonumber(t.tv_sec) + tonumber(t.tv_usec)/1.0e6
                  return res
                end

                local random = math.random
                math.randomseed((os.time()+os.clock())*1000000)
                function uuid()
                      local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
                      return string.gsub(template, '[xy]', function (c)
                    local v = (c == 'x') and random(0, 0xf) or random(8, 0xb)
                    return string.format('%x', v)
                  end)
                end
                -- taken from https://gist.github.com/tylerneylon/59f4bcf316be525b30ab#file-json-lua-L66
                local function escape_str(s)
                  local in_char  = {'\\', '"', '/', '\b', '\f', '\n', '\r', '\t'}
                  local out_char = {'\\', '"', '/',  'b',  'f',  'n',  'r',  't'}
                  for i, c in ipairs(in_char) do
                    s = s:gsub(c, '\\' .. out_char[i])
                  end
                  return s
                end
                function addToBuf(buf, tbl, delim, fieldname)
                  buf[#buf+1] = delim .. string.format("%q", fieldname) .. ': ['
                  local listdelim=''
                  for key, value in pairs(tbl) do
                    buf[#buf+1] = listdelim .. string.format("{ %q : %q }", key, value)
                    listdelim = ', '
                  end
                  buf[#buf+1] = ']'
                  delim = ', '
                end
                function logHdrBody(handle, meta)
                  local r = {['"'] = '\\"', ['\\'] = '\\\\'}
                  local p = '["\\]'
                  local hdrs = handle:headers()
                  local path = hdrs:get(":path") or "/"
                  local buf = {'{'}
                  buf[#buf+1] = string.format('"path":%q', path)
                  local delim = ', '
                  first = true
                  addToBuf(buf, meta, delim, "meta")
                  addToBuf(buf, hdrs, delim, "hdrs")
                  local body = handle:body()
                  local b = ''
                  if body then
                    local len = body:length()
                    b = body:getBytes(0, len)
                    -- b = "Hello World"
                  end
                  buf[#buf+1] = delim .. '"body":"' .. escape_str(b) .. '"'
                  buf[#buf+1] = '}'
                  data = table.concat(buf)
                  handle:logErr('[cube]' .. data)
                end
                function envoy_on_response(response_handle)
                  local meta = response_handle:streamInfo():dynamicMetadata():get("cubeio-request-meta")
                  meta["type"] = "response"
                  meta["status"] = response_handle:headers():get(":status") or ""
                  meta["timestamp"] = getEpochTime()
                  -- meta["collection"] = "testc1"
                  meta["runType"] = "Record"
                  logHdrBody(response_handle, meta)
                end
                function envoy_on_request(request_handle)
                  local service = "{{service_name}}"
                  local meta = {}
                  meta["type"] = "request"
                  local xrequestid = request_handle:headers():get("x-request-id")
                  local xb3traceid = request_handle:headers():get("x-b3-traceid")
                  local xb3spanid = request_handle:headers():get("x-b3-spanid")
                  local xb3parentspanid = request_handle:headers():get("x-b3-parentspanid")
                  local apiPath = request_handle:headers():get(":path") or "/"
                  local crequestid = service .. "-" .. xb3traceid .. "-" .. uuid()
                  meta["c-request-id"] = crequestid
                  request_handle:logErr("Request id: " .. crequestid)
                  meta["method"] = request_handle:headers():get(":method") or ""
                  meta["timestamp"] = getEpochTime()
                  -- meta["collection"] = "testc1"
                  meta["runType"] = "Record"
                  meta["customerId"] = "{{customer}}"
                  meta["app"] = "{{cube_application}}"
                  meta["instanceId"] = "{{cube_instanceid}}"
                  meta["service"] = "{{service_name}}"
                  request_handle:headers():remove("baggage-intent")
                  request_handle:headers():add("baggage-intent", "record")
                  request_handle:logInfo("Trace id : " .. xb3traceid)
                  logHdrBody(request_handle, meta)
                  for k,v in pairs(meta) do
                    if type(v)=="string" and k~="body" then
                      request_handle:streamInfo():dynamicMetadata():set("cubeio-request-meta", k , v)
                    end
                  end
                end
