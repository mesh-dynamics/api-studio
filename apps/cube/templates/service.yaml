##################################################################################################
# Cube Web Services - Record
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubews-record
  namespace: {{namespace}}
  labels:
    app: cubews-record
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: cubews-record
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cubews-record-v1
  namespace: {{namespace}}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: cubews-record
        version: v1
        namespace: {{namespace}}
    spec:
      containers:
      - name: cubews
        image: cubeiocorp/cubews:a49097d0cab67061068c9c629eb95dd2195d2cf6
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "190Mi"
            cpu: "100m"
          limits:
            memory: "250Mi"
            cpu: "300m"
        ports:
        - containerPort: 8080
        env:
          - name: app_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: APP_DOGFOOD
          - name: instance_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: INSTANCE_DOGFOOD
          - name: cube_record_service
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUBE_RECORD_SERVICE
          - name: cube_mock_service
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUBE_RECORD_SERVICE
          - name: service_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SERVICE_DOGFOOD
          - name: customer_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUSTOMER_DOGFOOD
          - name: redis_host
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: REDIS_HOST
      imagePullSecrets:
      - name: regcred

##################################################################################################
# Cube Web Services - Mock
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubews-mock
  namespace: {{namespace}}
  labels:
    app: cubews-mock
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: cubews-mock
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cubews-mock-v1
  namespace: {{namespace}}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: cubews-mock
        version: v1
        namespace: {{namespace}}
    spec:
      containers:
      - name: cubews
        image: cubeiocorp/cubews:a49097d0cab67061068c9c629eb95dd2195d2cf6
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "190Mi"
            cpu: "100m"
          limits:
            memory: "250Mi"
            cpu: "300m"
        ports:
        - containerPort: 8080
        env:
          - name: app_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: APP_DOGFOOD
          - name: instance_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: INSTANCE_DOGFOOD
          - name: cube_record_service
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUBE_RECORD_SERVICE
          - name: cube_mock_service
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUBE_RECORD_SERVICE
          - name: service_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SERVICE_DOGFOOD
          - name: customer_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUSTOMER_DOGFOOD
          - name: redis_host
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: REDIS_HOST
      imagePullSecrets:
      - name: regcred

##################################################################################################
# Cube Web Services - Replay
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubews-replay
  namespace: {{namespace}}
  labels:
    app: cubews-replay
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: cubews-replay
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cubews-replay-v1
  namespace: {{namespace}}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: cubews-replay
        version: v1
        namespace: {{namespace}}
    spec:
      containers:
      - name: cubews
        image: cubeiocorp/cubews:a49097d0cab67061068c9c629eb95dd2195d2cf6
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "180Mi"
            cpu: "100m"
          limits:
            memory: "250Mi"
            cpu: "300m"
        ports:
        - containerPort: 8080
        env:
          - name: app_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: APP_DOGFOOD
          - name: instance_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: INSTANCE_DOGFOOD
          - name: service_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: SERVICE_DOGFOOD
          - name: cube_record_service
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUBE_RECORD_SERVICE
          - name: cube_mock_service
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUBE_RECORD_SERVICE
          - name: customer_dogfood
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: CUSTOMER_DOGFOOD
          - name: redis_host
            valueFrom:
              configMapKeyRef:
                name: cubews
                key: REDIS_HOST
      imagePullSecrets:
      - name: regcred
##################################################################################################
# Cube UI
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubeui
  namespace: {{namespace}}
  labels:
    app: cubeui
spec:
  ports:
  - port: 80
    name: http
  selector:
    app: cubeui
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cubeui-v1
  namespace: {{namespace}}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: cubeui
        version: v1
        namespace: {{namespace}}
    spec:
      containers:
      - name: cubeui
        image: cubeiocorp/cubeui:88f3802ceab95e4c915feb6482e8f4e591ca66a2
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "32Mi"
            cpu: "5m"
          limits:
            memory: "64Mi"
            cpu: "10m"
        ports:
        - containerPort: 80
      imagePullSecrets:
      - name: regcred
#################################################################################################
# CubeUI backend
#################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: cubeui-backend
  namespace: {{namespace}}
  labels:
    app: cubeui-backend
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: cubeui-backend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cubeui-backend-v1
  namespace: {{namespace}}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: cubeui-backend
        version: v1
        namespace: {{namespace}}
    spec:
      containers:
      - name: cubeui-backend
        image: cubeiocorp/cubeuibackend:0ab452c3ae7baa4f9c255fae9f47c16073deba30
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "640Mi"
            cpu: "500m"
          limits:
            memory: "800Mi"
            cpu: "1000m"
        ports:
        - containerPort: 8080
      imagePullSecrets:
      - name: regcred

################################################
# Redis
################################################
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: {{namespace}}
spec:
  ports:
  - port: 6379
    name: peer
  clusterIP: None
  selector:
    app: redis

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: redis
  namespace: {{namespace}}
  labels:
    app: redis
spec:
  replicas: 1
  serviceName: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - command: [sh, -c, source /redis-config/init.sh ]
        image: redis:5.0.5-alpine
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - mountPath: /redis-config
          name: config
        - mountPath: /redis-data
          name: data
        resources:
          requests:
            memory: "64Mi"
          limits:
            cpu: "0.1"
            memory: "128Mi"
      - command: [sh, -c, cp /redis-config/sentinel.conf /redis-sentinel-conf/sentinel.conf  && source /redis-config/sentinel.sh]
        image: redis:5.0.5-alpine
        name: sentinel
        volumeMounts:
        - mountPath: /redis-config
          name: config
        - mountPath: /redis-sentinel-conf
          name: redis-sentinel
      volumes:
      - configMap:
          defaultMode: 0666
          name: redis-config
        name: config
      - emptyDir:
        name: data
      - emptyDir:
        name: redis-sentinel

# TODO: the following exernalname didn't work for a service that didn't go through port 80
# apiVersion: v1
# kind: Service
# metadata:
#   name: aws-mysql-sakila
# spec:
#   type: ExternalName
#   externalName: sakila2.cnt3lftdrpew.us-west-2.rds.amazonaws.com

##################################################################################################
# Mysql data server in the mesh
##################################################################################################
# apiVersion: v1
# kind: Service
# metadata:
#   name: mysql-sakila
#   labels:
#     app: mysql-sakila
# spec:
#   ports:
#   - port: 3306
#     name: tcp
#     protocol: TCP
#   selector:
#     app: mysql-sakila
# ---
# apiVersion: extensions/v1beta1
# kind: Deployment
# metadata:
#   name: mysql-sakila-v1
# spec:
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: mysql-sakila
#         version: v1
#     spec:
#       containers:
#       - name: mysql-sakila
#         image: cubeiocorp/mysql-sakila:v3
#         imagePullPolicy: Always
#         ports:
#         - containerPort: 3306
# ---
##################################################################################################
# External mysql server and endpoint
##################################################################################################

# kind: Endpoints
# apiVersion: v1
# metadata:
#  name: aws-mysql-sakila
# subsets:
#  - addresses:
#      - ip: 54.69.153.210 #sakila2.cnt3lftdrpew.us-west-2.rds.amazonaws.com
#    ports:
#      - port: 3306
